*&---------------------------------------------------------------------*
*& Report  ZTRANSIT_SCHEDULING_PROGRAM
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT ZTRANSIT_SCHEDULING_PROGRAM.
TABLES : ZTRAM_LOG_TABLE.

TYPES : BEGIN OF GS_T001,
        BUKRS TYPE T001-BUKRS,
        BUTXT TYPE T001-BUTXT,
        END OF GS_T001.


TYPES : BEGIN OF GS_T001W,
        WERKS TYPE WERKS_D,
        NAME1 TYPE T001W-NAME1,
        IWERK TYPE IWERK,
        VKORG TYPE VKOIV,
        CHECK TYPE C,
        CHECK1 TYPE C,
        ST_DAYS TYPE I,
        MN_DAYS1(5) TYPE I,
        STATUS TYPE CHAR3,
        STATUS1 TYPE CHAR3,
        END OF GS_T001W.

TYPES :  BEGIN OF GS_CUS_TABLE,
         WERKS TYPE   WERKS_D,
         NAME1 TYPE NAME1,
         ST_DAYS TYPE  I,
         MN_DAYS1 TYPE  ZVAL_INT_1,
         STATUS TYPE ZSTUT,
         STATUS1 TYPE ZSTUT_1,
         END OF GS_CUS_TABLE.



TYPES : BEGIN OF GS_MARC,
        MATNR TYPE MATNR,
        WERKS TYPE WERKS_D,
        TRAME TYPE TRAME,
        END OF GS_MARC.

TYPES : BEGIN OF GS_MDUB,
        MATNR TYPE MATNR,
        WERKS TYPE EWERK,
        EBELN TYPE EBELN,
        EBELP TYPE EBELP,
        WAMNG TYPE WAMNG,
        WEMNG TYPE WEEMG,
        END OF GS_MDUB.

TYPES : BEGIN OF GS_MSEG,
        BWART TYPE BWART,
        MATNR	 TYPE MATNR,
        WERKS	 TYPE WERKS_D,
        EBELN TYPE EBELN,
        BUDAT_MKPF TYPE BUDAT,
         TOT_DAYS TYPE I,
        END OF GS_MSEG.

TYPES : BEGIN OF GS_FINAL,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
        ST_DAYS TYPE I,
        MN_DAYS1(5) TYPE I,
        STATUS TYPE CHAR3,
        STATUS1 TYPE CHAR3,
        CHECK TYPE C,
        CHECK1 TYPE C,
        END OF GS_FINAL.



DATA : GT_T001 TYPE STANDARD TABLE OF GS_T001,
       WA_T001 TYPE GS_T001.

DATA  : GT_T001W TYPE STANDARD TABLE OF GS_T001W,
        WA_T001W TYPE GS_T001W.

DATA  : GT_MARC TYPE STANDARD TABLE OF GS_MARC,
        WA_MARC TYPE GS_MARC.

DATA :  GT_MDUB TYPE STANDARD TABLE OF GS_MDUB,
        WA_MDUB TYPE GS_MDUB.

DATA :  GT_MSEG TYPE STANDARD TABLE OF GS_MSEG,
        WA_MSEG TYPE GS_MSEG.

DATA : GT_FINAL TYPE STANDARD TABLE OF GS_FINAL,
       WA_FINAL TYPE GS_FINAL.

DATA : GT_CUS_TABLE TYPE STANDARD TABLE OF GS_CUS_TABLE,
       WA_CUS_TABLE TYPE GS_CUS_TABLE.

DATA : GT_CUS_TABLE1 TYPE STANDARD TABLE OF GS_CUS_TABLE,
       WA_CUS_TABLE1 TYPE GS_CUS_TABLE.


DATA : OK_CODE TYPE SY-UCOMM.

DATA : LV_FLAG(1) TYPE C.

DATA : LT_DATE TYPE SY-DATUM,
       LV_DATE TYPE BUDAT,
       LV_DAYS TYPE I,
       P_BUKRS TYPE BUKRS.

START-OF-SELECTION.

  LT_DATE = SY-DATUM.

  REFRESH GT_FINAL.
  REFRESH GT_T001.

  SELECT BUKRS
             BUTXT FROM T001 INTO TABLE GT_T001 WHERE BUKRS = '1000' OR BUKRS  = '2000'  OR BUKRS = '4000' OR BUKRS = '5000'.
  REFRESH GT_T001W.


  SELECT  WERKS
          NAME1
          IWERK
          VKORG
          FROM T001W INTO TABLE GT_T001W
          FOR ALL ENTRIES IN GT_T001 WHERE VKORG = GT_T001-BUKRS AND  IWERK = ' ' .
  REFRESH GT_MARC.


  SELECT  MATNR
          WERKS
          TRAME
          FROM MARC INTO TABLE GT_MARC
          FOR ALL ENTRIES IN GT_T001W
          WHERE WERKS = GT_T001W-WERKS AND TRAME <> '0.00' .
  REFRESH GT_MDUB.


  IF GT_MARC[] IS NOT INITIAL.
    SELECT MATNR
           WERKS
           EBELN
           EBELP
           WAMNG
           WEMNG
           FROM MDUB INTO TABLE GT_MDUB
           FOR ALL ENTRIES IN GT_MARC
           WHERE ( MATNR = GT_MARC-MATNR AND WERKS = GT_MARC-WERKS ).
  ENDIF.
  DELETE GT_MDUB WHERE WAMNG EQ 0 AND WEMNG EQ 0   .


  LOOP AT GT_MDUB INTO WA_MDUB.
    IF WA_MDUB-WAMNG  = WA_MDUB-WEMNG.
      DELETE GT_MDUB.
    ENDIF.
  ENDLOOP.



  REFRESH GT_MSEG.
  IF GT_MDUB[] IS  NOT INITIAL.
    SELECT BWART
           MATNR
           WERKS
           EBELN
           BUDAT_MKPF FROM MSEG INTO TABLE GT_MSEG
           FOR ALL ENTRIES IN GT_MDUB
           WHERE ( MATNR = GT_MDUB-MATNR
           AND WERKS = GT_MDUB-WERKS
           AND EBELN = GT_MDUB-EBELN )
           AND BWART <> '101' .
  ENDIF.


  SELECT  WERKS
          NAME1
          ST_DAYS
          MN_DAYS1
          STATUS
          STATUS1
          FROM ZTRAM_LOG_TABLE INTO TABLE GT_CUS_TABLE.




  LOOP AT GT_MSEG INTO WA_MSEG.
    CALL FUNCTION 'HR_99S_INTERVAL_BETWEEN_DATES'
      EXPORTING
        BEGDA = WA_MSEG-BUDAT_MKPF
        ENDDA = LT_DATE
      IMPORTING
        DAYS  = LV_DAYS.
    WA_MSEG-TOT_DAYS = LV_DAYS.
    MODIFY GT_MSEG FROM WA_MSEG TRANSPORTING TOT_DAYS.
    CLEAR WA_MSEG.
  ENDLOOP.

  SORT GT_MSEG BY WERKS TOT_DAYS DESCENDING.
  DELETE ADJACENT DUPLICATES FROM GT_MSEG COMPARING WERKS .




  LOOP AT GT_CUS_TABLE INTO WA_CUS_TABLE.
    LOOP AT GT_T001W INTO WA_T001W WHERE WERKS = WA_CUS_TABLE-WERKS.
      WA_CUS_TABLE-WERKS = WA_T001W-WERKS.
      WA_CUS_TABLE-NAME1 = WA_T001W-NAME1.
      LOOP AT GT_MSEG INTO WA_MSEG WHERE WERKS = WA_CUS_TABLE-WERKS.
        WA_CUS_TABLE-ST_DAYS = WA_MSEG-TOT_DAYS.

      ENDLOOP.
    ENDLOOP.
    WA_FINAL-MN_DAYS1 = WA_CUS_TABLE-MN_DAYS1.
    IF WA_MSEG-TOT_DAYS > WA_CUS_TABLE-MN_DAYS1.
      WA_FINAL-STATUS = 'NO'.
    ELSEIF WA_MSEG-TOT_DAYS < WA_CUS_TABLE-MN_DAYS1.
      WA_FINAL-STATUS = 'YES'.
    ENDIF.

    IF WA_CUS_TABLE-STATUS1 = 'YES'.
      WA_CUS_TABLE-STATUS1 = ' '.

    ELSEIF WA_CUS_TABLE-STATUS1 = 'NO'.
      WA_CUS_TABLE-STATUS1 = ' '.

    ENDIF.


    MODIFY GT_CUS_TABLE FROM WA_CUS_TABLE INDEX SY-TABIX TRANSPORTING WERKS NAME1 ST_DAYS STATUS1 STATUS MN_DAYS1. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation

  ENDLOOP.

  LOOP AT GT_CUS_TABLE INTO WA_CUS_TABLE.

    MOVE-CORRESPONDING WA_CUS_TABLE TO ZTRAM_LOG_TABLE.
    MODIFY ZTRAM_LOG_TABLE.

  ENDLOOP.
