*&---------------------------------------------------------------------*
*& Report  ZSAP_SALES_PRO_PROJECTION
*&Functional                   : Mr.UMAPATHY                    *
*& Developer                   : Mr.Ramachandran. M                          *
*& Created On                  : 12/11/2015                            *
*& Company                     : Sheenlac Paints Pvt Ltd               *
*& Verified By                 : Mr.Umapathy                     *
*& Title                       : SALES_PROJECTION Report Document For Sap and Sales Pro    *
*& Report Name                 : ZSALES_PROJECTION                     *
*& Development Id              : kpabap                                *
*& Related Information         : SALES_PROJECTION Report Document      *
*&---------------------------------------------------------------------*

REPORT ZSAP_SALES_PRO_PROJECTION.

TYPES : BEGIN OF GS_PBIM,
        MATNR TYPE PBIM-MATNR,              "Material
        WERKS TYPE PBIM-WERKS,              "Plant
        BEDAE TYPE PBIM-BEDAE,              "Reqmts type
        VERSB TYPE PBIM-VERSB,              "Version
        PBDNR TYPE PBIM-PBDNR,              "Reqmts Plan
        BDZEI TYPE PBIM-BDZEI,              "Reqmts pointer
        VERVS TYPE PBIM-VERVS,              "Active
        END OF GS_PBIM.

DATA : GT_PBIM TYPE TABLE OF GS_PBIM ,
       WA_PBIM TYPE GS_PBIM.

TYPES : BEGIN OF GS_PBED ,
        BDZEI TYPE PBED-BDZEI,               "Reqmts pointer
        PDATU TYPE PBED-PDATU,               "Finish date
        AENAM TYPE PBED-AENAM,               "Changed by
        LAEDA TYPE PBED-LAEDA,               "Last Change
        MEINS TYPE PBED-MEINS,               "Base Unit
        PLNMG TYPE P DECIMALS 0,             "PBED-PLNMG, "Planned qty
        END OF GS_PBED .

DATA : GT_PBED  TYPE TABLE OF GS_PBED ,
       WA_PBED  TYPE GS_PBED .

TYPES : BEGIN OF GS_T001W,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
        ORT01 TYPE T001W-ORT01,
        END OF GS_T001W.

DATA : GT_T001W TYPE TABLE OF GS_T001W,
       WA_T001W TYPE GS_T001W.

TYPES : BEGIN OF GS_T001W1,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
        ORT01 TYPE T001W-ORT01,
        END OF GS_T001W1.

DATA : GT_T001W1 TYPE TABLE OF GS_T001W1,
       WA_T001W1 TYPE GS_T001W1.

TYPES: BEGIN OF GS_MARA,
       MATNR TYPE MARA-MATNR,              " Material Code
       MTART TYPE MARA-MTART,              "CHANGES ON 20/09/2014
       MATKL TYPE MARA-MATKL,              " Material Group
       MEINS TYPE MARA-MEINS,              " UOM
       SPART TYPE MARA-SPART,              " Division
       VOLUM TYPE P DECIMALS 2,           "MARA-VOLUM,   " Volume
       END OF GS_MARA.

DATA: GT_MARA TYPE TABLE OF GS_MARA,
      WA_MARA TYPE GS_MARA.

TYPES: BEGIN OF GS_MARA1,
       MATNR TYPE MARA-MATNR,              " Material Code
       MTART TYPE MARA-MTART,              "CHANGES ON 20/09/2014
       MATKL TYPE MARA-MATKL,              " Material Group
       MEINS TYPE MARA-MEINS,              " UOM
       SPART TYPE MARA-SPART,              " Division
       VOLUM TYPE P DECIMALS 2,           "MARA-VOLUM,   " Volume
       END OF GS_MARA1.

DATA: GT_MARA1 TYPE TABLE OF GS_MARA1,
      WA_MARA1 TYPE GS_MARA1.

TYPES: BEGIN OF GS_MAKT,
       MATNR TYPE MAKT-MATNR,              " Material Number
       MAKTX TYPE MAKT-MAKTX,              " Material Description
       END OF GS_MAKT.

DATA: GT_MAKT TYPE TABLE OF GS_MAKT,
      WA_MAKT TYPE GS_MAKT.

TYPES: BEGIN OF GS_MAKT1,
       MATNR TYPE MAKT-MATNR,              " Material Number
       MAKTX TYPE MAKT-MAKTX,              " Material Description
       END OF GS_MAKT1.

DATA: GT_MAKT1 TYPE TABLE OF GS_MAKT1,
      WA_MAKT1 TYPE GS_MAKT1.

TYPES: BEGIN OF ES_MARD,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF ES_MARD.

DATA: GT_MARD TYPE TABLE OF ES_MARD,
      WA_MARD TYPE ES_MARD.

TYPES: BEGIN OF ES_MARD1,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF ES_MARD1.

DATA: GT_MARD1 TYPE TABLE OF ES_MARD1,
      WA_MARD1 TYPE ES_MARD1.

TYPES: BEGIN OF ES_MARD2,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF ES_MARD2.

DATA: GT_MARD2 TYPE TABLE OF ES_MARD2,
      WA_MARD2 TYPE ES_MARD2.

TYPES: BEGIN OF ES_MARD3,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF ES_MARD3.

DATA: GT_MARD3 TYPE TABLE OF ES_MARD3,
      WA_MARD3 TYPE ES_MARD3.

TYPES: BEGIN OF ES_MARD4,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF ES_MARD4.

DATA: GT_MARD4 TYPE TABLE OF ES_MARD4,
      WA_MARD4 TYPE ES_MARD4.

TYPES: BEGIN OF ES_MARD5,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF ES_MARD5.

DATA: GT_MARD5 TYPE TABLE OF ES_MARD5,
      WA_MARD5 TYPE ES_MARD5.

TYPES: BEGIN OF ES_MARC,
      TRAME TYPE MARC-TRAME,    " Stk in Transit
      MATNR TYPE MARC-MATNR,    " Material
      WERKS TYPE MARC-WERKS,    " Plant
      END OF ES_MARC.

DATA: GT_MARC TYPE TABLE OF ES_MARC,
      WA_MARC TYPE ES_MARC.

TYPES: BEGIN OF ES_MARC1,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF ES_MARC1.

DATA: GT_MARC1 TYPE TABLE OF ES_MARC1,
      WA_MARC1 TYPE ES_MARC1.

TYPES: BEGIN OF ES_MARC2,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF ES_MARC2.

DATA: GT_MARC2 TYPE TABLE OF ES_MARC2,
      WA_MARC2 TYPE ES_MARC2.

TYPES: BEGIN OF ES_MARC3,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF ES_MARC3.

DATA: GT_MARC3 TYPE TABLE OF ES_MARC3,
      WA_MARC3 TYPE ES_MARC3.

TYPES: BEGIN OF ES_MARC4,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF ES_MARC4.

DATA: GT_MARC4 TYPE TABLE OF ES_MARC4,
      WA_MARC4 TYPE ES_MARC4.

TYPES : BEGIN OF GS_MARCSP,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        SOBSL TYPE MARC-SOBSL,
      END OF GS_MARCSP.

DATA : GT_MARCSP TYPE TABLE OF GS_MARCSP,
       WA_MARCSP TYPE GS_MARCSP.

TYPES : BEGIN OF GS_MARCSP1,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        SOBSL TYPE MARC-SOBSL,
      END OF GS_MARCSP1.

DATA : GT_MARCSP1 TYPE TABLE OF GS_MARCSP1,
       WA_MARCSP1 TYPE GS_MARCSP1.

TYPES : BEGIN OF GS_MARCSP3,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        SOBSL TYPE MARC-SOBSL,
      END OF GS_MARCSP3.

DATA : GT_MARCSP3 TYPE TABLE OF GS_MARCSP3,
       WA_MARCSP3 TYPE GS_MARCSP3.

TYPES : BEGIN OF GS_MARCSP4,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        SOBSL TYPE MARC-SOBSL,
      END OF GS_MARCSP4.

DATA : GT_MARCSP4 TYPE TABLE OF GS_MARCSP4,
       WA_MARCSP4 TYPE GS_MARCSP4.

TYPES : BEGIN OF GS_MARCSP5,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        SOBSL TYPE MARC-SOBSL,
      END OF GS_MARCSP5.

DATA : GT_MARCSP5 TYPE TABLE OF GS_MARCSP5,
       WA_MARCSP5 TYPE GS_MARCSP5.

TYPES : BEGIN OF GS_MARCSP6,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        SOBSL TYPE MARC-SOBSL,
      END OF GS_MARCSP6.

DATA : GT_MARCSP6 TYPE TABLE OF GS_MARCSP6,
       WA_MARCSP6 TYPE GS_MARCSP6.

TYPES: BEGIN OF GS_UNIT1,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF GS_UNIT1.

DATA: GT_UNIT1 TYPE TABLE OF GS_UNIT1,
      WA_UNIT1 TYPE GS_UNIT1.

TYPES: BEGIN OF GS_UNIT1TRN,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF GS_UNIT1TRN.

DATA: GT_UNIT1TRN TYPE TABLE OF GS_UNIT1TRN,
      WA_UNIT1TRN TYPE GS_UNIT1TRN.

TYPES: BEGIN OF GS_UNIT3,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF GS_UNIT3.

DATA: GT_UNIT3 TYPE TABLE OF GS_UNIT3,
      WA_UNIT3 TYPE GS_UNIT3.

TYPES: BEGIN OF GS_UNIT3TRN,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF GS_UNIT3TRN.

DATA: GT_UNIT3TRN TYPE TABLE OF GS_UNIT3TRN,
      WA_UNIT3TRN TYPE GS_UNIT3TRN.

TYPES: BEGIN OF GS_UNIT4,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF GS_UNIT4.

DATA: GT_UNIT4 TYPE TABLE OF GS_UNIT4,
      WA_UNIT4 TYPE GS_UNIT4.

TYPES: BEGIN OF GS_UNIT4TRN,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF GS_UNIT4TRN.

DATA: GT_UNIT4TRN TYPE TABLE OF GS_UNIT4TRN,
      WA_UNIT4TRN TYPE GS_UNIT4TRN.

TYPES: BEGIN OF GS_UNIT5,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF GS_UNIT5.

DATA: GT_UNIT5 TYPE TABLE OF GS_UNIT5,
      WA_UNIT5 TYPE GS_UNIT5.

TYPES: BEGIN OF GS_UNIT5TRN,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF GS_UNIT5TRN.

DATA: GT_UNIT5TRN TYPE TABLE OF GS_UNIT5TRN,
      WA_UNIT5TRN TYPE GS_UNIT5TRN.

TYPES: BEGIN OF GS_UNIT8,
      LABST TYPE MARD-LABST,         "Unrestricted
      INSME TYPE MARD-INSME,         "In Qual. Insp.
      SPEME TYPE MARD-SPEME,         "Blocked
      MATNR TYPE MARD-MATNR,
      WERKS TYPE MARD-WERKS,
      LGORT TYPE MARD-LGORT,
      END OF GS_UNIT8.

DATA: GT_UNIT8 TYPE TABLE OF GS_UNIT8,
      WA_UNIT8 TYPE GS_UNIT8.

TYPES: BEGIN OF GS_UNIT8TRN,
       TRAME TYPE MARC-TRAME,    " Stk in Transit
       MATNR TYPE MARC-MATNR,    " Material
       WERKS TYPE MARC-WERKS,    " Plant
       END OF GS_UNIT8TRN.

DATA: GT_UNIT8TRN TYPE TABLE OF GS_UNIT8TRN,
      WA_UNIT8TRN TYPE GS_UNIT8TRN.

TYPES : BEGIN OF GS_MBEW,
        MATNR TYPE MBEW-MATNR,            "Material
        BWKEY TYPE MBEW-BWKEY,            "Valuation Area / Plant
        VPRSV TYPE MBEW-VPRSV,            " Price Control
        VERPR TYPE MBEW-VERPR,            "Moving Price
        STPRS TYPE MBEW-STPRS,            "Standard price
        END OF GS_MBEW.

DATA: GT_MBEW TYPE TABLE OF GS_MBEW,
      WA_MBEW TYPE GS_MBEW.

TYPES : BEGIN OF GS_MBEW1,
        MATNR TYPE MBEW-MATNR,            "Material
        BWKEY TYPE MBEW-BWKEY,            "Valuation Area / Plant
        VPRSV TYPE MBEW-VPRSV,            " Price Control
        VERPR TYPE MBEW-VERPR,            "Moving Price
        STPRS TYPE MBEW-STPRS,            "Standard price
        END OF GS_MBEW1.

DATA: GT_MBEW1 TYPE TABLE OF GS_MBEW1,
      WA_MBEW1 TYPE GS_MBEW1.

TYPES : BEGIN OF GS_MBEW3,
        MATNR TYPE MBEW-MATNR,            "Material
        BWKEY TYPE MBEW-BWKEY,            "Valuation Area / Plant
        VPRSV TYPE MBEW-VPRSV,            " Price Control
        VERPR TYPE MBEW-VERPR,            "Moving Price
        STPRS TYPE MBEW-STPRS,            "Standard price
        END OF GS_MBEW3.

DATA: GT_MBEW3 TYPE TABLE OF GS_MBEW3,
      WA_MBEW3 TYPE GS_MBEW3.

TYPES : BEGIN OF GS_MBEW4,
        MATNR TYPE MBEW-MATNR,            "Material
        BWKEY TYPE MBEW-BWKEY,            "Valuation Area / Plant
        VPRSV TYPE MBEW-VPRSV,            " Price Control
        VERPR TYPE MBEW-VERPR,            "Moving Price
        STPRS TYPE MBEW-STPRS,            "Standard price
        END OF GS_MBEW4.

DATA: GT_MBEW4 TYPE TABLE OF GS_MBEW4,
      WA_MBEW4 TYPE GS_MBEW4.

TYPES : BEGIN OF GS_MBEW8,
        MATNR TYPE MBEW-MATNR,            "Material
        BWKEY TYPE MBEW-BWKEY,            "Valuation Area / Plant
        VPRSV TYPE MBEW-VPRSV,            " Price Control
        VERPR TYPE MBEW-VERPR,            "Moving Price
        STPRS TYPE MBEW-STPRS,            "Standard price
        END OF GS_MBEW8.

DATA: GT_MBEW8 TYPE TABLE OF GS_MBEW8,
      WA_MBEW8 TYPE GS_MBEW8.

TYPES : BEGIN OF GS_MVKE,

        MATNR TYPE MVKE-MATNR,
        VKORG TYPE MVKE-VKORG,
        VTWEG TYPE MVKE-VTWEG,
        MVGR1 TYPE MVKE-MVGR1,
        ZZMVGR1 TYPE MVKE-MVGR1,
      END OF GS_MVKE.

DATA : GT_MVKE TYPE TABLE OF GS_MVKE,
       WA_MVKE TYPE GS_MVKE.

DATA : GT_MVKE9 TYPE TABLE OF GS_MVKE,
       WA_MVKE9 TYPE GS_MVKE.

TYPES : BEGIN OF GS_TVM1T,

        MVGR1 TYPE TVM1T-MVGR1,
        BEZEI TYPE TVM1T-BEZEI,
        ZZBEZEI TYPE TVM1T-BEZEI,
        END OF GS_TVM1T.


DATA : GT_TVM1T TYPE TABLE OF GS_TVM1T,
       WA_TVM1T TYPE GS_TVM1T .

DATA : GT_TVM1T9 TYPE TABLE OF GS_TVM1T,
       WA_TVM1T9 TYPE GS_TVM1T .


TYPES : BEGIN OF GS_MVKE1,

        MATNR TYPE MVKE-MATNR,
        VKORG TYPE MVKE-VKORG,
        VTWEG TYPE MVKE-VTWEG,
        MVGR1 TYPE MVKE-MVGR1,

      END OF GS_MVKE1.

DATA : GT_MVKE1 TYPE TABLE OF GS_MVKE1,
       WA_MVKE1 TYPE GS_MVKE1.

TYPES : BEGIN OF GS_TVM1T1,

        MVGR1 TYPE TVM1T-MVGR1,
        BEZEI TYPE TVM1T-BEZEI,
        END OF GS_TVM1T1.

DATA : GT_TVM1T1 TYPE TABLE OF GS_TVM1T1,
       WA_TVM1T1 TYPE GS_TVM1T1 .

TYPES : BEGIN OF GS_PLAF,

        PLNUM TYPE PLAF-PLNUM,
        MATNR TYPE PLAF-MATNR,
        PLWRK TYPE PLAF-PLWRK,
        PWWRK TYPE PLAF-PWWRK,
        GSMNG TYPE PLAF-GSMNG,
        PSTTR TYPE PLAF-PSTTR,
        PEDTR TYPE PLAF-PEDTR,
        UMSKZ TYPE PLAF-UMSKZ,

  END OF GS_PLAF.

DATA : GT_PLAF TYPE TABLE OF GS_PLAF,
       WA_PLAF TYPE GS_PLAF.

TYPES : BEGIN OF GS_ZSALES_PRO,

      ZZWERKS TYPE ZSALES_PRO-ZZWERKS,
      ZZNAME1 TYPE ZSALES_PRO-ZZNAME1,
      ZZMATNR TYPE ZSALES_PRO-ZZMATNR,
      ZZMAKTX TYPE ZSALES_PRO-ZZMAKTX,
      ZZVOLUM TYPE ZSALES_PRO-ZZVOLUM,
      ZZMTART TYPE ZSALES_PRO-ZZMTART,
      ZZPBDNR TYPE ZSALES_PRO-ZZPBDNR,
      ZZENTRY TYPE ZSALES_PRO-ZZENTRY,
      ZZREQ_DA TYPE ZSALES_PRO-ZZREQ_DA,
      ZZPLNMG TYPE ZSALES_PRO-ZZPLNMG,
      ZZMEINS TYPE ZSALES_PRO-ZZMEINS,
      ZZPLNMG_LTR TYPE ZSALES_PRO-ZZPLNMG_LTR,
      ZZUSER TYPE ZSALES_PRO-ZZUSER,
      ZZCUSTOM TYPE ZSALES_PRO-ZZCUSTOM,
      ZZCUS_NAME TYPE ZSALES_PRO-ZZCUS_NAME,


END OF GS_ZSALES_PRO.

DATA : GT_ZSALES_PRO TYPE TABLE OF GS_ZSALES_PRO,
       WA_ZSALES_PRO TYPE GS_ZSALES_PRO.


TYPES : BEGIN OF GS_FINAL,

       MATNR TYPE PBIM-MATNR,              "Material
       MATNR1 TYPE PBIM-MATNR,             "Material
       MATNR3 TYPE PBIM-MATNR,

       WERKS TYPE PBIM-WERKS,              "Plant
       WERKS3 TYPE PBIM-WERKS,              "Plant

       MAKTX TYPE MAKT-MAKTX,              "Material Description

       LABST TYPE MARD-LABST,              "Unrestricted
       LABST3 TYPE MARD-LABST,              "Unrestricted
       LGORT TYPE MARD-LGORT,              "Storgae Location
*       INSME TYPE MARD-INSME,              "In Qual. Insp.
*       SPEME TYPE MARD-SPEME,              "Blocked

       BEDAE TYPE PBIM-BEDAE,              "Reqmts type
       VERSB TYPE PBIM-VERSB,              "Version
       PBDNR TYPE PBIM-PBDNR,              "Reqmts Plan
       VERVS TYPE PBIM-VERVS,
       BDZEI TYPE PBIM-BDZEI,              "Reqmts pointer
       PDATU TYPE PBED-PDATU,               "Finish date
       AENAM TYPE PBED-AENAM,               "Changed by
       LAEDA TYPE PBED-LAEDA,               "Last Change
       MEINS TYPE PBED-MEINS,               "Base Unit
       MTART TYPE MARA-MTART,

       CUMATNR TYPE MARD-MATNR,
       GHMATNR TYPE MARD-MATNR,
       MUMATNR TYPE MARD-MATNR,

       LABST1 TYPE MARD-LABST,              "Unrestricted
       LGORT1 TYPE MARD-LGORT,              "Storgae Location

       TRAME1 TYPE MARC-TRAME,              "Transit
       LABST2 TYPE P DECIMALS 2,            "Unrestricted
       TRAME2 TYPE P DECIMALS 2,            "Transit

       STKGHW TYPE MARD-LABST,
       STKCUW TYPE MARD-LABST,
       STKMUW TYPE MARD-LABST,

       STKTRNGHW TYPE MARC-TRAME,
       STKTRNCUW TYPE MARC-TRAME,
       STKTRNMUW TYPE MARC-TRAME,

       SPMON TYPE S094-SPMON,

       SOBSL TYPE MARC-SOBSL,      "FOR SP KEY

       MVGR1 TYPE MVKE-MVGR1,     "Material Group.

       BEZEI TYPE TVM1T-BEZEI,    "Description.

       P1_MRPQTY TYPE P DECIMALS 2,

       P3_MRPQTY TYPE P DECIMALS 2,
       P4_MRPQTY TYPE P DECIMALS 2,
       P5_MRPQTY TYPE P DECIMALS 2,

*      UPTOWHC_QTY TYPE P DECIMALS 2,

       UNIT1MATNR TYPE MARD-MATNR,
       UNIT3MATNR TYPE MARD-MATNR,
       UNIT4MATNR TYPE MARD-MATNR,
       UNIT5MATNR TYPE MARD-MATNR,

       UNIT1 TYPE MARD-LABST,
       UNIT1TR TYPE MARC-TRAME,

       UNIT3 TYPE MARD-LABST,
       UNIT3TR TYPE MARC-TRAME,

       UNIT4 TYPE MARD-LABST,
       UNIT4TR TYPE MARC-TRAME,

       UNIT5 TYPE MARD-LABST,
       UNIT5TR TYPE MARC-TRAME,

       UNIT8 TYPE MARD-LABST,
       UNIT8TR TYPE MARC-TRAME,

       VPRSV1 TYPE MBEW-VPRSV,         " Price Control
       PRICE1 TYPE P DECIMALS 2,       " STOCKVALUE

       VPRSV3 TYPE MBEW-VPRSV,         " Price Control
       PRICE3 TYPE P DECIMALS 2,       " STOCKVALUE

       VPRSV4 TYPE MBEW-VPRSV,         " Price Control
       PRICE4 TYPE P DECIMALS 2,       " STOCKVALUE

       VPRSV8 TYPE MBEW-VPRSV,         " Price Control
       PRICE8 TYPE P DECIMALS 2,       " STOCKVALUE

       VPRSV TYPE MBEW-VPRSV,         " Price Control
       PRICE TYPE P DECIMALS 2,       " STOCKVALUE

       DISMM TYPE S094-DISMM,
       MABGA TYPE P DECIMALS 0,
       WABGA TYPE P DECIMALS 0,

       MRPQTY1 TYPE P DECIMALS 0,
       MRPVAL1 TYPE P DECIMALS 0,
       UNI5FVAL1 TYPE P DECIMALS 0,

       MNG02 TYPE P DECIMALS 0,
       MRPVAL3 TYPE P DECIMALS 0,
       UNI5FVAL3 TYPE P DECIMALS 0,

       MRPQTY4 TYPE P DECIMALS 0,
       MRPVAL4 TYPE P DECIMALS 0,
       UNI5FVAL4 TYPE P DECIMALS 0,

       MRPQTY5 TYPE P DECIMALS 0,
       MRPVAL5 TYPE P DECIMALS 0,
       UNI5FVAL5 TYPE P DECIMALS 0,

*       MRPQTY8 TYPE P DECIMALS 0,
*       MRPVAL8 TYPE P DECIMALS 0,
*       UNI8FVAL8 TYPE P DECIMALS 0,


       PLNUM TYPE PLAF-PLNUM,
       PWWRK TYPE PLAF-PWWRK,
       GSMNG TYPE PLAF-GSMNG,
       PSTTR TYPE PLAF-PSTTR,
       PEDTR TYPE PLAF-PEDTR,
       UMSKZ TYPE PLAF-UMSKZ,


       FLAG(1) TYPE C,
*       NAME1 TYPE T001W-NAME1,
      NAME1 TYPE T001W-ORT01,
       CUMUL_MCODE TYPE MARC-MATNR,
       PLNMG TYPE P DECIMALS 0,             "Planned qty
*       LABST TYPE P DECIMALS 0,
       INSME TYPE P DECIMALS 2,
       SPEME TYPE P DECIMALS 2,
       TRAME TYPE MARC-TRAME,
       VOLUM TYPE P DECIMALS 2,              " Volume
       TOTQTY TYPE P DECIMALS 2,
       TOT_QTY1 TYPE P DECIMALS 2,
       UPTOWHC_QTY TYPE P DECIMALS 2,

       REQ_QTY TYPE P DECIMALS 2,
       REQ_CUM_QTY TYPE P DECIMALS 2,
       REQ_QTYWHC TYPE P DECIMALS 2,
       FINALQTY TYPE P DECIMALS 2,
       FINALQTY1 TYPE P DECIMALS 2,
       UPWHC_QTY1 TYPE P DECIMALS 2,
       UPTOWHCSTK TYPE P DECIMALS 0,
       WHCFINALQTY TYPE P DECIMALS 0,
       V_MACOUNT TYPE I,
       V_WERKCOUNT TYPE I,
       V_MATCOUNT TYPE I,
       V_MATCOUNT1 TYPE I,

       V_MATCOUNT3 TYPE I,
       V_WERKCOUNT3 TYPE I,
       V_LABSTCOUNT TYPE I,


       V_STKCUMCOUNT TYPE I,
       V_STKGHCOUNT TYPE I,
       V_STKMUCOUNT TYPE I,
       TOTALAMT TYPE P DECIMALS 2,
       TOTALAMT1 TYPE P DECIMALS 2,
       STAT(30) TYPE C,

       V_MATCOU1 TYPE I,
       V_MATCOU3 TYPE I,
       V_MATCOU4 TYPE I,
       V_MATCOU5 TYPE I,

       V_PCCOUNT1 TYPE I,     "PRICE CONTROLER
       V_PCCOUNT3 TYPE I,     "PRICE CONTROLER
       V_PCCOUNT4 TYPE I,     "PRICE CONTROLER
       V_PCCOUNT5 TYPE I,     "PRICE CONTROLER

       CELLCOLOR TYPE LVC_T_SCOL,

       ZZWERKS TYPE ZSALES_PRO-ZZWERKS,
       ZZNAME1 TYPE ZSALES_PRO-ZZNAME1,
       ZZMATNR TYPE ZSALES_PRO-ZZMATNR,
       ZZMAKTX TYPE ZSALES_PRO-ZZMAKTX,
       ZZVOLUM TYPE ZSALES_PRO-ZZVOLUM,
       ZZMTART TYPE ZSALES_PRO-ZZMTART,
       ZZPBDNR TYPE ZSALES_PRO-ZZPBDNR,
       ZZENTRY TYPE ZSALES_PRO-ZZENTRY,
       ZZREQ_DA TYPE ZSALES_PRO-ZZREQ_DA,
       ZZPLNMG TYPE ZSALES_PRO-ZZPLNMG,
       ZZMEINS TYPE ZSALES_PRO-ZZMEINS,
       ZZPLNMG_LTR TYPE ZSALES_PRO-ZZPLNMG_LTR,
       ZZUSER TYPE ZSALES_PRO-ZZUSER,
       ZZCUSTOM TYPE ZSALES_PRO-ZZCUSTOM,
       ZZCUS_NAME TYPE ZSALES_PRO-ZZCUS_NAME,
       FINALQTY10 TYPE P DECIMALS 2,
       FINALQTYN TYPE P DECIMALS 2,
       RES(20) TYPE C,
       FINALQTY22 TYPE P DECIMALS 2,
       FINALQTY33 TYPE P DECIMALS 2,
       FINALQTY55 TYPE P DECIMALS 2,
       V_WERKCOUNT22 TYPE I,
       V_MATCOUNT22 TYPE I,


       FINALQTY1W TYPE P DECIMALS 2,
       FINALQTY1W1 TYPE P DECIMALS 2,


       M_COUNT TYPE I,
       M_COUNT1 TYPE I,

       WHCFINALQTY_OVR TYPE P DECIMALS 0,
       WHCFINALQTY_OVR1 TYPE P DECIMALS 0,

       MRPVAL1_LTR TYPE P DECIMALS 2,

       MRPVAL1_OVR TYPE P DECIMALS 0,
       MRPVAL1_OVR1 TYPE P DECIMALS 0,

    END OF GS_FINAL.

DATA:SA2 TYPE P DECIMALS 2.
DATA:SA3 TYPE P DECIMALS 2.
DATA:SA4 TYPE P DECIMALS 2.

DATA : GT_FINAL TYPE TABLE OF GS_FINAL,
       WA_FINAL TYPE GS_FINAL.

DATA : GT_FCAT TYPE SLIS_T_FIELDCAT_ALV,
       WA_FCAT TYPE SLIS_FIELDCAT_ALV.

DATA : LAYOUT TYPE SLIS_LAYOUT_ALV.

DATA : GT_SORT TYPE SLIS_T_SORTINFO_ALV,
       WA_SORT TYPE SLIS_SORTINFO_ALV.


DATA: IT_FIELDCAT  TYPE SLIS_T_FIELDCAT_ALV,
      WA_FIELDCAT  TYPE SLIS_FIELDCAT_ALV.

*
*DATA : GT_TEXT TYPE STANDARD TABLE OF SLIS_LAYOUT_ALV_SPEC,
*       WA_TEXT TYPE SLIS_LAYOUT_ALV_SPEC.

DATA : GT_TEXT TYPE SLIS_SUBTOT_TEXT OCCURS 1,
        WA_TEXT TYPE SLIS_SUBTOT_TEXT.

DATA: L_MATNR TYPE PBIM-MATNR,
      L_WERKS TYPE PBIM-WERKS,
      L_VERSB TYPE PBIM-VERSB,   "VERSION
      L_PBDNR TYPE PBIM-PBDNR,   "PLANE NO
      L_AENAM TYPE PBED-AENAM,   "USER
      L_LAEDA TYPE PBED-LAEDA,   "lAST cHNAGE
      L_MTART TYPE MARA-MTART.   "MATERIAL TYPE

DATA : TOT_QTY1 TYPE P DECIMALS 2.
DATA : TOT_QTY TYPE P DECIMALS 2.
DATA : REQ_CUM_QTY TYPE P DECIMALS 2.
DATA : UPTOWHC_QTY TYPE P DECIMALS 2. " P1_MRPQTY

DATA : P1_MRPQTY TYPE P DECIMALS 2.

DATA : P3_MRPQTY TYPE P DECIMALS 2.

DATA : P4_MRPQTY TYPE P DECIMALS 2.

DATA : P5_MRPQTY TYPE P DECIMALS 2.

DATA : UPWHC_QTY1 TYPE P DECIMALS 2.

DATA : TOWHC_QTY TYPE P DECIMALS 2.

DATA : TOUNIT_QTY TYPE P DECIMALS 2.

DATA : LTR_QTY TYPE P DECIMALS 2.

DATA: LV_WERKCOUNT TYPE SY-TABIX.
DATA: LV_MATCOUNT TYPE SY-TABIX.

DATA: LV_WERKCOUNT22 TYPE SY-TABIX.
DATA: LV_MATCOUNT22 TYPE SY-TABIX.

DATA: LV_MATCOUNT1 TYPE I VALUE 0.

DATA: LV_MATCOUNT3 TYPE I VALUE 0.
DATA: LV_WERKCOUNT3 TYPE I VALUE 0.
DATA: LV_LABSTCOUNT TYPE I VALUE 0.


DATA: LV_STKCUMCOUNT TYPE I VALUE 0.
DATA: LV_STKGHCOUNT TYPE I VALUE 0.
DATA: LV_STKMUCOUNT TYPE I VALUE 0.

DATA: LV_UT1COUNT TYPE I VALUE 0.
DATA: LV_UT3COUNT TYPE I VALUE 0.
DATA: LV_UT4COUNT TYPE I VALUE 0.
DATA: LV_UT5COUNT TYPE I VALUE 0.

DATA : LV_PCCOUNT1 TYPE I VALUE 0.  " UNIT- 5
DATA : LV_PCCOUNT3 TYPE I VALUE 0.  " UNIT- 5
DATA : LV_PCCOUNT4 TYPE I VALUE 0.  " UNIT- 5
DATA : LV_PCCOUNT5 TYPE I VALUE 0.  " UNIT- 5

DATA : UNIT1_QTY TYPE P DECIMALS 2.
DATA : UNIT1_VAL TYPE P DECIMALS 2.

DATA : UNIT3_QTY TYPE P DECIMALS 2.
DATA : UNIT3_VAL TYPE P DECIMALS 2.

DATA : UNIT4_QTY TYPE P DECIMALS 2.
DATA : UNIT4_VAL TYPE P DECIMALS 2.

DATA : UNIT5_QTY TYPE P DECIMALS 2.
DATA : UNIT5_VAL TYPE P DECIMALS 2.

DATA : TOT_QTY22 TYPE P DECIMALS 2.


DATA : LV_MATNR TYPE PBIM-MATNR,
       LV_WERKS TYPE PBIM-WERKS,
       LV_VERSB TYPE PBIM-VERSB,   "VERSION
       LV_PBDNR TYPE PBIM-PBDNR,   "PLANE NO
       LV_AENAM TYPE PBED-AENAM,   "USER
       LV_LAEDA TYPE PBED-LAEDA,   "lAST cHNAGE
       LV_MTART TYPE MARA-MTART.   "MATERIAL TYPE

SELECTION-SCREEN : BEGIN OF BLOCK B WITH FRAME TITLE TEXT-001.

SELECT-OPTIONS:     SO_MATNR FOR LV_MATNR,
                    SO_WERKS FOR LV_WERKS,
                    SO_VERSB FOR LV_VERSB,   "VERSION
                    SO_PBDNR FOR LV_PBDNR,   "PLANE NO
                    SO_AENAM FOR LV_AENAM,    "USER
                    SO_LAEDA FOR LV_LAEDA,    "LAST CHNAGE
                    SO_MTART FOR LV_MTART.   "MATERIAL TYPE

SELECTION-SCREEN:END OF BLOCK B.

AT SELECTION-SCREEN .

  IF SO_WERKS IS NOT INITIAL .
    SELECT SINGLE WERKS FROM T001W INTO L_WERKS WHERE WERKS IN SO_WERKS .
    IF SY-SUBRC <> 0.
      MESSAGE 'Enter Valid Plant' TYPE 'E'.
    ENDIF.
  ENDIF.

  IF SO_MTART IS NOT INITIAL .
    SELECT SINGLE MTART FROM MARA INTO L_MTART WHERE MTART  IN SO_MTART.
    IF SY-SUBRC NE 0.
      MESSAGE 'Enter Valid Material Type.' TYPE 'E' .
    ENDIF.
  ENDIF.

START-OF-SELECTION.

  PERFORM GET_DATA.
  PERFORM FIELDCATLOG.
*  PERFORM BUILD_LAYOUT.
*  PERFORM SET_CELL_COLOURS.
  PERFORM ALV_DISPLAY.

END-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_DATA.

  SELECT
          MATNR
          WERKS
          BEDAE
          VERSB
          PBDNR
          BDZEI
          VERVS
      FROM
      PBIM INTO TABLE GT_PBIM WHERE MATNR IN SO_MATNR AND WERKS IN SO_WERKS AND VERSB IN SO_VERSB AND PBDNR IN SO_PBDNR.



  SELECT
ZZWERKS
ZZNAME1
ZZMATNR
ZZMAKTX
ZZVOLUM
ZZMTART
ZZPBDNR
ZZENTRY
ZZREQ_DA
ZZPLNMG
ZZMEINS
ZZPLNMG_LTR
ZZUSER
ZZCUSTOM
ZZCUS_NAME
FROM ZSALES_PRO INTO TABLE GT_ZSALES_PRO WHERE ZZWERKS IN SO_WERKS AND ZZMATNR IN SO_MATNR .

  IF GT_PBIM IS NOT INITIAL.

    SELECT
          BDZEI
          PDATU
          AENAM
          LAEDA
          MEINS
          PLNMG
       FROM
         PBED INTO TABLE GT_PBED FOR ALL ENTRIES IN GT_PBIM WHERE BDZEI = GT_PBIM-BDZEI AND AENAM IN SO_AENAM AND LAEDA IN SO_LAEDA .
  ENDIF.

  IF GT_PBED[] IS NOT INITIAL.

    SELECT
      WERKS
      NAME1
      ORT01
      FROM
      T001W INTO TABLE GT_T001W FOR ALL ENTRIES IN GT_PBIM WHERE WERKS = GT_PBIM-WERKS AND WERKS IN SO_WERKS .

  ENDIF.

  " IF GT_T001W[] IS NOT INITIAL.
  SELECT
         MATNR
         MTART
         MATKL
         MEINS
         SPART
         VOLUM
   FROM MARA INTO TABLE GT_MARA FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND MTART IN SO_MTART.
  " ENDIF.

  IF GT_MARA[] IS NOT INITIAL.

    SELECT
           MATNR
           MAKTX
     FROM MAKT INTO TABLE GT_MAKT FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR.

  ENDIF.

  IF GT_PBIM IS NOT INITIAL.

    SELECT
            LABST
            INSME
            SPEME
            MATNR
            WERKS
            LGORT
         FROM MARD INTO TABLE GT_MARD FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS = GT_PBIM-WERKS AND WERKS IN  SO_WERKS ."AND LGORT = '0006' AND LGORT = '0007' AND LGORT = '0009' .
    "1100 PLANT

    SELECT
           LABST
            INSME
            SPEME
            MATNR
            WERKS
            LGORT
         FROM MARD INTO TABLE GT_MARD1 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1100' OR WERKS = '2100' .
    "1151 PLANT

    SELECT
            LABST
            INSME
            SPEME
            MATNR
            WERKS
            LGORT
         FROM MARD INTO TABLE GT_MARD2 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS = '1152'.
    "1126 PLANT

    SELECT
            LABST
            INSME
            SPEME
            MATNR
            WERKS
            LGORT
         FROM MARD INTO TABLE GT_MARD3 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1126'.
    "1176 PLANT

    SELECT
            LABST
            INSME
            SPEME
            MATNR
            WERKS
            LGORT
         FROM MARD INTO TABLE GT_MARD4 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1176'.
*  ENDIF.

*  IF GT_MARD IS NOT INITIAL.

    SELECT
          TRAME
          MATNR
          WERKS
      FROM MARC INTO TABLE GT_MARC FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS = GT_PBIM-WERKS AND WERKS IN  SO_WERKS .

*  ENDIF.
*
    "1100 PLANT

    SELECT
          TRAME
          MATNR
          WERKS
      FROM MARC INTO TABLE GT_MARC1 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1100' OR WERKS = '2100' .

    "1151 PLANT

    SELECT
             TRAME
             MATNR
             WERKS
         FROM MARC INTO TABLE GT_MARC2 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1151'.

    "1126 PLANT

    SELECT
              TRAME
              MATNR
              WERKS
          FROM MARC INTO TABLE GT_MARC3 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1126'.

*1176 PLANT

    SELECT
              TRAME
              MATNR
              WERKS
          FROM MARC INTO TABLE GT_MARC4 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1176'.

*  ENDIF.

*  IF GT_PBIM[] IS NOT INITIAL.

    SELECT
        MATNR
        WERKS
        SOBSL
     FROM
      MARC INTO TABLE GT_MARCSP FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS = '1100'.

*  ENDIF.
    " Unit 1
*
*
*    SELECT
*        MATNR
*        WERKS
*        SOBSL
*     FROM
*      MARC INTO TABLE GT_MARCSP1 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS = '1001'.
*

    SELECT
              LABST
              INSME
              SPEME
              MATNR
              WERKS
              LGORT
    FROM MARD INTO TABLE GT_UNIT1 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1001'.

    SELECT
           TRAME
           MATNR
           WERKS
    FROM MARC INTO TABLE GT_UNIT1TRN FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1001'.

    SELECT
         MATNR
         BWKEY
         VPRSV
         VERPR
         STPRS FROM MBEW INTO TABLE GT_MBEW1 FOR ALL ENTRIES IN GT_PBIM
        WHERE MATNR = GT_PBIM-MATNR AND BWKEY = '1001' AND ( VPRSV = 'S' OR VPRSV = 'V' ).

    " Unit 3
*
*    SELECT
*        MATNR
*        WERKS
*        SOBSL
*     FROM
*      MARC INTO TABLE GT_MARCSP3 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS = '1003'.
*
    SELECT
              LABST
              INSME
              SPEME
              MATNR
              WERKS
              LGORT
         FROM MARD INTO TABLE GT_UNIT3 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1003'.

    SELECT
           TRAME
           MATNR
           WERKS
          FROM MARC INTO TABLE GT_UNIT3TRN FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1003'.

    SELECT
         MATNR
         BWKEY
         VPRSV
         VERPR
         STPRS FROM MBEW INTO TABLE GT_MBEW3 FOR ALL ENTRIES IN GT_PBIM
        WHERE MATNR = GT_PBIM-MATNR AND BWKEY = '1003' AND ( VPRSV = 'S' OR VPRSV = 'V' ).

    "Unit 4

*    SELECT
*        MATNR
*        WERKS
*        SOBSL
*     FROM
*      MARC INTO TABLE GT_MARCSP4 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS = '1004'.
*
*
    SELECT
              LABST
              INSME
              SPEME
              MATNR
              WERKS
              LGORT
    FROM MARD INTO TABLE GT_UNIT4 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1004'.

    SELECT
           TRAME
           MATNR
           WERKS
    FROM MARC INTO TABLE GT_UNIT4TRN FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1004'.



    SELECT
         MATNR
         BWKEY
         VPRSV
         VERPR
         STPRS FROM MBEW INTO TABLE GT_MBEW4 FOR ALL ENTRIES IN GT_PBIM
        WHERE MATNR = GT_PBIM-MATNR AND BWKEY = '1004' AND ( VPRSV = 'S' OR VPRSV = 'V' ).

*    SELECT
*        MATNR
*        WERKS
*        SOBSL
*     FROM
*      MARC INTO TABLE GT_MARCSP5 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS = '1005'.
*

    SELECT
              LABST
              INSME
              SPEME
              MATNR
              WERKS
              LGORT
    FROM MARD INTO TABLE GT_UNIT5 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1005'.

    SELECT
           TRAME
           MATNR
           WERKS
    FROM MARC INTO TABLE GT_UNIT5TRN FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1005'.

    SELECT
         MATNR
         BWKEY
         VPRSV
         VERPR
         STPRS FROM MBEW INTO TABLE GT_MBEW FOR ALL ENTRIES IN GT_PBIM
        WHERE MATNR = GT_PBIM-MATNR AND BWKEY = '1005' AND ( VPRSV = 'S' OR VPRSV = 'V' ).

     SELECT
              LABST
              INSME
              SPEME
              MATNR
              WERKS
              LGORT
    FROM MARD INTO TABLE GT_UNIT8 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS  = '1008'.

    SELECT
           TRAME
           MATNR
           WERKS
    FROM MARC INTO TABLE GT_UNIT8TRN FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND WERKS ='1008'.

    SELECT
         MATNR
         BWKEY
         VPRSV
         VERPR
         STPRS FROM MBEW INTO TABLE GT_MBEW8 FOR ALL ENTRIES IN GT_PBIM
        WHERE MATNR = GT_PBIM-MATNR AND BWKEY = '1008' AND ( VPRSV = 'S' OR VPRSV = 'V' ).

  ENDIF.

  " IF GT_PBIM[] IS NOT INITIAL.

  SELECT
       MATNR
       VKORG
       VTWEG
       MVGR1
   FROM
    MVKE INTO TABLE GT_MVKE FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR.

  " ENDIF.

  "    IF GT_MVKE[] IS NOT INITIAL.

  SELECT
   MVGR1
   BEZEI
  FROM
    TVM1T INTO TABLE GT_TVM1T FOR ALL ENTRIES IN GT_MVKE WHERE MVGR1 = GT_MVKE-MVGR1.
  "  ENDIF.

  IF GT_PBIM[] IS NOT INITIAL.

    SELECT
        PLNUM
        MATNR
        PLWRK
        PWWRK
        GSMNG
        PSTTR
        PEDTR
        UMSKZ
      FROM PLAF INTO TABLE GT_PLAF FOR ALL ENTRIES IN GT_PBIM WHERE MATNR = GT_PBIM-MATNR AND UMSKZ = 'X'.

  ENDIF.

  IF GT_PBIM[] IS NOT INITIAL.

    SELECT
               LABST
               INSME
               SPEME
               MATNR
               WERKS
               LGORT
            FROM MARD INTO TABLE GT_MARD5 FOR ALL ENTRIES IN GT_PBIM WHERE MATNR  = GT_PBIM-MATNR AND WERKS NE GT_PBIM-WERKS AND LABST <> 0 ."

  ENDIF.

  IF GT_MARD5[] IS NOT INITIAL.

    SELECT
      WERKS
      NAME1
      ORT01
      FROM
      T001W INTO TABLE GT_T001W1 FOR ALL ENTRIES IN GT_MARD5 WHERE WERKS = GT_MARD5-WERKS." AND WERKS IN SO_WERKS .

    SELECT
           MATNR
           MAKTX
     FROM MAKT INTO TABLE GT_MAKT1 FOR ALL ENTRIES IN GT_MARD5 WHERE MATNR = GT_MARD5-MATNR.

    SELECT
     MATNR
     MTART
     MATKL
     MEINS
     SPART
     VOLUM
FROM MARA INTO TABLE GT_MARA1 FOR ALL ENTRIES IN GT_MARD5 WHERE MATNR = GT_MARD5-MATNR .

    SELECT
         MATNR
         VKORG
         VTWEG
         MVGR1
     FROM
      MVKE INTO TABLE GT_MVKE1 FOR ALL ENTRIES IN GT_MARD5 WHERE MATNR = GT_MARD5-MATNR.

    SELECT
         MATNR
         WERKS
         SOBSL
      FROM
       MARC INTO TABLE GT_MARCSP6 FOR ALL ENTRIES IN GT_MARD5 WHERE MATNR = GT_MARD5-MATNR AND ( WERKS = '1100' OR WERKS = '2100') .

  ENDIF.

  "     IF GT_MVKE1[] IS NOT INITIAL.

  SELECT
   MVGR1
   BEZEI
  FROM
    TVM1T INTO TABLE GT_TVM1T1 FOR ALL ENTRIES IN GT_MVKE1 WHERE MVGR1 = GT_MVKE1-MVGR1.
  "   ENDIF.

  LOOP AT GT_PBED INTO WA_PBED .
    WA_FINAL-PDATU = WA_PBED-PDATU.
    WA_FINAL-AENAM = WA_PBED-AENAM.
    WA_FINAL-LAEDA = WA_PBED-LAEDA.
    WA_FINAL-MEINS = WA_PBED-MEINS.
    WA_FINAL-PLNMG = WA_PBED-PLNMG.
    WA_FINAL-BDZEI = WA_PBED-BDZEI.

    READ TABLE GT_PBIM INTO WA_PBIM WITH KEY BDZEI = WA_PBED-BDZEI.

    IF SY-SUBRC = 0.

      WA_FINAL-MATNR = WA_PBIM-MATNR.
      WA_FINAL-MATNR1 = WA_PBIM-MATNR.
      WA_FINAL-MATNR3 = WA_PBIM-MATNR.

      WA_FINAL-WERKS = WA_PBIM-WERKS.
      "   WA_FINAL-WERKS3 = WA_PBIM-WERKS.

      WA_FINAL-BEDAE = WA_PBIM-BEDAE.
      WA_FINAL-VERVS = WA_PBIM-VERVS.
      WA_FINAL-VERSB = WA_PBIM-VERSB.
      WA_FINAL-PBDNR = WA_PBIM-PBDNR.

    ENDIF.

    READ TABLE GT_T001W INTO WA_T001W WITH KEY  WERKS = WA_PBIM-WERKS.
    IF SY-SUBRC = 0.
*      WA_FINAL-NAME1 = WA_T001W-NAME1. " Commedned By Govind
      WA_FINAL-NAME1 = WA_T001W-ORT01.
      TRANSLATE WA_FINAL-NAME1  TO UPPER CASE. " Added By Govind On 27-11-2014
    ENDIF.
    READ TABLE GT_MARA INTO WA_MARA WITH KEY MATNR = WA_PBIM-MATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MTART = WA_MARA-MTART.
      WA_FINAL-VOLUM = WA_MARA-VOLUM.
    ENDIF.
    READ TABLE GT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_PBIM-MATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MAKTX = WA_MAKT-MAKTX.
    ENDIF.

    LOOP AT GT_MARD INTO WA_MARD WHERE MATNR  = WA_PBIM-MATNR AND WERKS = WA_PBIM-WERKS.
      WA_FINAL-LABST = WA_FINAL-LABST  + WA_MARD-LABST + WA_MARD-INSME.
      WA_FINAL-LABST3 = WA_FINAL-LABST3  + WA_MARD-LABST + WA_MARD-INSME.
    ENDLOOP.

    READ TABLE GT_MARC INTO WA_MARC WITH KEY MATNR = WA_PBIM-MATNR WERKS = WA_PBIM-WERKS.
    WA_FINAL-TRAME = WA_MARC-TRAME.
*
*
*    READ TABLE GT_S0941 INTO WA_S0941 WITH KEY MATNR = WA_FINAL-MATNR1  WERKS = '1001' .
*    IF SY-SUBRC = 0.
*      WA_FINAL-UNIT1MATNR = WA_S0941-MATNR.
*     ENDIF.
*
*    READ TABLE GT_S0943 INTO WA_S0943 WITH KEY MATNR = WA_FINAL-MATNR1  WERKS = '1003' .
*     IF SY-SUBRC = 0.
*      WA_FINAL-UNIT3MATNR = WA_S0943-MATNR.
*     ENDIF.
*
*   READ TABLE GT_S0944 INTO WA_S0944 WITH KEY MATNR = WA_FINAL-MATNR1  WERKS = '1004' .
*     IF SY-SUBRC = 0.
*      WA_FINAL-UNIT4MATNR = WA_S0944-MATNR.
*     ENDIF.
*
*   READ TABLE GT_S0945 INTO WA_S0945 WITH KEY MATNR = WA_FINAL-MATNR1  WERKS = '1005' .
*     IF SY-SUBRC = 0.
*      WA_FINAL-UNIT5MATNR = WA_S0945-MATNR.
*     ENDIF.

    READ TABLE GT_MVKE INTO WA_MVKE WITH KEY MATNR = WA_PBIM-MATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MVGR1 = WA_MVKE-MVGR1.
    ENDIF.

    READ TABLE GT_TVM1T INTO WA_TVM1T WITH KEY MVGR1 = WA_MVKE-MVGR1.
    IF SY-SUBRC = 0.
      WA_FINAL-BEZEI = WA_TVM1T-BEZEI.
    ENDIF.

    APPEND WA_FINAL TO GT_FINAL.
    CLEAR WA_FINAL.

    DELETE GT_FINAL WHERE PLNMG EQ 0.
  ENDLOOP.

  LOOP AT GT_ZSALES_PRO INTO WA_ZSALES_PRO .

    WA_FINAL-ZZWERKS  = WA_ZSALES_PRO-ZZWERKS .
    WA_FINAL-ZZNAME1 = WA_ZSALES_PRO-ZZNAME1 .
    WA_FINAL-ZZMATNR = WA_ZSALES_PRO-ZZMATNR .
    WA_FINAL-ZZMAKTX  = WA_ZSALES_PRO-ZZMAKTX .
    WA_FINAL-ZZVOLUM  = WA_ZSALES_PRO-ZZVOLUM .
    WA_FINAL-ZZMTART  = WA_ZSALES_PRO-ZZMTART .
    WA_FINAL-ZZPBDNR   = WA_ZSALES_PRO-ZZPBDNR  .
    WA_FINAL-ZZENTRY  = WA_ZSALES_PRO-ZZENTRY  .
    WA_FINAL-ZZREQ_DA = WA_ZSALES_PRO-ZZREQ_DA .
    WA_FINAL-ZZPLNMG   = WA_ZSALES_PRO-ZZPLNMG  .
    WA_FINAL-ZZMEINS   = WA_ZSALES_PRO-ZZMEINS  .
    WA_FINAL-ZZPLNMG_LTR   = WA_ZSALES_PRO-ZZPLNMG_LTR  .
    WA_FINAL-ZZUSER    = WA_ZSALES_PRO-ZZUSER   .
    WA_FINAL-ZZCUSTOM    = WA_ZSALES_PRO-ZZCUSTOM   .
    WA_FINAL-ZZCUS_NAME = WA_ZSALES_PRO-ZZCUS_NAME .

    READ TABLE GT_MVKE INTO WA_MVKE WITH KEY MATNR = WA_FINAL-ZZMATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MVGR1 = WA_MVKE-MVGR1.
    ENDIF.

    READ TABLE GT_TVM1T INTO WA_TVM1T WITH KEY MVGR1 = WA_MVKE-ZZMVGR1.
    IF SY-SUBRC = 0.
      WA_FINAL-BEZEI = WA_TVM1T-BEZEI.
    ENDIF.

    APPEND WA_FINAL TO GT_FINAL .
    CLEAR WA_FINAL.

  ENDLOOP .

  IF SO_MTART IS NOT INITIAL.
    DELETE GT_FINAL WHERE MTART EQ ' '.
  ENDIF.

  LOOP AT GT_FINAL INTO WA_FINAL .
    IF WA_FINAL-ZZNAME1 IS NOT INITIAL .
      WA_FINAL-RES = 'SALES PRO' .
      WA_FINAL-WERKS = WA_FINAL-ZZWERKS.
      WA_FINAL-NAME1 = WA_FINAL-ZZNAME1.
      WA_FINAL-MATNR = WA_FINAL-ZZMATNR .
      WA_FINAL-MAKTX = WA_FINAL-ZZMAKTX.
      WA_FINAL-PLNMG = WA_FINAL-ZZPLNMG .
      WA_FINAL-PBDNR = WA_FINAL-ZZPBDNR .
      WA_FINAL-MEINS = WA_FINAL-ZZMEINS.
      WA_FINAL-TOTALAMT1 = WA_FINAL-ZZPLNMG_LTR .
      WA_FINAL-AENAM = WA_FINAL-ZZUSER .
      WA_FINAL-MTART = WA_FINAL-ZZMTART .
      WA_FINAL-VOLUM = WA_FINAL-ZZVOLUM .
      WA_FINAL-LAEDA  =  WA_FINAL-ZZENTRY .
      WA_FINAL-PDATU   = WA_FINAL-ZZREQ_DA .
      WA_FINAL-BEZEI = WA_FINAL-BEZEI .
      " WA_FINAL-ZZCUSTOM
    ENDIF .
    IF WA_FINAL-ZZNAME1 IS INITIAL .
      WA_FINAL-RES = 'SAP' .
      WA_FINAL-WERKS = WA_FINAL-WERKS .
      WA_FINAL-NAME1 = WA_FINAL-NAME1.
      WA_FINAL-MATNR = WA_FINAL-MATNR .
      WA_FINAL-MAKTX = WA_FINAL-MAKTX .
      WA_FINAL-PLNMG = WA_FINAL-PLNMG .
      WA_FINAL-PBDNR = WA_FINAL-PBDNR .
      WA_FINAL-MEINS = WA_FINAL-MEINS.
      WA_FINAL-TOTALAMT1 = WA_FINAL-TOTALAMT1 .
      WA_FINAL-AENAM  = WA_FINAL-AENAM .
      WA_FINAL-MTART = WA_FINAL-MTART .
      WA_FINAL-VOLUM = WA_FINAL-VOLUM .
      WA_FINAL-LAEDA = WA_FINAL-LAEDA .
      WA_FINAL-PDATU  = WA_FINAL-PDATU  .
    ENDIF.
*      BREAK-POINT.
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING RES WERKS NAME1 MATNR MAKTX PLNMG PBDNR MEINS TOTALAMT1 AENAM MTART VOLUM LAEDA PDATU.
    " MOVE-CORRESPONDING WA_FINAL TO WA_FINAL.
    " APPEND WA_FINAL1 TO GT_FINAL1 ."WHERE RES = 'SAP'.

    CLEAR WA_FINAL.
  ENDLOOP.

  DELETE GT_FINAL WHERE PLNMG EQ ' ' .

  SELECT
     MATNR
     VKORG
     VTWEG
     MVGR1
 FROM
  MVKE INTO TABLE GT_MVKE9 FOR ALL ENTRIES IN GT_FINAL WHERE MATNR = GT_FINAL-MATNR.

  " ENDIF.

  "    IF GT_MVKE[] IS NOT INITIAL.

  SELECT
   MVGR1
   BEZEI
  FROM
    TVM1T INTO TABLE GT_TVM1T9 FOR ALL ENTRIES IN GT_MVKE9 WHERE MVGR1 = GT_MVKE9-MVGR1.

  LOOP AT GT_FINAL INTO WA_FINAL .

    LOOP AT GT_MVKE9 INTO WA_MVKE9 WHERE MATNR = WA_FINAL-MATNR.
      IF SY-SUBRC = 0.
        WA_FINAL-MVGR1 = WA_MVKE9-MVGR1.
      ENDIF.

      LOOP AT GT_TVM1T9 INTO WA_TVM1T9 WHERE MVGR1 = WA_MVKE9-MVGR1.
        IF SY-SUBRC = 0.
          WA_FINAL-BEZEI = WA_TVM1T9-BEZEI.
        ENDIF.
      ENDLOOP .
    ENDLOOP .

    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MVGR1 BEZEI .
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    LOOP AT GT_MARD1 INTO WA_MARD1 WHERE MATNR = WA_FINAL-MATNR1 AND ( WERKS = '1100' OR WERKS = '2100').
      IF SY-SUBRC = 0.
        WA_FINAL-LABST1 =  WA_FINAL-LABST1 + WA_MARD1-LABST + WA_MARD1-INSME.
      ENDIF.
    ENDLOOP.

    LOOP AT GT_MARC1 INTO WA_MARC1 WHERE MATNR = WA_FINAL-MATNR1 AND ( WERKS = '1100' OR WERKS = '2100') .
    IF SY-SUBRC = 0.
      WA_FINAL-TRAME1 =  WA_FINAL-TRAME1 + WA_MARC1-TRAME.
    ENDIF.
    ENDLOOP.

    LOOP AT GT_MARD2 INTO WA_MARD2 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1152'.
      IF SY-SUBRC = 0.
        WA_FINAL-CUMATNR = WA_MARD2-MATNR.
        WA_FINAL-STKCUW = WA_FINAL-STKCUW + WA_MARD2-LABST + WA_MARD2-INSME.
      ENDIF.
    ENDLOOP.

     LOOP AT GT_MARC2 INTO WA_MARC2 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1152' .
    IF SY-SUBRC = 0.
      WA_FINAL-CUMATNR = WA_MARC2-MATNR.
      WA_FINAL-STKTRNCUW = WA_MARC2-TRAME.
    ENDIF.
    ENDLOOP.

LOOP AT GT_MARD3 INTO WA_MARD3 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS ='1126' .
  IF SY-SUBRC = 0.
  ENDIF.
ENDLOOP.

  LOOP AT GT_MARD3 INTO WA_MARD3 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1126'.
      IF SY-SUBRC = 0.
        WA_FINAL-GHMATNR = WA_MARD3-MATNR.
        WA_FINAL-STKGHW = WA_FINAL-STKGHW  + WA_MARD3-LABST + WA_MARD3-INSME.
      ENDIF.
    ENDLOOP.

   LOOP AT GT_MARC3 INTO WA_MARC3 WHERE MATNR = WA_FINAL-MATNR1  AND WERKS = '1126'.
    IF SY-SUBRC = 0.
      WA_FINAL-GHMATNR = WA_MARC3-MATNR.
      WA_FINAL-STKTRNGHW = WA_MARC3-TRAME.
    ENDIF.
 ENDLOOP.

      LOOP AT GT_MARD4 INTO WA_MARD4 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1176' .
      IF SY-SUBRC = 0.
        WA_FINAL-MUMATNR = WA_MARD4-MATNR.
        WA_FINAL-STKMUW = WA_FINAL-STKMUW + WA_MARD4-LABST + WA_MARD4-INSME.

      ENDIF.
    ENDLOOP.

  LOOP AT GT_MARC4 INTO WA_MARC4 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1176' .
    IF SY-SUBRC = 0.
      WA_FINAL-MUMATNR = WA_MARC4-MATNR.
      WA_FINAL-STKTRNMUW = WA_MARC4-TRAME.
    ENDIF.
 ENDLOOP.

*
*    LOOP AT GT_UNIT1 INTO WA_UNIT1 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1001' .
*      WA_FINAL-UNIT1 =  WA_FINAL-UNIT1 + WA_UNIT1-LABST.
*    ENDLOOP.
*
*    READ TABLE GT_UNIT1TRN INTO WA_UNIT1TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1001' .
*    IF SY-SUBRC = 0.
*      WA_FINAL-UNIT1TR = WA_UNIT1TRN-TRAME.
*    ENDIF.
*
*    LOOP AT GT_UNIT3 INTO WA_UNIT3 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1003' .
*      WA_FINAL-UNIT3 = WA_FINAL-UNIT3 + WA_UNIT3-LABST.
*    ENDLOOP.
*
*    READ TABLE GT_UNIT3TRN INTO WA_UNIT3TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1003' .
*    IF SY-SUBRC = 0.
*      WA_FINAL-UNIT3TR = WA_UNIT3TRN-TRAME.
*    ENDIF.
*    LOOP AT GT_UNIT4 INTO WA_UNIT4 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1004' .
*
*      WA_FINAL-UNIT4 = WA_FINAL-UNIT4 + WA_UNIT4-LABST.
*
*    ENDLOOP.
*
*    READ TABLE GT_UNIT4TRN INTO WA_UNIT4TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1004'.
*    IF SY-SUBRC = 0.
*      WA_FINAL-UNIT4TR = WA_UNIT4TRN-TRAME.
*    ENDIF.
*
*    LOOP AT  GT_UNIT5 INTO WA_UNIT5 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1005' .
*
*      WA_FINAL-UNIT5 = WA_FINAL-UNIT5 + WA_UNIT5-LABST.
*
*    ENDLOOP.
*
*    READ TABLE GT_UNIT5TRN INTO WA_UNIT5TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1005' .
*
*    IF SY-SUBRC = 0.
*      WA_FINAL-UNIT5TR = WA_UNIT5TRN-TRAME.
*    ENDIF.

    TOT_QTY = WA_FINAL-INSME + WA_FINAL-SPEME + WA_FINAL-TRAME.
    MOVE  TOT_QTY TO WA_FINAL-TOTQTY.
    TOT_QTY1  =  WA_FINAL-PLNMG - ( WA_FINAL-LABST + WA_FINAL-TRAME ).
    MOVE  TOT_QTY1 TO WA_FINAL-FINALQTY.

    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING LABST1 TRAME1 CUMATNR STKCUW STKTRNCUW GHMATNR STKGHW STKTRNGHW MUMATNR STKMUW STKTRNMUW  UNIT5TR TOTQTY FINALQTY ."UNIT1 UNIT1TR UNIT3 UNIT3TR UNIT4 UNIT4TR "UNIT1 UNIT1TR UNIT3 UNIT3TR UNIT4 UNIT4TR UNIT5

    CLEAR WA_FINAL.
  ENDLOOP.

**********************************REMOVE DUPLICATE Stock***Starting**************************

  SORT GT_FINAL BY WERKS MATNR.

  LOOP AT GT_FINAL INTO WA_FINAL .
    LV_WERKCOUNT = LV_WERKCOUNT  + 1.
    LV_MATCOUNT = LV_MATCOUNT  + 1.
    AT NEW WERKS .
      WA_FINAL-V_WERKCOUNT = LV_WERKCOUNT.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_WERKCOUNT.
    ENDAT.
    AT NEW MATNR .
      WA_FINAL-V_MATCOUNT = LV_MATCOUNT.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOUNT.
    ENDAT.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    IF WA_FINAL-V_MATCOUNT = 0 AND WA_FINAL-V_WERKCOUNT = 0.
      WA_FINAL-LABST = ' '.
      WA_FINAL-TRAME = ' '.

      TOT_QTY1  =  WA_FINAL-PLNMG - ( WA_FINAL-LABST + WA_FINAL-TRAME ).
      MOVE  TOT_QTY1 TO WA_FINAL-FINALQTY.

      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING LABST TRAME FINALQTY .
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    TOT_QTY1  =  WA_FINAL-FINALQTY.
    TOT_QTY22 = TOT_QTY22 + TOT_QTY1 .
    MOVE  TOT_QTY1 TO WA_FINAL-FINALQTY1.
    MOVE TOT_QTY22 TO WA_FINAL-FINALQTY22.
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY1 FINALQTY22 .
    CLEAR WA_FINAL.
  ENDLOOP.

*LOOP AT GT_FINAL INTO WA_FINAL.
*  WA_FINAL-FINALQTY33 = WA_FINAL-FINALQTY33 + WA_FINAL-FINALQTY22 .
*  MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY33 .
*   CLEAR WA_FINAL.
*ENDLOOP.
**********************************REMOVE DUPLICATE*******************************

  SORT GT_FINAL BY MATNR1.

  LOOP AT GT_FINAL INTO WA_FINAL .
    LV_MATCOUNT1 = LV_MATCOUNT1  + 1.
    AT NEW MATNR1 .
      WA_FINAL-V_MATCOUNT1 = LV_MATCOUNT1.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOUNT1.
    ENDAT.
    CLEAR WA_FINAL.
  ENDLOOP.
  LOOP AT GT_FINAL INTO WA_FINAL.
    IF WA_FINAL-V_MATCOUNT1 = 0.
      WA_FINAL-MATNR1 = ' '.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MATNR1.
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF WA_FINAL-V_MATCOUNT1 = 0 .
      WA_FINAL-LABST1 = ' '.
      WA_FINAL-TRAME1 = ' '.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING LABST1 TRAME1.
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    IF SY-SUBRC = 0.

      IF WA_FINAL-WERKS NE 1151 AND WA_FINAL-WERKS NE 1152 AND WA_FINAL-WERKS NE 1153 AND WA_FINAL-WERKS NE 1154 AND WA_FINAL-WERKS NE 1155 AND
        WA_FINAL-WERKS NE 1156 AND WA_FINAL-WERKS NE 1157 AND WA_FINAL-WERKS NE 1158 AND

        WA_FINAL-WERKS NE 2151 AND WA_FINAL-WERKS NE 2152 AND WA_FINAL-WERKS NE 2153 AND WA_FINAL-WERKS NE 2154 AND WA_FINAL-WERKS NE 2155 AND
        WA_FINAL-WERKS NE 2156 AND WA_FINAL-WERKS NE 2157 AND WA_FINAL-WERKS NE 2158 AND

        WA_FINAL-WERKS NE 4151 AND WA_FINAL-WERKS NE 4152 AND WA_FINAL-WERKS NE 4153 AND WA_FINAL-WERKS NE 4154 AND WA_FINAL-WERKS NE 4155 AND
        WA_FINAL-WERKS NE 4156 AND WA_FINAL-WERKS NE 4157 AND WA_FINAL-WERKS NE 4158   .

     "   WA_FINAL-STKCUW = ' '.
      "  WA_FINAL-STKTRNCUW = ' '.
       " WA_FINAL-CUMATNR  = ' '.
        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STKCUW STKTRNCUW CUMATNR .

      ENDIF.
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF SY-SUBRC = 0.
      IF WA_FINAL-WERKS NE 1126  AND WA_FINAL-WERKS NE 1127 AND WA_FINAL-WERKS NE 1128 AND WA_FINAL-WERKS NE 1129 AND WA_FINAL-WERKS NE 1130 AND WA_FINAL-WERKS NE 1131 AND
        WA_FINAL-WERKS NE 1132 AND WA_FINAL-WERKS NE 1133 AND WA_FINAL-WERKS NE 1134 AND

        WA_FINAL-WERKS NE 2126  AND WA_FINAL-WERKS NE 2127 AND WA_FINAL-WERKS NE 2128 AND WA_FINAL-WERKS NE 2129 AND WA_FINAL-WERKS NE 2130 AND WA_FINAL-WERKS NE 2131 AND
        WA_FINAL-WERKS NE 2132 AND WA_FINAL-WERKS NE 2133 AND WA_FINAL-WERKS NE 2134 AND

        WA_FINAL-WERKS NE 4126  AND WA_FINAL-WERKS NE 4127 AND WA_FINAL-WERKS NE 4128 AND WA_FINAL-WERKS NE 4129 AND WA_FINAL-WERKS NE 4130 AND WA_FINAL-WERKS NE 4131 AND
        WA_FINAL-WERKS NE 4132 AND WA_FINAL-WERKS NE 4133 AND WA_FINAL-WERKS NE 4134 .

     "   WA_FINAL-STKGHW = ' '.
      "  WA_FINAL-STKTRNGHW = ' '.
       " WA_FINAL-GHMATNR = ' '.
        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STKGHW STKTRNGHW GHMATNR.
      ENDIF.
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF SY-SUBRC = 0.
      IF WA_FINAL-WERKS NE 1176 AND WA_FINAL-WERKS NE 1177 AND WA_FINAL-WERKS NE 1178 AND WA_FINAL-WERKS NE 1179 AND

        WA_FINAL-WERKS NE 2176 AND WA_FINAL-WERKS NE 2177 AND WA_FINAL-WERKS NE 2178 AND WA_FINAL-WERKS NE 2179 AND

        WA_FINAL-WERKS NE 4176 AND WA_FINAL-WERKS NE 4177 AND WA_FINAL-WERKS NE 4178 AND WA_FINAL-WERKS NE 4179 .

      "  WA_FINAL-STKMUW = ' '.
       " WA_FINAL-STKTRNMUW = ' '.
       " WA_FINAL-MUMATNR  = ' '.
        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STKMUW STKTRNMUW MUMATNR.
      ENDIF.
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

*********************************1151****Starting**************

  LOOP AT GT_FINAL INTO WA_FINAL .
    IF WA_FINAL-CUMATNR IS NOT INITIAL.
      LV_STKCUMCOUNT = LV_STKCUMCOUNT  + 1.
*       AT END OF STKCUW.
      ON CHANGE OF WA_FINAL-CUMATNR.
        WA_FINAL-V_STKCUMCOUNT = LV_STKCUMCOUNT.
        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_STKCUMCOUNT.
        CLEAR WA_FINAL.
*      ENDAT.
      ENDON.
    ENDIF.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF WA_FINAL-V_STKCUMCOUNT = 0 .
      WA_FINAL-STKCUW = ' '.
      WA_FINAL-STKTRNCUW = ' '.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STKCUW STKTRNCUW.
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

*******************************************End 1151********************************

*******************************Start**1126******************

  LOOP AT GT_FINAL INTO WA_FINAL .
    IF WA_FINAL-GHMATNR IS NOT INITIAL.
      LV_STKGHCOUNT = LV_STKGHCOUNT  + 1.
*       AT END OF STKCUW.
      ON CHANGE OF WA_FINAL-GHMATNR.
        WA_FINAL-V_STKGHCOUNT = LV_STKGHCOUNT.
        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_STKGHCOUNT.
        CLEAR WA_FINAL.
*      ENDAT.
      ENDON.
    ENDIF.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF WA_FINAL-V_STKGHCOUNT = 0 .

      WA_FINAL-STKGHW = ' '.
      WA_FINAL-STKTRNGHW = ' '.

      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STKGHW STKTRNGHW  .
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

*******************************************End 1126********************************

******************************Starting***1176******************
  LOOP AT GT_FINAL INTO WA_FINAL .
    IF WA_FINAL-MUMATNR IS NOT INITIAL.
      LV_STKMUCOUNT = LV_STKMUCOUNT  + 1.
      ON CHANGE OF WA_FINAL-MUMATNR.
        WA_FINAL-V_STKMUCOUNT = LV_STKMUCOUNT.
        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_STKMUCOUNT.
        CLEAR WA_FINAL.
      ENDON.
    ENDIF.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF WA_FINAL-V_STKMUCOUNT = 0 .

      WA_FINAL-STKMUW = ' '.
      WA_FINAL-STKTRNMUW = ' '.

      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STKMUW STKTRNMUW  .
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

*******************************************End 1176********************************

  LOOP AT GT_FINAL INTO WA_FINAL.

    UPWHC_QTY1  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW ).
    MOVE  UPWHC_QTY1 TO WA_FINAL-UPTOWHCSTK.
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UPTOWHCSTK.
    CLEAR WA_FINAL.
  ENDLOOP.

***********************************************************End of All WHC Calucations*****************************

  LOOP AT GT_FINAL INTO WA_FINAL.
    UPTOWHC_QTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW ).
    MOVE  UPTOWHC_QTY TO WA_FINAL-WHCFINALQTY.
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING WHCFINALQTY.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    LTR_QTY = WA_FINAL-PLNMG * WA_FINAL-VOLUM.
    MOVE  LTR_QTY TO WA_FINAL-TOTALAMT1.

    TOWHC_QTY  =  WA_FINAL-WHCFINALQTY * WA_FINAL-VOLUM .
    MOVE  TOWHC_QTY TO WA_FINAL-TOTALAMT  .

    TOUNIT_QTY  =  WA_FINAL-MRPVAL1 * WA_FINAL-VOLUM .
    MOVE  TOUNIT_QTY TO WA_FINAL-MRPVAL1_LTR  .

    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING TOTALAMT1 TOTALAMT .
    CLEAR WA_FINAL.

  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    IF WA_FINAL-TOTALAMT IS NOT INITIAL.
      IF WA_FINAL-TOTALAMT  >= 0.
        WA_FINAL-STAT = 'Order Qty'.
      ELSEIF WA_FINAL-TOTALAMT < 0.
*        WA_FINAL-STAT = 'Negative Qty'.
        WA_FINAL-STAT = ' '.
      ENDIF.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING STAT.
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
*
*    IF SY-SUBRC = 0.
*      READ TABLE GT_S094 INTO WA_S094 WITH KEY MATNR = WA_FINAL-MATNR1 .
*      IF SY-SUBRC = 0 .
*        WA_FINAL-SPMON = WA_S094-SPMON.
*      ENDIF.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING SPMON .
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
    IF SY-SUBRC = 0.
      READ TABLE GT_MARCSP INTO WA_MARCSP WITH KEY MATNR = WA_FINAL-MATNR.
      IF SY-SUBRC = 0.
        WA_FINAL-SOBSL = WA_MARCSP-SOBSL.
      ENDIF.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING SOBSL.
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

*
*****************************************Unit1 End*************************************************************
*
*
*****************************************Unit3 Starting*************************************************************
*
**BREAK-POINT.
**
**
**  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
**    IF SY-SUBRC = 0.
**      READ TABLE GT_S0943 INTO WA_S0943 WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1003' .
**      IF SY-SUBRC = 0 .
**        WA_FINAL-MNG02 = WA_S0943-MNG02.
**      ENDIF.
**      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MNG02.
**      CLEAR WA_FINAL.
**    ENDIF.
**  ENDLOOP.
*
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT' AND SOBSL = 'P3'.
*    IF SY-SUBRC = 0.
*      P3_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW +  WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW ).
*      MOVE  P3_MRPQTY TO WA_FINAL-MNG02.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MNG02.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF SY-SUBRC = 0 AND WA_FINAL-MNG02 NE 0.
*      UNIT3_QTY  = WA_FINAL-MNG02 -  ( WA_FINAL-UNIT3 + WA_FINAL-UNIT3TR ).
*      MOVE  UNIT3_QTY TO WA_FINAL-MRPVAL3.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL3.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
*    READ TABLE GT_MBEW3 INTO WA_MBEW3 WITH KEY MATNR = WA_FINAL-MATNR BWKEY = '1003' .
*    IF SY-SUBRC = 0 AND WA_FINAL-MNG02 NE 0.
*      WA_FINAL-VPRSV3 = WA_MBEW3-VPRSV.
*      IF WA_MBEW3-VPRSV = 'S'.
*        WA_FINAL-PRICE3 = WA_MBEW3-STPRS.
*      ELSEIF WA_MBEW3-VPRSV = 'V'.
*        WA_FINAL-PRICE3 = WA_MBEW3-VERPR.
*      ENDIF.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING VPRSV3 PRICE3.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF SY-SUBRC = 0.
*      UNIT3_VAL   = WA_FINAL-PRICE3 * WA_FINAL-MRPVAL3.
*      MOVE  UNIT3_VAL  TO WA_FINAL-UNI5FVAL3.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNI5FVAL3.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-MNG02 = 0 .
*      WA_FINAL-UNIT3 = ' '.
*      WA_FINAL-UNIT3TR = ' '.
*      WA_FINAL-MRPVAL3 = ''.
*      WA_FINAL-VPRSV3 = ''.
*      WA_FINAL-PRICE3 = ''.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT3 UNIT3TR MRPVAL3 VPRSV3 PRICE3  .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL .    "SAVARIAR  V_PCCOUNT5 LV_PCCOUNT5
*    LV_PCCOUNT3 = LV_PCCOUNT3  + 1.
*    ON CHANGE OF WA_FINAL-MATNR .
*      WA_FINAL-V_PCCOUNT3 = LV_PCCOUNT3.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_PCCOUNT3.
*    ENDON.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_PCCOUNT3 = 0 .
*      WA_FINAL-PRICE3 = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PRICE3 .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
**
******************************************Unit3 End*************************************************************
*
******************************************Unit4 Starting********************************************************
*
**
**  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
**    IF SY-SUBRC = 0.
**      READ TABLE GT_S0944 INTO WA_S0944 WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1004' .
**      IF SY-SUBRC = 0 .
**        WA_FINAL-MRPQTY4 = WA_S0944-MNG02.
**      ENDIF.
**      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPQTY4 .
**      CLEAR WA_FINAL.
**    ENDIF.
**  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT' AND SOBSL = 'P4'.
*
*    IF SY-SUBRC = 0.
*      P4_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW +  WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW ).
*      MOVE  P4_MRPQTY TO WA_FINAL-MRPQTY4.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPQTY4.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY4 NE 0.
*      UNIT4_QTY  = WA_FINAL-MRPQTY4 -  ( WA_FINAL-UNIT4 + WA_FINAL-UNIT4TR ).
*      MOVE  UNIT4_QTY TO WA_FINAL-MRPVAL4.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL4.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
*    READ TABLE GT_MBEW4 INTO WA_MBEW4 WITH KEY MATNR = WA_FINAL-MATNR BWKEY = '1004' .
*    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY4 NE 0.
*      WA_FINAL-VPRSV4 = WA_MBEW4-VPRSV.
*      IF WA_MBEW4-VPRSV = 'S'.
*        WA_FINAL-PRICE4 = WA_MBEW4-STPRS.
*      ELSEIF WA_MBEW4-VPRSV = 'V'.
*        WA_FINAL-PRICE4 = WA_MBEW4-VERPR.
*      ENDIF.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING VPRSV4 PRICE4.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    UNIT4_VAL   = WA_FINAL-PRICE4 * WA_FINAL-MRPVAL4.
*    MOVE  UNIT4_VAL  TO WA_FINAL-UNI5FVAL4.
*    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNI5FVAL4.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*
*    IF WA_FINAL-MRPQTY4 = 0 .
*      WA_FINAL-UNIT4 = ' '.
*      WA_FINAL-UNIT4TR = ' '.
*      WA_FINAL-MRPVAL4 = ''.
*      WA_FINAL-VPRSV4 = ''.
*      WA_FINAL-PRICE4 = ''.
*
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT4 UNIT4TR MRPVAL4 VPRSV4 PRICE4.
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL .    "SAVARIAR  V_PCCOUNT5 LV_PCCOUNT5
*    LV_PCCOUNT4 = LV_PCCOUNT4  + 1.
*    ON CHANGE OF WA_FINAL-MATNR.
*      WA_FINAL-V_PCCOUNT4 = LV_PCCOUNT4.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_PCCOUNT4.
*    ENDON.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_PCCOUNT4 = 0 .
*      WA_FINAL-PRICE4 = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PRICE4 .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*
******************************************Unit4 End*************************************************************
*
******************************************Unit5 Starting*************************************************************
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT' AND SOBSL = 'P5'.
*    IF SY-SUBRC = 0.
*      P5_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW +  WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW ).
*      MOVE  P5_MRPQTY TO WA_FINAL-MRPQTY5.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPQTY5.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY5 NE 0.
*      UNIT5_QTY  = WA_FINAL-MRPQTY5 -  ( WA_FINAL-UNIT5 + WA_FINAL-UNIT5TR ).
*      MOVE  UNIT5_QTY TO WA_FINAL-MRPVAL5.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL5.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
*    READ TABLE GT_MBEW INTO WA_MBEW WITH KEY MATNR = WA_FINAL-MATNR BWKEY = '1005' .
*    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY5 NE 0.
*      WA_FINAL-VPRSV = WA_MBEW-VPRSV.
*      IF WA_MBEW-VPRSV = 'S'.
*        WA_FINAL-PRICE = WA_MBEW-STPRS.
*      ELSEIF WA_MBEW-VPRSV = 'V'.
*        WA_FINAL-PRICE = WA_MBEW-VERPR.
*      ENDIF.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING VPRSV PRICE.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    UNIT5_VAL   = WA_FINAL-PRICE * WA_FINAL-MRPVAL5.
*    MOVE  UNIT5_VAL  TO WA_FINAL-UNI5FVAL5.
*    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNI5FVAL5.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*
*    IF WA_FINAL-MRPQTY5 = 0 .
*      WA_FINAL-UNIT5 = ' '.
*      WA_FINAL-UNIT5TR = ' '.
*      WA_FINAL-MRPVAL5 = ''.
*      WA_FINAL-VPRSV = ''.
*      WA_FINAL-PRICE = ''.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT5 UNIT5TR MRPVAL5 VPRSV PRICE .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL .    "SAVARIAR  V_PCCOUNT5 LV_PCCOUNT5
*    LV_PCCOUNT5 = LV_PCCOUNT5  + 1.
*    ON CHANGE OF WA_FINAL-MATNR .
*      WA_FINAL-V_PCCOUNT5 = LV_PCCOUNT5.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_PCCOUNT5.
*    ENDON.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_PCCOUNT5 = 0 .
*      WA_FINAL-PRICE = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PRICE .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.

    CASE WA_FINAL-SOBSL.

      WHEN 'P1' .

        LOOP AT  GT_UNIT1 INTO WA_UNIT1 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1001' .
          WA_FINAL-UNIT1 = WA_FINAL-UNIT1 + WA_UNIT1-LABST + WA_UNIT1-INSME.
        ENDLOOP.

        READ TABLE GT_UNIT1TRN INTO WA_UNIT1TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1001' .
        IF SY-SUBRC = 0.
          WA_FINAL-UNIT1TR = WA_UNIT1TRN-TRAME.
        ENDIF.
        P1_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW  + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW ).
        MOVE  P1_MRPQTY TO WA_FINAL-MRPQTY1.

      WHEN 'P3'.

        LOOP AT GT_UNIT3 INTO WA_UNIT3 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1003' .
          WA_FINAL-UNIT1 = WA_FINAL-UNIT1 + WA_UNIT3-LABST + WA_UNIT3-INSME.
        ENDLOOP.

        READ TABLE GT_UNIT3TRN INTO WA_UNIT3TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1003' .
        IF SY-SUBRC = 0.
          WA_FINAL-UNIT1TR = WA_UNIT3TRN-TRAME.
        ENDIF.
        P1_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW  + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW  ).
        MOVE  P1_MRPQTY TO WA_FINAL-MRPQTY1.

      WHEN 'P4'.

        LOOP AT GT_UNIT4 INTO WA_UNIT4 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1004' .
          WA_FINAL-UNIT1 = WA_FINAL-UNIT1 + WA_UNIT4-LABST + WA_UNIT4-INSME.
        ENDLOOP.

        READ TABLE GT_UNIT4TRN INTO WA_UNIT4TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1004'.
        IF SY-SUBRC = 0.
          WA_FINAL-UNIT1TR = WA_UNIT4TRN-TRAME.
        ENDIF.

        P1_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW  + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW  ).
        MOVE  P1_MRPQTY TO WA_FINAL-MRPQTY1.

      WHEN 'P5'.

        LOOP AT  GT_UNIT5 INTO WA_UNIT5 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1005' .
          WA_FINAL-UNIT1 = WA_FINAL-UNIT1 + WA_UNIT5-LABST + WA_UNIT5-INSME.
        ENDLOOP.

        READ TABLE GT_UNIT5TRN INTO WA_UNIT5TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1005' .
        IF SY-SUBRC = 0.
          WA_FINAL-UNIT1TR = WA_UNIT5TRN-TRAME.
        ENDIF.

        P1_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW  + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW  ).
        MOVE  P1_MRPQTY TO WA_FINAL-MRPQTY1.

        WHEN 'P8'.

        LOOP AT GT_UNIT8 INTO WA_UNIT8 WHERE MATNR = WA_FINAL-MATNR1 AND WERKS = '1008' .
          WA_FINAL-UNIT1 = WA_FINAL-UNIT1 + WA_UNIT8-LABST + WA_UNIT8-INSME.
        ENDLOOP.

        READ TABLE GT_UNIT8TRN INTO WA_UNIT8TRN WITH KEY MATNR = WA_FINAL-MATNR1 WERKS = '1008'.
        IF SY-SUBRC = 0.
          WA_FINAL-UNIT1TR = WA_UNIT8TRN-TRAME.
        ENDIF.

        P1_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW + WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW  ).
        MOVE  P1_MRPQTY TO WA_FINAL-MRPQTY1.

    ENDCASE.

    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT1 UNIT1TR MRPQTY1.
    CLEAR WA_FINAL.
  ENDLOOP.


  LOOP AT GT_FINAL INTO WA_FINAL.

    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY1 NE 0.

*     IF WA_FINAL-MRPQTY1 > 0.
      UNIT1_QTY  = WA_FINAL-MRPQTY1 -  ( WA_FINAL-UNIT1 + WA_FINAL-UNIT1TR ).
*      ELSEIF WA_FINAL-MRPQTY1 < 0.
*        UNIT1_QTY  = WA_FINAL-MRPQTY1 +  ( WA_FINAL-UNIT1 + WA_FINAL-UNIT1TR ).
*      ENDIF.

      MOVE  UNIT1_QTY TO WA_FINAL-MRPVAL1.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL1.
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

  ""
  LOOP AT GT_FINAL INTO WA_FINAL.

    IF WA_FINAL-UPTOWHCSTK IS NOT INITIAL.
      IF WA_FINAL-UPTOWHCSTK  < 0.
        WA_FINAL-UPTOWHCSTK = ''.
*       WA_FINAL-LABST1 = ''.                     " Changes on 26/12/2014
*       WA_FINAL-TRAME1 = ''.                     " Changes on 26/12/2014
        "   WA_FINAL-WHCFINALQTY = ''.              Commented by ram on 07/12/2015
        "    WA_FINAL-TOTALAMT = ''.
*       WA_FINAL-SOBSL = ''.
        WA_FINAL-MRPQTY1 = ''.
        "   WA_FINAL-UNIT1 = ''.                      " Changes on 26/12/2014
        "   WA_FINAL-UNIT1TR = ''.                    " Changes on 26/12/2014
        " WA_FINAL-MRPVAL1 = ''.

      ENDIF.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UPTOWHCSTK LABST1 TRAME1 WHCFINALQTY TOTALAMT SOBSL MRPQTY1 UNIT1 UNIT1TR MRPVAL1.
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IF WA_FINAL-WHCFINALQTY IS NOT INITIAL.
      IF WA_FINAL-WHCFINALQTY  < 0.
        "     WA_FINAL-WHCFINALQTY = ''.
        "     WA_FINAL-TOTALAMT = ''.
*       WA_FINAL-SOBSL = ''.
        WA_FINAL-MRPQTY1 = ''.
        "  WA_FINAL-UNIT1 = ''.                    " Changes on 26/12/2014
        "  WA_FINAL-UNIT1TR = ''.                  " Changes on 26/12/2014
        "   WA_FINAL-MRPVAL1 = ''.
      ENDIF.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING WHCFINALQTY TOTALAMT SOBSL MRPQTY1 UNIT1 UNIT1TR MRPVAL1.
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

LOOP AT GT_FINAL INTO WA_FINAL .
       TOUNIT_QTY  =  WA_FINAL-MRPVAL1 * WA_FINAL-VOLUM .
    MOVE  TOUNIT_QTY TO WA_FINAL-MRPVAL1_LTR  .
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL1_LTR .
 ENDLOOP.

****************************************Empty Calulation*************************************************************
  "Unit-1
  "=========

*  LOOP AT GT_FINAL INTO WA_FINAL .
*    LV_UT1COUNT = LV_UT1COUNT  + 1.
*    AT NEW MATNR .
*      WA_FINAL-V_MATCOU1 = LV_UT1COUNT.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOU1.
*    ENDAT.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
***LOOP AT GT_FINAL INTO WA_FINAL.
***  IF WA_FINAL-V_MATCOU1 = 0.
***    WA_FINAL-MATNR1 = ' '.
***    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MATNR1.
***  ENDIF.
***  CLEAR WA_FINAL.
***ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_MATCOU1 = 0 .
*
*      WA_FINAL-UNIT1 = ' '.
*      WA_FINAL-UNIT1TR = ' '.
*
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT1 UNIT1TR .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  " Unit-3
*  " ========
*
*  LOOP AT GT_FINAL INTO WA_FINAL .
*    LV_UT3COUNT = LV_UT3COUNT  + 1.
*    AT NEW MATNR .
*      WA_FINAL-V_MATCOU3 = LV_UT3COUNT.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOU3.
*    ENDAT.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_MATCOU3 = 0 .
*      WA_FINAL-UNIT3 = ' '.
*      WA_FINAL-UNIT3TR = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT3 UNIT3TR .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  " Unit-4
*  " ========
*
*  LOOP AT GT_FINAL INTO WA_FINAL .
*    LV_UT4COUNT = LV_UT4COUNT  + 1.
*    AT NEW MATNR .
*      WA_FINAL-V_MATCOU4 = LV_UT4COUNT.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOU4.
*    ENDAT.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_MATCOU4 = 0 .
*      WA_FINAL-UNIT4 = ' '.
*      WA_FINAL-UNIT4TR = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT4 UNIT4TR .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  " Unit-5
*  " ========
*
*  LOOP AT GT_FINAL INTO WA_FINAL .
*    LV_UT5COUNT = LV_UT5COUNT  + 1.
*    AT NEW MATNR.
*      WA_FINAL-V_MATCOU5 = LV_UT5COUNT.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOU5.
*    ENDAT.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_MATCOU5 = 0 .
*      WA_FINAL-UNIT5 = ' '.
*      WA_FINAL-UNIT5TR = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT5 UNIT5TR .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.



*************************************** End*************************************************************
*
*****************************************Unit1 Starting***************SAVARIAR**********************************************
*
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT' AND SOBSL = 'P1'.
*
*    IF SY-SUBRC = 0.
*      P1_MRPQTY  = WA_FINAL-FINALQTY1 -  ( WA_FINAL-LABST1 + WA_FINAL-TRAME1 + WA_FINAL-STKCUW + WA_FINAL-STKTRNCUW +  WA_FINAL-STKGHW + WA_FINAL-STKTRNGHW + WA_FINAL-STKMUW + WA_FINAL-STKTRNMUW ).
*      MOVE  P1_MRPQTY TO WA_FINAL-MRPQTY1.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPQTY1.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*
*    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY1 NE 0.
*      UNIT1_QTY  = WA_FINAL-MRPQTY1 -  ( WA_FINAL-UNIT1 + WA_FINAL-UNIT1TR ).
*      MOVE  UNIT1_QTY TO WA_FINAL-MRPVAL1.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL1.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.
*
*    READ TABLE GT_MBEW1 INTO WA_MBEW1 WITH KEY MATNR = WA_FINAL-MATNR BWKEY = '1001' .
*    IF SY-SUBRC = 0 AND WA_FINAL-MRPQTY1 NE 0.
*      WA_FINAL-VPRSV1 = WA_MBEW1-VPRSV.
*      IF WA_MBEW1-VPRSV = 'S'.
*        WA_FINAL-PRICE1 = WA_MBEW1-STPRS.
*      ELSEIF WA_MBEW1-VPRSV = 'V'.
*        WA_FINAL-PRICE1 = WA_MBEW1-VERPR.
*      ENDIF.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING VPRSV1 PRICE1.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    UNIT1_VAL   = WA_FINAL-PRICE1 * WA_FINAL-MRPVAL1.
*    MOVE  UNIT1_VAL  TO WA_FINAL-UNI5FVAL1.
*    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNI5FVAL1.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-MRPQTY1 = 0 .
*      WA_FINAL-UNIT1 = ' '.
*      WA_FINAL-UNIT1TR = ' '.
*       WA_FINAL-MRPVAL1 = ' '.
*      WA_FINAL-VPRSV1 = ''.
*      WA_FINAL-PRICE1 = ''.
*
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING UNIT1 UNIT1TR MRPVAL1 VPRSV1 PRICE1 .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
* LOOP AT GT_FINAL INTO WA_FINAL .    "SAVARIAR  V_PCCOUNT5 LV_PCCOUNT5
*    LV_PCCOUNT1 = LV_PCCOUNT1  + 1.
*    ON CHANGE OF WA_FINAL-MATNR .
*      WA_FINAL-V_PCCOUNT1 = LV_PCCOUNT1.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_PCCOUNT1.
*    ENDON.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_PCCOUNT1 = 0 .
*      WA_FINAL-PRICE1 = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PRICE1 .
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*
*
******************************************Unit5 End*************************************************************
*


*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*
*
*    LOOP AT GT_MARD5 INTO WA_MARD5 WHERE MATNR = WA_FINAL-MATNR AND WERKS NE '1100' AND WERKS NE '1151' AND WERKS NE WA_FINAL-WERKS AND WERKS BETWEEN '1000' AND '1179' .
*
*      CLEAR WA_FINAL.
*
*      WA_FINAL-WERKS = WA_MARD5-WERKS.
*      " WA_FINAL-WERKS3 = WA_MARD5-WERKS.
*      WA_FINAL-MATNR = WA_MARD5-MATNR.
*      WA_FINAL-MATNR3 = WA_MARD5-MATNR.
*      WA_FINAL-LABST =  WA_MARD5-LABST + WA_MARD5-INSME .
*      WA_FINAL-LABST3 =  WA_MARD5-LABST + WA_MARD5-INSME.
*
*      INSERT WA_FINAL INTO GT_FINAL.
*    ENDLOOP.
*
*  ENDLOOP.


  " SORT GT_FINAL DESCENDING BY MATNR3 NAME1 BEZEI LABST .



*  LOOP AT GT_FINAL INTO WA_FINAL .
*
*    LV_WERKCOUNT3 = LV_WERKCOUNT3  + 1.
*
*    ON CHANGE OF WA_FINAL-WERKS3.
*      WA_FINAL-V_WERKCOUNT3 = LV_WERKCOUNT3.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_WERKCOUNT3.
*
*      CLEAR WA_FINAL.
*    ENDON.
*
*    ENDLOOP.



*  LOOP AT GT_FINAL INTO WA_FINAL .
*    LV_LABSTCOUNT = LV_LABSTCOUNT  + 1.
*    IF WA_FINAL-LABST3 IS NOT INITIAL.
**    AT NEW LABST3 .
*      ON CHANGE OF WA_FINAL-LABST3.
*        WA_FINAL-V_LABSTCOUNT = LV_LABSTCOUNT.
*        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_LABSTCOUNT.
**    ENDAT.
*      ENDON.
*      CLEAR WA_FINAL.
*    ENDIF.
*  ENDLOOP.



*  LOOP AT GT_FINAL INTO WA_FINAL.
*    IF WA_FINAL-V_WERKCOUNT3 = 0 AND WA_FINAL-V_LABSTCOUNT = 0.
*      WA_FINAL-LABST = ' '.
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING LABST.
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.


  "COMMENTED BY RAM ON 30/11/2015
*  IF WA_FINAL-VERSB IS INITIAL.
*
*    DELETE GT_FINAL WHERE VERSB = '' AND LABST = 0.
*
*  ENDIF.
  "ENDED BY RAM ON 30/11/2015

  LOOP AT GT_FINAL INTO WA_FINAL WHERE NAME1 = ''." AND VERSB = ''.

    READ TABLE GT_T001W1 INTO WA_T001W1 WITH KEY WERKS = WA_FINAL-WERKS.
    IF SY-SUBRC = 0.
      WA_FINAL-NAME1 = WA_T001W1-ORT01.
      TRANSLATE WA_FINAL-NAME1  TO UPPER CASE.
    ENDIF.
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING NAME1.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE MAKTX = ''." AND VERSB = ''.

    READ TABLE GT_MAKT1 INTO WA_MAKT1 WITH KEY MATNR = WA_FINAL-MATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MAKTX = WA_MAKT1-MAKTX.

      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MAKTX .
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = ''." AND VERSB = ''.

    READ TABLE GT_MARA1 INTO WA_MARA1 WITH KEY MATNR = WA_FINAL-MATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MTART = WA_MARA1-MTART.
      WA_FINAL-VOLUM = WA_MARA1-VOLUM.
    ENDIF.

    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MTART VOLUM .
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE BEZEI = ''.

    READ TABLE GT_MVKE1 INTO WA_MVKE1 WITH KEY MATNR = WA_FINAL-MATNR.
    IF SY-SUBRC = 0.
      WA_FINAL-MVGR1 = WA_MVKE1-MVGR1.

      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MVGR1 .
      CLEAR WA_FINAL.
    ENDIF.

  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE BEZEI = ''.

    READ TABLE GT_TVM1T1 INTO WA_TVM1T1 WITH KEY MVGR1 = WA_FINAL-MVGR1.
*    IF SY-SUBRC = 0.
    WA_FINAL-BEZEI = WA_TVM1T1-BEZEI.

    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING BEZEI  .
    CLEAR WA_FINAL.
*    ENDIF.

  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL WHERE SOBSL = '' AND MTART = 'FERT'.
    IF SY-SUBRC = 0.
      READ TABLE GT_MARCSP6 INTO WA_MARCSP6 WITH KEY MATNR = WA_FINAL-MATNR.
      IF SY-SUBRC = 0.
        WA_FINAL-SOBSL = WA_MARCSP6-SOBSL.
      ENDIF.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING SOBSL.
      CLEAR WA_FINAL.
    ENDIF.
  ENDLOOP.

*LOOP AT GT_FINAL INTO WA_FINAL .
*
*  IF WA_FINAL-VERSB EQ ''.
*
*    WA_FINAL-WERKS = ''.
*
*    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING WERKS.
*    CLEAR WA_FINAL.
*
*    ENDIF.
*
*  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL .

    IF WA_FINAL-VERSB NE ''.

      WA_FINAL-WERKS3 = ''.

      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING WERKS3.
      CLEAR WA_FINAL.

    ENDIF.

  ENDLOOP.

  SORT GT_FINAL DESCENDING BY WERKS MATNR RES .

  LOOP AT GT_FINAL INTO WA_FINAL WHERE MTART = 'FERT'.

    CASE WA_FINAL-SOBSL.

      WHEN 'P1' .

        READ TABLE GT_PLAF INTO WA_PLAF WITH KEY MATNR = WA_FINAL-MATNR PWWRK = '1001' UMSKZ = 'X' .
        IF SY-SUBRC = 0.
          WA_FINAL-PLNUM = WA_PLAF-PLNUM.
          WA_FINAL-MATNR = WA_PLAF-MATNR.
          WA_FINAL-WERKS = WA_FINAL-WERKS.
          WA_FINAL-PWWRK = WA_PLAF-PWWRK.
          WA_FINAL-GSMNG = WA_PLAF-GSMNG.
          WA_FINAL-PSTTR = WA_PLAF-PSTTR.
          WA_FINAL-PEDTR = WA_PLAF-PEDTR.
          DELETE GT_PLAF WHERE PLNUM = WA_PLAF-PLNUM.
          MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PLNUM MATNR PWWRK GSMNG PSTTR PEDTR.

        ENDIF.

      WHEN 'P3' .

        READ TABLE GT_PLAF INTO WA_PLAF WITH KEY MATNR = WA_FINAL-MATNR PWWRK = '1003' UMSKZ = 'X' .

        IF SY-SUBRC = 0.

          WA_FINAL-PLNUM = WA_PLAF-PLNUM.
          WA_FINAL-MATNR = WA_PLAF-MATNR.
          WA_FINAL-WERKS = WA_FINAL-WERKS.
          WA_FINAL-PWWRK = WA_PLAF-PWWRK.
          WA_FINAL-GSMNG = WA_PLAF-GSMNG.
          WA_FINAL-PSTTR = WA_PLAF-PSTTR.
          WA_FINAL-PEDTR = WA_PLAF-PEDTR.
          DELETE GT_PLAF WHERE PLNUM = WA_PLAF-PLNUM.
          MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PLNUM MATNR PWWRK GSMNG PSTTR PEDTR.

        ENDIF.

      WHEN 'P4'.

        READ TABLE GT_PLAF INTO WA_PLAF WITH KEY MATNR = WA_FINAL-MATNR PWWRK = '1004' UMSKZ = 'X'.

        IF SY-SUBRC = 0.

          WA_FINAL-PLNUM = WA_PLAF-PLNUM.
          WA_FINAL-MATNR = WA_PLAF-MATNR.
          WA_FINAL-WERKS = WA_FINAL-WERKS.
          WA_FINAL-PWWRK = WA_PLAF-PWWRK.
          WA_FINAL-GSMNG = WA_PLAF-GSMNG.
          WA_FINAL-PSTTR = WA_PLAF-PSTTR.
          WA_FINAL-PEDTR = WA_PLAF-PEDTR.
          DELETE GT_PLAF WHERE PLNUM = WA_PLAF-PLNUM.
          MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PLNUM MATNR WERKS PWWRK GSMNG PSTTR PEDTR .
        ENDIF.

      WHEN 'P5' .

        READ TABLE GT_PLAF INTO WA_PLAF WITH KEY MATNR = WA_FINAL-MATNR PWWRK = '1005' UMSKZ = 'X' .

        IF SY-SUBRC = 0.

          WA_FINAL-PLNUM = WA_PLAF-PLNUM.
          WA_FINAL-MATNR = WA_PLAF-MATNR.
          WA_FINAL-WERKS = WA_FINAL-WERKS.
          WA_FINAL-PWWRK = WA_PLAF-PWWRK.
          WA_FINAL-GSMNG = WA_PLAF-GSMNG.
          WA_FINAL-PSTTR = WA_PLAF-PSTTR.
          WA_FINAL-PEDTR = WA_PLAF-PEDTR.
          DELETE GT_PLAF WHERE PLNUM = WA_PLAF-PLNUM.
          MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PLNUM MATNR PWWRK GSMNG PSTTR PEDTR.

        ENDIF.

          WHEN 'P8' .

        READ TABLE GT_PLAF INTO WA_PLAF WITH KEY MATNR = WA_FINAL-MATNR PWWRK = '1008' UMSKZ = 'X' .

        IF SY-SUBRC = 0.

          WA_FINAL-PLNUM = WA_PLAF-PLNUM.
          WA_FINAL-MATNR = WA_PLAF-MATNR.
          WA_FINAL-WERKS = WA_FINAL-WERKS.
          WA_FINAL-PWWRK = WA_PLAF-PWWRK.
          WA_FINAL-GSMNG = WA_PLAF-GSMNG.
          WA_FINAL-PSTTR = WA_PLAF-PSTTR.
          WA_FINAL-PEDTR = WA_PLAF-PEDTR.
          DELETE GT_PLAF WHERE PLNUM = WA_PLAF-PLNUM.
          MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PLNUM MATNR PWWRK GSMNG PSTTR PEDTR.

        ENDIF.

    ENDCASE.

  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    IF WA_FINAL-PLNUM <> 0.
      SHIFT WA_FINAL-PLNUM LEFT DELETING LEADING '0'.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PLNUM.
      CLEAR WA_FINAL.
    ENDIF.

  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL .
    WA_FINAL-FINALQTY10 = WA_FINAL-FINALQTY1 * WA_FINAL-VOLUM .
    "   WA_FINAL-WHCFINALQTYM = WA_FINAL-WHCFINALQTYM * WA_FINAL-VOLUM .
    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY10.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL .

    LV_MATCOUNT22 = LV_MATCOUNT22  + 1.
    AT END OF MATNR .
      WA_FINAL-V_MATCOUNT22 = LV_MATCOUNT22.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_MATCOUNT22.
    ENDAT.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL .
    LV_WERKCOUNT22 = LV_WERKCOUNT22  + 1.
    AT END OF WERKS .
      WA_FINAL-V_WERKCOUNT22 = LV_WERKCOUNT22.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING V_WERKCOUNT22.
    ENDAT.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.

    IF WA_FINAL-V_MATCOUNT22 = 0 AND  WA_FINAL-V_WERKCOUNT22 = 0 .

      WA_FINAL-FINALQTY22 = '' .
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY22 .
    ENDIF.
    CLEAR WA_FINAL.
  ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL .
*at end of matnr .

    AT END OF MATNR .
      WA_FINAL-M_COUNT = 2 .
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING M_COUNT.
    ENDAT.
  ENDLOOP .

  LOOP AT GT_FINAL INTO WA_FINAL .

    WA_FINAL-FINALQTY1W = WA_FINAL-FINALQTY1 .

    WA_FINAL-FINALQTY1W1 = WA_FINAL-FINALQTY1W1 + WA_FINAL-FINALQTY1 .

    WA_FINAL-WHCFINALQTY_OVR = WA_FINAL-WHCFINALQTY .

    WA_FINAL-WHCFINALQTY_OVR1 = WA_FINAL-WHCFINALQTY_OVR .


    WA_FINAL-MRPVAL1_OVR = WA_FINAL-MRPVAL1 .

    WA_FINAL-MRPVAL1_OVR1 = WA_FINAL-MRPVAL1_OVR .

  SA2 = SA2 + WA_FINAL-FINALQTY1W1 .

  SA3 = SA3 +  WA_FINAL-WHCFINALQTY_OVR1 .

  SA4 = SA4 + WA_FINAL-MRPVAL1_OVR1 .

    IF WA_FINAL-M_COUNT EQ 2.

      WA_FINAL-FINALQTY1W = SA2 .

      WA_FINAL-WHCFINALQTY_OVR = SA3 .

      WA_FINAL-MRPVAL1_OVR = SA4 .

*      IF WA_FINAL-FINALQTY1W GE 0 OR WA_FINAL-WHCFINALQTY_OVR GE 0 OR WA_FINAL-MRPVAL1_OVR GT 0 .
*       MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY1W FINALQTY1W1 WHCFINALQTY_OVR MRPVAL1_OVR WHCFINALQTY_OVR1 MRPVAL1_OVR1.
*        CLEAR WA_FINAL .
*      ENDIF .

      IF WA_FINAL-FINALQTY1W GE 0.
       MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY1W FINALQTY1W1 .
        " CLEAR WA_FINAL .
      ENDIF .

      IF WA_FINAL-WHCFINALQTY_OVR GE 0.
       MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING  WHCFINALQTY_OVR WHCFINALQTY_OVR1.
        " CLEAR WA_FINAL .
      ENDIF .

      IF WA_FINAL-MRPVAL1_OVR GE 0.
       MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING MRPVAL1_OVR MRPVAL1_OVR1.
        " CLEAR WA_FINAL .
      ENDIF .
      CLEAR     SA2 .
      CLEAR     SA3 .
      CLEAR     SA4 .
      CLEAR WA_FINAL .
    ENDIF .
  ENDLOOP.

*  LOOP AT GT_FINAL INTO WA_FINAL .
*     IF WA_FINAL-FINALQTY1 GE '0' .
*        WA_FINAL-FINALQTYN = WA_FINAL-FINALQTY1.
*        MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTYN.
*      ENDIF.
*ENDLOOP.


* LOOP AT GT_FINAL INTO WA_FINAL .
*    IF WA_FINAL-ZZNAME1 IS NOT INITIAL .
*      WA_FINAL-RES = 'SALES PRO' .
*      WA_FINAL-WERKS = WA_FINAL-ZZWERKS.
*      WA_FINAL-NAME1 = WA_FINAL-ZZNAME1.
*      WA_FINAL-MATNR = WA_FINAL-ZZMATNR .
*      WA_FINAL-MAKTX = WA_FINAL-ZZMAKTX.
*      WA_FINAL-PLNMG = WA_FINAL-ZZPLNMG .
*      WA_FINAL-PBDNR = WA_FINAL-ZZPBDNR .
*      WA_FINAL-MEINS = WA_FINAL-ZZMEINS.
*      WA_FINAL-TOTALAMT1 = WA_FINAL-ZZPLNMG_LTR .
*      WA_FINAL-AENAM = WA_FINAL-ZZUSER .
*      WA_FINAL-MTART = WA_FINAL-ZZMTART .
*      WA_FINAL-VOLUM = WA_FINAL-ZZVOLUM .
*      WA_FINAL-LAEDA  =  WA_FINAL-ZZENTRY .
*      WA_FINAL-PDATU   = WA_FINAL-ZZREQ_DA .
*      WA_FINAL-BEZEI = WA_FINAL-BEZEI .
*      " WA_FINAL-ZZCUSTOM
*    ENDIF .
*    IF WA_FINAL-ZZNAME1 IS INITIAL .
*      WA_FINAL-RES = 'SAP' .
*      WA_FINAL-WERKS = WA_FINAL-WERKS .
*      WA_FINAL-NAME1 = WA_FINAL-NAME1.
*      WA_FINAL-MATNR = WA_FINAL-MATNR .
*      WA_FINAL-MAKTX = WA_FINAL-MAKTX .
*      WA_FINAL-PLNMG = WA_FINAL-PLNMG .
*      WA_FINAL-PBDNR = WA_FINAL-PBDNR .
*      WA_FINAL-MEINS = WA_FINAL-MEINS.
*      WA_FINAL-TOTALAMT1 = WA_FINAL-TOTALAMT1 .
*      WA_FINAL-AENAM  = WA_FINAL-AENAM .
*      WA_FINAL-MTART = WA_FINAL-MTART .
*      WA_FINAL-VOLUM = WA_FINAL-VOLUM .
*      WA_FINAL-LAEDA = WA_FINAL-LAEDA .
*      WA_FINAL-PDATU  = WA_FINAL-PDATU  .
*    ENDIF.
**      BREAK-POINT.
*    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING RES WERKS NAME1 MATNR MAKTX PLNMG PBDNR MEINS TOTALAMT1 AENAM MTART VOLUM LAEDA PDATU.
*   " MOVE-CORRESPONDING WA_FINAL TO WA_FINAL.
*   " APPEND WA_FINAL1 TO GT_FINAL1 ."WHERE RES = 'SAP'.
*
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*
*    IF WA_FINAL-V_MATCOUNT = 0 AND WA_FINAL-V_WERKCOUNT = 0.
*      WA_FINAL-LABST = ' '.
*      WA_FINAL-TRAME = ' '.
*
*      TOT_QTY1  =  WA_FINAL-PLNMG - ( WA_FINAL-LABST + WA_FINAL-TRAME ).
*      MOVE  TOT_QTY1 TO WA_FINAL-FINALQTY.
*
*      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING LABST TRAME FINALQTY.
*    ENDIF.
*    CLEAR WA_FINAL.
*  ENDLOOP.
*
*  LOOP AT GT_FINAL INTO WA_FINAL.
*    TOT_QTY1  =  WA_FINAL-FINALQTY.
*    MOVE  TOT_QTY1 TO WA_FINAL-FINALQTY1.
*    MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING FINALQTY1.
*    CLEAR WA_FINAL.
*  ENDLOOP.

ENDFORM.                    "GET_DATA

*&---------------------------------------------------------------------*
*&      Form  FIELDCATLOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FIELDCATLOG.

  PERFORM ALV_LAYOUT USING 1 'Req Resource' 'RES' 'GT_FINAL' '' ''  '' '' '' ''.

  PERFORM ALV_LAYOUT USING 2 'Plant' 'WERKS' 'GT_FINAL' '' '' 'X' '' '' '' .

  PERFORM ALV_LAYOUT USING 3 'Plant Name' 'NAME1' 'GT_FINAL' '' '' 'X' ''  '' '' .
  PERFORM ALV_LAYOUT USING 4 'Mat.Group' 'BEZEI' 'GT_FINAL' '' ''  'X' '' 'X' ''.
  PERFORM ALV_LAYOUT USING 5 'Material Code' 'MATNR' 'GT_FINAL' '' '' 'X' ''  '' ''.
  PERFORM ALV_LAYOUT USING 7 'Material Description' 'MAKTX' 'GT_FINAL' '' '' 'X' ''  '' 'X'.
  PERFORM ALV_LAYOUT USING 8 'Volume' 'VOLUM' 'GT_FINAL' '' ''  'X' '' 'X' ''.
  PERFORM ALV_LAYOUT USING 9 'Material Type' 'MTART' 'GT_FINAL' '' '' 'X' ''  '' ''.
  PERFORM ALV_LAYOUT USING 10 'User' 'AENAM ' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 11 'Customer' 'ZZCUSTOM ' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 12 'Cus.Description' 'ZZCUS_NAME' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 13 'Req Plan' 'PBDNR' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 14 'Version' 'VERSB' 'GT_FINAL' '' '' ''  '' '' ''.
  PERFORM ALV_LAYOUT USING 15 'Active' 'VERVS' 'GT_FINAL' '' '' ''  '' '' ''.
  PERFORM ALV_LAYOUT USING 16 'Entry Date' 'LAEDA' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 18 'Req Date' 'PDATU' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 20 'Planned Qty' 'PLNMG' 'GT_FINAL' 'X' '' '' ''  'X' 'X'.
  PERFORM ALV_LAYOUT USING 22 'Bun' 'MEINS' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 23 'Plan Qty(Ltrs)' 'TOTALAMT1' 'GT_FINAL' 'X' '' '' ''  'X' ''.
  PERFORM ALV_LAYOUT USING 24 'Closing Stock.' 'LABST' 'GT_FINAL' 'X' '' '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 14 'In Qual. Insp' 'INSME' 'GT_FINAL' '' '' '' ''  '' ''.
*  PERFORM ALV_LAYOUT USING 16 'Blocked' 'SPEME' 'GT_FINAL' '' '' '' ''  '' ''.
  PERFORM ALV_LAYOUT USING 26 'In Transit' 'TRAME' 'GT_FINAL' 'X' '' '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 20 'Total Qty' 'Totqty' 'GT_FINAL' '' '' '' ''  '' ''.
  "  PERFORM ALV_LAYOUT USING 28 'Req.Final Qty@Branch Level' 'FINALQTY1' 'GT_FINAL' '' '' '' '' 'X' ''. " Commedned By Govind
*  PERFORM ALV_LAYOUT USING 30 'Req@Sin.Mat.Code' 'MATNR1' 'GT_FINAL' '' '' '' '' 'X' ''. " Commedned By Govind
  PERFORM ALV_LAYOUT USING 31 'Fin.Req Qty@Branch Wise' 'FINALQTY1' 'GT_FINAL' 'X' 'X' '' '' 'X' ''.
  PERFORM ALV_LAYOUT USING 32 'Fin.Req Qty@Branch Wise In Lit' 'FINALQTY10' 'GT_FINAL' 'X' 'X' '' '' 'X' ''.
  "PERFORM ALV_LAYOUT USING 33 'Fin.Req Qty@Branch Wise Over All' 'FINALQTYN' 'GT_FINAL' 'X' 'X' '' '' 'X' ''.

 " PERFORM ALV_LAYOUT USING 33 'Fin.Req Qty@Branch Wise Over All' 'FINALQTY22' 'GT_FINAL' 'X' 'X' '' '' 'X' ''.
  PERFORM ALV_LAYOUT USING 33 'Fin.Req Qty@Branch Wise Over All' 'FINALQTY1W' 'GT_FINAL' 'X' 'X' '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 31 'Req.Final Qty in WHC(1st CYCLE-Req only cum)' 'PLNMG' 'GT_FINAL' '' '' '' ''  'X' ''. " Commedned By Govind
*  PERFORM ALV_LAYOUT USING 32 'Req.Final Qty in WHC(2nd CYCLE-Stk minnus@ 1100 to 1179)' 'FINALQTY1' 'GT_FINAL' 'X' 'X' '' ''  'X' ''. " Commedned By Govind
  PERFORM ALV_LAYOUT USING 34 'Stock in 1126' 'STKGHW' 'GT_FINAL' 'X' '' '' ''  'X' ''. " Commedned By Govind
  PERFORM ALV_LAYOUT USING 36 'Stock in Transit@1126' 'STKTRNGHW' 'GT_FINAL' 'X' '' '' ''  'X' ''. " Commedned By Govind

  PERFORM ALV_LAYOUT USING 38 'Closing Stock in 1152(CUTTACK RWH)' 'STKCUW' 'GT_FINAL' 'X' '' '' ''  'X' ''.
  PERFORM ALV_LAYOUT USING 40 'In Transit@1152' 'STKTRNCUW' 'GT_FINAL' 'X' '' '' ''  'X' ''.
  PERFORM ALV_LAYOUT USING 44 'Stock in 1176' 'STKMUW' 'GT_FINAL' 'X' '' '' ''  'X' ''.
  PERFORM ALV_LAYOUT USING 45 'Stock in Transit@1176' 'STKTRNMUW' 'GT_FINAL' 'X' '' '' ''  'X' ''.

  "  PERFORM ALV_LAYOUT USING 46 'Plan.Req.Qty@1100' 'UPTOWHCSTK' 'GT_FINAL' 'X' '' '' ''  'X' 'X'.

  PERFORM ALV_LAYOUT USING 47 'Closing Stock in WHC' 'LABST1' 'GT_FINAL' 'X' '' '' ''  'X' ''. "
  PERFORM ALV_LAYOUT USING 48 'In Transit@WHC' 'TRAME1' 'GT_FINAL' 'X' '' '' ''  'X' ''.

*  PERFORM ALV_LAYOUT USING 52 'Req.Fin Qty WHC(1st Cycle Cum Case)' 'PLNMG' 'GT_FINAL' '' '' '' ''  'X' 'X'.
*  PERFORM ALV_LAYOUT USING 54 'Req.Fin Qty WHC(1st Cycle Cum Ltrs)' 'TOTALAMT1' 'GT_FINAL' '' '' '' ''  'X' ''.
*  PERFORM ALV_LAYOUT USING 52 'Plan Qty(1st Cycle Cum.in Case)' 'PLNMG' 'GT_FINAL' '' '' '' ''  'X' 'X'.
*  PERFORM ALV_LAYOUT USING 54 'Plan Qty(1st Cycle Cum. in Ltrs)' 'TOTALAMT1' 'GT_FINAL' '' '' '' ''  'X' ''.

  PERFORM ALV_LAYOUT USING 57 'Fin.Req Qty@1100' 'WHCFINALQTY' 'GT_FINAL' 'X' 'X' '' ''  'X' 'X'.
  PERFORM ALV_LAYOUT USING 58 'Fin.Req@1100(In Ltrs)' 'TOTALAMT' 'GT_FINAL' 'X' '' '' ''  'X' ''.
 " PERFORM ALV_LAYOUT USING 59 'Fin.Req Qty@1100 Over All' 'WHCFINALQTYM' 'GT_FINAL' 'X' 'X' '' ''  'X' 'X'.
  PERFORM ALV_LAYOUT USING 59 'Fin.Req Qty@1100 Over All' 'WHCFINALQTY_OVR' 'GT_FINAL' 'X' 'X' '' ''  'X' 'X'.
  PERFORM ALV_LAYOUT USING 60 'MFG_Unit' 'SOBSL' 'GT_FINAL' '' ''  '' ' ' 'X' ''.

*  PERFORM ALV_LAYOUT USING 66 'Unit Closing Stock ' 'UNIT1' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 68 'Unit In Transit ' 'UNIT1TR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 70 'Unit@Fin.Req Qty' 'MRPQTY8' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 71 'Unit@Fin.Req Qty' 'NAM' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 54 'Total Qty in Liters' 'TOTALAMT' 'GT_FINAL' 'X' ''  '' '' 'X' 'X'.
*  PERFORM ALV_LAYOUT USING 60 'Status' 'STAT' 'GT_FINAL' '' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 62 'Req.Month' 'SPMON' 'GT_FINAL' '' ''  '' '' 'X' ''.

*  PERFORM ALV_LAYOUT USING 64 'Unit MRP TYPE' 'SPMON' 'GT_FINAL' '' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 64 'Unit Req Qty' 'MRPQTY1' 'GT_FINAL' 'X' ''  '' '' 'X' 'X'.
  PERFORM ALV_LAYOUT USING 66 'Unit Closing Stock ' 'UNIT1' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
  PERFORM ALV_LAYOUT USING 68 'Unit In Transit ' 'UNIT1TR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
  PERFORM ALV_LAYOUT USING 70 'Unit@Fin.Req Qty' 'MRPVAL1' 'GT_FINAL' 'X' ''  '' '' 'X' ''.

  PERFORM ALV_LAYOUT USING 71 'Unit@Fin.Req Qty (In Ltrs)' 'MRPVAL1_LTR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.

  PERFORM ALV_LAYOUT USING 72 'Unit@Fin.Req Qty Over All' 'MRPVAL1_OVR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.

*  PERFORM ALV_LAYOUT USING 72 'U-1@P.C.' 'VPRSV1' 'GT_FINAL' '' ''  '' '' 'X' ''. " Commedned By Govind
*  PERFORM ALV_LAYOUT USING 74 'U-1Price/Unit' 'PRICE1' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 76 'U-1@Req.Qty Value' 'UNI5FVAL1' 'GT_FINAL' 'X' ''  '' '' 'X' ''.

  " PERFORM ALV_LAYOUT USING 78 'Planned Order' 'PLNUM' 'GT_FINAL' '' ''  '' '' '' ''.
  " PERFORM ALV_LAYOUT USING 80 'Plan Or.Qty ' 'GSMNG' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
  " PERFORM ALV_LAYOUT USING 82 'Plan Or.Start Date' 'PSTTR' 'GT_FINAL' '' ''  '' '' '' ''.
  " PERFORM ALV_LAYOUT USING 84 'Plan Or.End Date' 'PEDTR' 'GT_FINAL' '' ''  '' '' '' ''.

*
*  PERFORM ALV_LAYOUT USING 78 'Unit-3 Req Qty' 'MNG02' 'GT_FINAL' 'X' ''  '' '' 'X' 'X'.
*  PERFORM ALV_LAYOUT USING 80 'U-3 Stock ' 'UNIT3' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 82 'U-3 In Transit ' 'UNIT3TR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 84 'U-3@Fin.Req Qty' 'MRPVAL3' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
**  PERFORM ALV_LAYOUT USING 86 'U-3@P.C.' 'VPRSV3' 'GT_FINAL' '' ''  '' '' 'X' ''. " Commedned By Govind
**  PERFORM ALV_LAYOUT USING 88 'U-3Price/Unit' 'PRICE3' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
**  PERFORM ALV_LAYOUT USING 90 'U-3@Req.Qty Value' 'UNI5FVAL3' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*
*  PERFORM ALV_LAYOUT USING 94 'U-4 Req Qty' 'MRPQTY4' 'GT_FINAL' 'X' ''  '' '' 'X' 'X'.
*  PERFORM ALV_LAYOUT USING 96 'U-4 Stock ' 'UNIT4' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 98 'U-4 In Transit ' 'UNIT4TR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 100 'U-4@Fin.Req Qty' 'MRPVAL4' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
**  PERFORM ALV_LAYOUT USING 102 'U-4@P.C.' 'VPRSV4' 'GT_FINAL' '' ''  '' '' 'X' ''. " Commedned By Govind
**  PERFORM ALV_LAYOUT USING 104 'U-4Price/Unit' 'PRICE4' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
**  PERFORM ALV_LAYOUT USING 106 'U-4@Req.Qty Value' 'UNI5FVAL4' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*
*  PERFORM ALV_LAYOUT USING 108 'Unit-5 Req Qty' 'MRPQTY5' 'GT_FINAL' 'X' ''  '' '' 'X' 'X'.
*  PERFORM ALV_LAYOUT USING 110 'U-5 Stock ' 'UNIT5' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 112 'U-5  In Transit ' 'UNIT5TR' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 114 'U-5@Fin.Req Qty' 'MRPVAL5' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 116 'U-5@P.C.' 'VPRSV' 'GT_FINAL' '' ''  '' '' 'X' ''. " Commedned By Govind
*  PERFORM ALV_LAYOUT USING 118 'U-5Price/Unit' 'PRICE' 'GT_FINAL' 'X' ''  '' '' 'X' ''.
*  PERFORM ALV_LAYOUT USING 120 'U-5@Req.Qty Value' 'UNI5FVAL5' 'GT_FINAL' 'X' ''  '' '' 'X' ''.

*  PERFORM ALV_LAYOUT USING 122 'MVGR1' 'MVGR1' 'GT_FINAL' '' ''  '' '' 'X' ''.

  " PERFORM ALV_LAYOUT USING 123 ' BEZEI' ' BEZEI' 'GT_FINAL' '' ''  '' '' 'X' ''.

  WA_SORT-FIELDNAME = 'MATNR'.
  WA_SORT-TABNAME = 'GT_FINAL'.
  WA_SORT-SUBTOT = 'X'.

*  WA_SORT-FIELDNAME = 'WHCFINALQTY'.
*  WA_SORT-SELTEXT_M = 'FINALQTY55'.
*  WA_SORT-SUBTOT = 'X'.


* WA_SORT-FIELDNAME = 'UNI5FVAL5'.
*  WA_SORT-TABNAME = 'GT_FINAL'.
*  WA_SORT-SUBTOT = 'X'.
*  WA_SORT-SUBTOTALS_TEXT = 'SOBSL'.
  APPEND WA_SORT TO GT_SORT.
  CLEAR WA_SORT.

ENDFORM.                    "FIELDCATLOG

*&---------------------------------------------------------------------*
*&      Form  ALV_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P1         text
*      -->P2         text
*      -->P3         text
*      -->P4         text
*      -->P5         text
*      -->P6         text
*      -->P7         text
*      -->P8         text
*      -->P9         text
*----------------------------------------------------------------------*
FORM ALV_LAYOUT USING P1 P2 P3 P4 P5 P6 P7 P8 P9 P10.

  WA_FCAT-COL_POS = P1.
  WA_FCAT-SELTEXT_L = P2.
  WA_FCAT-FIELDNAME = P3.
  WA_FCAT-TABNAME = P4.
  WA_FCAT-DO_SUM = P5.
  WA_FCAT-OUTPUTLEN = P6.
  WA_FCAT-KEY = P7.
*  WA_FCAT-NO_OUT = P8.
  WA_FCAT-SELTEXT_S = P8 .
*    WA_FCAT-SP_GROUP = P8 .
  WA_FCAT-NO_ZERO = P9.
  WA_FCAT-EMPHASIZE  = P10.  " Light Green Color

  WA_FCAT-TEXT_FIELDNAME = 'MAKTX' ." 'SOBSL'.

*  WA_FCAT-IFIELDNAME = 'SOBSL'.
*  WA_FCAT-SP_GROUP = 'SOBSL'.
*  WA_FCAT-IFIELDNAME = 'SOBSL'.
*  WA_FCAT-ROLLNAME = 'SOBSL'.
*  WA_FCAT-REPTEXT_DDIC = 'SOBSL'.

*  WA_FCAT-SELTEXT_L = 'SOBSL' .
*    WA_FCAT-TEXT_FIELDNAME = 'SOBSL' .

  APPEND WA_FCAT TO GT_FCAT.
  CLEAR WA_FCAT.

ENDFORM.                    "ALV_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  BUILD_LAYOUT
*&---------------------------------------------------------------------*
*       Build layout for ALV grid report
*----------------------------------------------------------------------*
FORM BUILD_LAYOUT.
*  LAYOUT-NO_INPUT          = 'X'.
*  LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
*  LAYOUT-TOTALS_TEXT       = 'Totals'(201).
  LAYOUT-COLTAB_FIELDNAME = 'CELLCOLOR'.  "CTAB_FNAME
ENDFORM.                    " BUILD_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  SET_CELL_COLOURS
*&---------------------------------------------------------------------*
*       Set colour of individual ALV cell, field
*----------------------------------------------------------------------*
FORM SET_CELL_COLOURS .

  DATA: WA_CELLCOLOR TYPE LVC_S_SCOL.
  DATA: LD_INDEX TYPE SY-TABIX.

  LOOP AT GT_FINAL INTO WA_FINAL.
    LD_INDEX = SY-TABIX.

*    IF WA_FINAL-PLNMG GT 0.
    WA_CELLCOLOR-FNAME = 'PLNMG'.
    WA_CELLCOLOR-COLOR-COL = 7.  "color code 1-7, if outside rage defaults to 7
    WA_CELLCOLOR-COLOR-INT = '0'.  "1 = Intensified on, 0 = Intensified off
    WA_CELLCOLOR-COLOR-INV = '0'.  "1 = text colour, 0 = background colour
    APPEND WA_CELLCOLOR TO WA_FINAL-CELLCOLOR.
    MODIFY GT_FINAL FROM WA_FINAL INDEX LD_INDEX TRANSPORTING CELLCOLOR.
*    ENDIF.

*    IF WA_FINAL-UPTOWHCSTK GT 0.
    WA_CELLCOLOR-FNAME = 'UPTOWHCSTK'.
    WA_CELLCOLOR-COLOR-COL = 7.  "color code 1-7, if outside rage defaults to 7  4
    WA_CELLCOLOR-COLOR-INT = '0'.  "1 = Intensified on, 0 = Intensified off
    WA_CELLCOLOR-COLOR-INV = '0'.  "1 = text colour, 0 = background colour
    APPEND WA_CELLCOLOR TO WA_FINAL-CELLCOLOR.
    MODIFY GT_FINAL FROM WA_FINAL INDEX LD_INDEX TRANSPORTING CELLCOLOR.
*    ENDIF.
*
*
*    IF WA_FINAL-MRPVAL4 LT 0.
*      WA_CELLCOLOR-FNAME = 'MRPVAL4'.
*      WA_CELLCOLOR-COLOR-COL = 6.  "color code 1-7, if outside rage defaults to 7
*      WA_CELLCOLOR-COLOR-INT = '0'.  "1 = Intensified on, 0 = Intensified off
*      WA_CELLCOLOR-COLOR-INV = '0'.  "1 = text colour, 0 = background colour
*      APPEND WA_CELLCOLOR TO WA_FINAL-CELLCOLOR.
*      MODIFY GT_FINAL FROM WA_FINAL INDEX LD_INDEX TRANSPORTING CELLCOLOR.
*    ENDIF.
*
*
*    IF WA_FINAL-MRPVAL5 LT 0.
*      WA_CELLCOLOR-FNAME = 'MRPVAL5'.
*      WA_CELLCOLOR-COLOR-COL = 6.  "color code 1-7, if outside rage defaults to 7
*      WA_CELLCOLOR-COLOR-INT = '0'.  "1 = Intensified on, 0 = Intensified off
*      WA_CELLCOLOR-COLOR-INV = '0'.  "1 = text colour, 0 = background colour
*      APPEND WA_CELLCOLOR TO WA_FINAL-CELLCOLOR.
*      MODIFY GT_FINAL FROM WA_FINAL INDEX LD_INDEX TRANSPORTING CELLCOLOR.
*    ENDIF.

  ENDLOOP.

ENDFORM.                    " SET_CELL_COLOURS


"ALV_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  ALV_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ALV_DISPLAY.

*DELETE GT_FINAL WHERE WERKS = ''.
*  DELETE ADJACENT DUPLICATES FROM GT_FINAL COMPARING WERKS NAME1 .


  LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  LAYOUT-ZEBRA = 'X'.

*   LAYOUT-NO_COLHEAD = 'X'.
*  LAYOUT-SUBTOTALS_TEXT = 'Sub Totals'(009).

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM     = SY-REPID
      I_CALLBACK_TOP_OF_PAGE = 'ALV_CATALOG_HEADER'
      IS_LAYOUT              = LAYOUT
      IT_FIELDCAT            = GT_FCAT[]
      IT_SORT                = GT_SORT[]
*     IT_TEXT                = GT_TEXT[]
      I_DEFAULT              = 'X'
      I_SAVE                 = 'A'
    TABLES
      T_OUTTAB               = GT_FINAL[].
*    EXCEPTIONS
*      OPERATION_NO_AUTHORIZATION = 1.

  IF SY-SUBRC <> 0.
    WRITE: 'FAILURE'.
  ENDIF.


ENDFORM.                    "ALV_DISPLAY

*&---------------------------------------------------------------------*
*&      Form  ALV_CATALOG_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ALV_CATALOG_HEADER.

  DATA : LIT_HEADER TYPE  SLIS_T_LISTHEADER,
       LS_LINE TYPE SLIS_LISTHEADER.

  DATA :
         LV_WERKS(100) TYPE C.
*         LV_BEDAT(50) TYPE C,
*         LV_LIFNR(100) TYPE C.
*         LV_BEDAT1 TYPE SY-DATUM.

  CLEAR : LV_WERKS.
*          LV_LIFNR,
  IF SO_WERKS-HIGH IS NOT INITIAL.
    CONCATENATE 'Plant Code :' SO_WERKS-LOW 'To' SO_WERKS-HIGH INTO LV_WERKS SEPARATED BY SPACE.
  ELSE.
    CONCATENATE 'Plant Code :' SO_WERKS-LOW INTO LV_WERKS SEPARATED BY SPACE.
  ENDIF.

  CLEAR LS_LINE.
  LS_LINE-TYP  = 'S'.
  LS_LINE-KEY = ' '.
  LS_LINE-INFO = LV_WERKS.
  APPEND LS_LINE TO LIT_HEADER.

  CLEAR LS_LINE.
  LS_LINE-TYP  = 'H'.
  LS_LINE-KEY = ' '.
  LS_LINE-INFO = 'SALES PROJECTION REPORT' .
  APPEND LS_LINE TO LIT_HEADER.


  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = LIT_HEADER.

*  CALL FUNCTION 'CONVERSION_EXIT_SDATE_OUTPUT'
*    EXPORTING
*      INPUT  = LV_BEDAT
*    IMPORTING
*      OUTPUT = LV_BEDAT.

**  CALL FUNCTION 'CONVERSION_EXIT_SDATE_OUTPUT'
**
**  EXPORTING
**    INPUT         = LV_BEDAT.

*      I_LOGO             = ' '.


ENDFORM.                    "ALV_CATALOG_HEADER
