*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZVCUSTTYPE_EXTNS................................*
FORM GET_DATA_ZVCUSTTYPE_EXTNS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZCUSTTYPE_EXTNSN WHERE
(VIM_WHERETAB) .
    CLEAR ZVCUSTTYPE_EXTNS .
ZVCUSTTYPE_EXTNS-MANDT =
ZCUSTTYPE_EXTNSN-MANDT .
ZVCUSTTYPE_EXTNS-AKONT =
ZCUSTTYPE_EXTNSN-AKONT .
ZVCUSTTYPE_EXTNS-VKORG =
ZCUSTTYPE_EXTNSN-VKORG .
ZVCUSTTYPE_EXTNS-ACT_TYPE =
ZCUSTTYPE_EXTNSN-ACT_TYPE .
ZVCUSTTYPE_EXTNS-CUSTTYPE =
ZCUSTTYPE_EXTNSN-CUSTTYPE .
ZVCUSTTYPE_EXTNS-CCODE =
ZCUSTTYPE_EXTNSN-CCODE .
ZVCUSTTYPE_EXTNS-DIST_CHANNEL =
ZCUSTTYPE_EXTNSN-DIST_CHANNEL .
ZVCUSTTYPE_EXTNS-DIVISON =
ZCUSTTYPE_EXTNSN-DIVISON .
<VIM_TOTAL_STRUC> = ZVCUSTTYPE_EXTNS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVCUSTTYPE_EXTNS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVCUSTTYPE_EXTNS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVCUSTTYPE_EXTNS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZCUSTTYPE_EXTNSN WHERE
  ACT_TYPE = ZVCUSTTYPE_EXTNS-ACT_TYPE AND
  CUSTTYPE = ZVCUSTTYPE_EXTNS-CUSTTYPE AND
  CCODE = ZVCUSTTYPE_EXTNS-CCODE AND
  AKONT = ZVCUSTTYPE_EXTNS-AKONT AND
  VKORG = ZVCUSTTYPE_EXTNS-VKORG AND
  DIST_CHANNEL = ZVCUSTTYPE_EXTNS-DIST_CHANNEL AND
  DIVISON = ZVCUSTTYPE_EXTNS-DIVISON .
    IF SY-SUBRC = 0.
    DELETE ZCUSTTYPE_EXTNSN .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZCUSTTYPE_EXTNSN WHERE
  ACT_TYPE = ZVCUSTTYPE_EXTNS-ACT_TYPE AND
  CUSTTYPE = ZVCUSTTYPE_EXTNS-CUSTTYPE AND
  CCODE = ZVCUSTTYPE_EXTNS-CCODE AND
  AKONT = ZVCUSTTYPE_EXTNS-AKONT AND
  VKORG = ZVCUSTTYPE_EXTNS-VKORG AND
  DIST_CHANNEL = ZVCUSTTYPE_EXTNS-DIST_CHANNEL AND
  DIVISON = ZVCUSTTYPE_EXTNS-DIVISON .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZCUSTTYPE_EXTNSN.
    ENDIF.
ZCUSTTYPE_EXTNSN-MANDT =
ZVCUSTTYPE_EXTNS-MANDT .
ZCUSTTYPE_EXTNSN-AKONT =
ZVCUSTTYPE_EXTNS-AKONT .
ZCUSTTYPE_EXTNSN-VKORG =
ZVCUSTTYPE_EXTNS-VKORG .
ZCUSTTYPE_EXTNSN-ACT_TYPE =
ZVCUSTTYPE_EXTNS-ACT_TYPE .
ZCUSTTYPE_EXTNSN-CUSTTYPE =
ZVCUSTTYPE_EXTNS-CUSTTYPE .
ZCUSTTYPE_EXTNSN-CCODE =
ZVCUSTTYPE_EXTNS-CCODE .
ZCUSTTYPE_EXTNSN-DIST_CHANNEL =
ZVCUSTTYPE_EXTNS-DIST_CHANNEL .
ZCUSTTYPE_EXTNSN-DIVISON =
ZVCUSTTYPE_EXTNS-DIVISON .
    IF SY-SUBRC = 0.
    UPDATE ZCUSTTYPE_EXTNSN ##WARN_OK.
    ELSE.
    INSERT ZCUSTTYPE_EXTNSN .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVCUSTTYPE_EXTNS-UPD_FLAG,
STATUS_ZVCUSTTYPE_EXTNS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVCUSTTYPE_EXTNS.
  SELECT SINGLE * FROM ZCUSTTYPE_EXTNSN WHERE
ACT_TYPE = ZVCUSTTYPE_EXTNS-ACT_TYPE AND
CUSTTYPE = ZVCUSTTYPE_EXTNS-CUSTTYPE AND
CCODE = ZVCUSTTYPE_EXTNS-CCODE AND
AKONT = ZVCUSTTYPE_EXTNS-AKONT AND
VKORG = ZVCUSTTYPE_EXTNS-VKORG AND
DIST_CHANNEL = ZVCUSTTYPE_EXTNS-DIST_CHANNEL AND
DIVISON = ZVCUSTTYPE_EXTNS-DIVISON .
ZVCUSTTYPE_EXTNS-MANDT =
ZCUSTTYPE_EXTNSN-MANDT .
ZVCUSTTYPE_EXTNS-AKONT =
ZCUSTTYPE_EXTNSN-AKONT .
ZVCUSTTYPE_EXTNS-VKORG =
ZCUSTTYPE_EXTNSN-VKORG .
ZVCUSTTYPE_EXTNS-ACT_TYPE =
ZCUSTTYPE_EXTNSN-ACT_TYPE .
ZVCUSTTYPE_EXTNS-CUSTTYPE =
ZCUSTTYPE_EXTNSN-CUSTTYPE .
ZVCUSTTYPE_EXTNS-CCODE =
ZCUSTTYPE_EXTNSN-CCODE .
ZVCUSTTYPE_EXTNS-DIST_CHANNEL =
ZCUSTTYPE_EXTNSN-DIST_CHANNEL .
ZVCUSTTYPE_EXTNS-DIVISON =
ZCUSTTYPE_EXTNSN-DIVISON .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVCUSTTYPE_EXTNS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVCUSTTYPE_EXTNS-ACT_TYPE TO
ZCUSTTYPE_EXTNSN-ACT_TYPE .
MOVE ZVCUSTTYPE_EXTNS-CUSTTYPE TO
ZCUSTTYPE_EXTNSN-CUSTTYPE .
MOVE ZVCUSTTYPE_EXTNS-CCODE TO
ZCUSTTYPE_EXTNSN-CCODE .
MOVE ZVCUSTTYPE_EXTNS-AKONT TO
ZCUSTTYPE_EXTNSN-AKONT .
MOVE ZVCUSTTYPE_EXTNS-VKORG TO
ZCUSTTYPE_EXTNSN-VKORG .
MOVE ZVCUSTTYPE_EXTNS-DIST_CHANNEL TO
ZCUSTTYPE_EXTNSN-DIST_CHANNEL .
MOVE ZVCUSTTYPE_EXTNS-DIVISON TO
ZCUSTTYPE_EXTNSN-DIVISON .
MOVE ZVCUSTTYPE_EXTNS-MANDT TO
ZCUSTTYPE_EXTNSN-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZCUSTTYPE_EXTNSN'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZCUSTTYPE_EXTNSN TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZCUSTTYPE_EXTNSN'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_API_CHK_TABLE................................*
FORM GET_DATA_ZV_API_CHK_TABLE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZAPI_CHK_TABLE_T WHERE
(VIM_WHERETAB) .
    CLEAR ZV_API_CHK_TABLE .
ZV_API_CHK_TABLE-MANDT =
ZAPI_CHK_TABLE_T-MANDT .
ZV_API_CHK_TABLE-FIELD_TYPE =
ZAPI_CHK_TABLE_T-FIELD_TYPE .
ZV_API_CHK_TABLE-FIELD_DESCR =
ZAPI_CHK_TABLE_T-FIELD_DESCR .
<VIM_TOTAL_STRUC> = ZV_API_CHK_TABLE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_API_CHK_TABLE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_API_CHK_TABLE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_API_CHK_TABLE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZAPI_CHK_TABLE_T WHERE
  FIELD_TYPE = ZV_API_CHK_TABLE-FIELD_TYPE AND
  FIELD_DESCR = ZV_API_CHK_TABLE-FIELD_DESCR .
    IF SY-SUBRC = 0.
    DELETE ZAPI_CHK_TABLE_T .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZAPI_CHK_TABLE_T WHERE
  FIELD_TYPE = ZV_API_CHK_TABLE-FIELD_TYPE AND
  FIELD_DESCR = ZV_API_CHK_TABLE-FIELD_DESCR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZAPI_CHK_TABLE_T.
    ENDIF.
ZAPI_CHK_TABLE_T-MANDT =
ZV_API_CHK_TABLE-MANDT .
ZAPI_CHK_TABLE_T-FIELD_TYPE =
ZV_API_CHK_TABLE-FIELD_TYPE .
ZAPI_CHK_TABLE_T-FIELD_DESCR =
ZV_API_CHK_TABLE-FIELD_DESCR .
    IF SY-SUBRC = 0.
    UPDATE ZAPI_CHK_TABLE_T ##WARN_OK.
    ELSE.
    INSERT ZAPI_CHK_TABLE_T .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_API_CHK_TABLE-UPD_FLAG,
STATUS_ZV_API_CHK_TABLE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_API_CHK_TABLE.
  SELECT SINGLE * FROM ZAPI_CHK_TABLE_T WHERE
FIELD_TYPE = ZV_API_CHK_TABLE-FIELD_TYPE AND
FIELD_DESCR = ZV_API_CHK_TABLE-FIELD_DESCR .
ZV_API_CHK_TABLE-MANDT =
ZAPI_CHK_TABLE_T-MANDT .
ZV_API_CHK_TABLE-FIELD_TYPE =
ZAPI_CHK_TABLE_T-FIELD_TYPE .
ZV_API_CHK_TABLE-FIELD_DESCR =
ZAPI_CHK_TABLE_T-FIELD_DESCR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_API_CHK_TABLE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_API_CHK_TABLE-FIELD_TYPE TO
ZAPI_CHK_TABLE_T-FIELD_TYPE .
MOVE ZV_API_CHK_TABLE-FIELD_DESCR TO
ZAPI_CHK_TABLE_T-FIELD_DESCR .
MOVE ZV_API_CHK_TABLE-MANDT TO
ZAPI_CHK_TABLE_T-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZAPI_CHK_TABLE_T'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZAPI_CHK_TABLE_T TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZAPI_CHK_TABLE_T'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_API_COMM_LIST................................*
FORM GET_DATA_ZV_API_COMM_LIST.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZAPI_COMMON_LIST WHERE
(VIM_WHERETAB) .
    CLEAR ZV_API_COMM_LIST .
ZV_API_COMM_LIST-MANDT =
ZAPI_COMMON_LIST-MANDT .
ZV_API_COMM_LIST-ACT_TYPE =
ZAPI_COMMON_LIST-ACT_TYPE .
ZV_API_COMM_LIST-FIELD_TYPE =
ZAPI_COMMON_LIST-FIELD_TYPE .
ZV_API_COMM_LIST-CCODE =
ZAPI_COMMON_LIST-BUKRS .
ZV_API_COMM_LIST-MANDATORY =
ZAPI_COMMON_LIST-MANDATORY .
ZV_API_COMM_LIST-FIELD_KEY =
ZAPI_COMMON_LIST-FIELD_KEY .
ZV_API_COMM_LIST-KEY_DESCR =
ZAPI_COMMON_LIST-KEY_DESCR .
<VIM_TOTAL_STRUC> = ZV_API_COMM_LIST.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_API_COMM_LIST .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_API_COMM_LIST.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_API_COMM_LIST-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZAPI_COMMON_LIST WHERE
  ACT_TYPE = ZV_API_COMM_LIST-ACT_TYPE AND
  FIELD_TYPE = ZV_API_COMM_LIST-FIELD_TYPE AND
  BUKRS = ZV_API_COMM_LIST-CCODE AND
  MANDATORY = ZV_API_COMM_LIST-MANDATORY AND
  FIELD_KEY = ZV_API_COMM_LIST-FIELD_KEY .
    IF SY-SUBRC = 0.
    DELETE ZAPI_COMMON_LIST .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZAPI_COMMON_LIST WHERE
  ACT_TYPE = ZV_API_COMM_LIST-ACT_TYPE AND
  FIELD_TYPE = ZV_API_COMM_LIST-FIELD_TYPE AND
  BUKRS = ZV_API_COMM_LIST-CCODE AND
  MANDATORY = ZV_API_COMM_LIST-MANDATORY AND
  FIELD_KEY = ZV_API_COMM_LIST-FIELD_KEY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZAPI_COMMON_LIST.
    ENDIF.
ZAPI_COMMON_LIST-MANDT =
ZV_API_COMM_LIST-MANDT .
ZAPI_COMMON_LIST-ACT_TYPE =
ZV_API_COMM_LIST-ACT_TYPE .
ZAPI_COMMON_LIST-FIELD_TYPE =
ZV_API_COMM_LIST-FIELD_TYPE .
ZAPI_COMMON_LIST-BUKRS =
ZV_API_COMM_LIST-CCODE .
ZAPI_COMMON_LIST-MANDATORY =
ZV_API_COMM_LIST-MANDATORY .
ZAPI_COMMON_LIST-FIELD_KEY =
ZV_API_COMM_LIST-FIELD_KEY .
ZAPI_COMMON_LIST-KEY_DESCR =
ZV_API_COMM_LIST-KEY_DESCR .
    IF SY-SUBRC = 0.
    UPDATE ZAPI_COMMON_LIST ##WARN_OK.
    ELSE.
    INSERT ZAPI_COMMON_LIST .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_API_COMM_LIST-UPD_FLAG,
STATUS_ZV_API_COMM_LIST-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_API_COMM_LIST.
  SELECT SINGLE * FROM ZAPI_COMMON_LIST WHERE
ACT_TYPE = ZV_API_COMM_LIST-ACT_TYPE AND
FIELD_TYPE = ZV_API_COMM_LIST-FIELD_TYPE AND
BUKRS = ZV_API_COMM_LIST-CCODE AND
MANDATORY = ZV_API_COMM_LIST-MANDATORY AND
FIELD_KEY = ZV_API_COMM_LIST-FIELD_KEY .
ZV_API_COMM_LIST-MANDT =
ZAPI_COMMON_LIST-MANDT .
ZV_API_COMM_LIST-ACT_TYPE =
ZAPI_COMMON_LIST-ACT_TYPE .
ZV_API_COMM_LIST-FIELD_TYPE =
ZAPI_COMMON_LIST-FIELD_TYPE .
ZV_API_COMM_LIST-CCODE =
ZAPI_COMMON_LIST-BUKRS .
ZV_API_COMM_LIST-MANDATORY =
ZAPI_COMMON_LIST-MANDATORY .
ZV_API_COMM_LIST-FIELD_KEY =
ZAPI_COMMON_LIST-FIELD_KEY .
ZV_API_COMM_LIST-KEY_DESCR =
ZAPI_COMMON_LIST-KEY_DESCR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_API_COMM_LIST USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_API_COMM_LIST-ACT_TYPE TO
ZAPI_COMMON_LIST-ACT_TYPE .
MOVE ZV_API_COMM_LIST-FIELD_TYPE TO
ZAPI_COMMON_LIST-FIELD_TYPE .
MOVE ZV_API_COMM_LIST-CCODE TO
ZAPI_COMMON_LIST-BUKRS .
MOVE ZV_API_COMM_LIST-MANDATORY TO
ZAPI_COMMON_LIST-MANDATORY .
MOVE ZV_API_COMM_LIST-FIELD_KEY TO
ZAPI_COMMON_LIST-FIELD_KEY .
MOVE ZV_API_COMM_LIST-MANDT TO
ZAPI_COMMON_LIST-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZAPI_COMMON_LIST'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZAPI_COMMON_LIST TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZAPI_COMMON_LIST'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_BP_SOFFICE...................................*
FORM GET_DATA_ZV_BP_SOFFICE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZBP_SOFFICE_TABL WHERE
(VIM_WHERETAB) .
    CLEAR ZV_BP_SOFFICE .
ZV_BP_SOFFICE-MANDT =
ZBP_SOFFICE_TABL-MANDT .
ZV_BP_SOFFICE-SALES_ORG =
ZBP_SOFFICE_TABL-SALES_ORG .
ZV_BP_SOFFICE-REGION =
ZBP_SOFFICE_TABL-REGION .
ZV_BP_SOFFICE-DIVISON =
ZBP_SOFFICE_TABL-DIVISON .
ZV_BP_SOFFICE-SOFFICE =
ZBP_SOFFICE_TABL-SOFFICE .
<VIM_TOTAL_STRUC> = ZV_BP_SOFFICE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_BP_SOFFICE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_BP_SOFFICE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_BP_SOFFICE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZBP_SOFFICE_TABL WHERE
  SALES_ORG = ZV_BP_SOFFICE-SALES_ORG AND
  REGION = ZV_BP_SOFFICE-REGION AND
  DIVISON = ZV_BP_SOFFICE-DIVISON .
    IF SY-SUBRC = 0.
    DELETE ZBP_SOFFICE_TABL .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZBP_SOFFICE_TABL WHERE
  SALES_ORG = ZV_BP_SOFFICE-SALES_ORG AND
  REGION = ZV_BP_SOFFICE-REGION AND
  DIVISON = ZV_BP_SOFFICE-DIVISON .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZBP_SOFFICE_TABL.
    ENDIF.
ZBP_SOFFICE_TABL-MANDT =
ZV_BP_SOFFICE-MANDT .
ZBP_SOFFICE_TABL-SALES_ORG =
ZV_BP_SOFFICE-SALES_ORG .
ZBP_SOFFICE_TABL-REGION =
ZV_BP_SOFFICE-REGION .
ZBP_SOFFICE_TABL-DIVISON =
ZV_BP_SOFFICE-DIVISON .
ZBP_SOFFICE_TABL-SOFFICE =
ZV_BP_SOFFICE-SOFFICE .
    IF SY-SUBRC = 0.
    UPDATE ZBP_SOFFICE_TABL ##WARN_OK.
    ELSE.
    INSERT ZBP_SOFFICE_TABL .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_BP_SOFFICE-UPD_FLAG,
STATUS_ZV_BP_SOFFICE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_BP_SOFFICE.
  SELECT SINGLE * FROM ZBP_SOFFICE_TABL WHERE
SALES_ORG = ZV_BP_SOFFICE-SALES_ORG AND
REGION = ZV_BP_SOFFICE-REGION AND
DIVISON = ZV_BP_SOFFICE-DIVISON .
ZV_BP_SOFFICE-MANDT =
ZBP_SOFFICE_TABL-MANDT .
ZV_BP_SOFFICE-SALES_ORG =
ZBP_SOFFICE_TABL-SALES_ORG .
ZV_BP_SOFFICE-REGION =
ZBP_SOFFICE_TABL-REGION .
ZV_BP_SOFFICE-DIVISON =
ZBP_SOFFICE_TABL-DIVISON .
ZV_BP_SOFFICE-SOFFICE =
ZBP_SOFFICE_TABL-SOFFICE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_BP_SOFFICE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_BP_SOFFICE-SALES_ORG TO
ZBP_SOFFICE_TABL-SALES_ORG .
MOVE ZV_BP_SOFFICE-REGION TO
ZBP_SOFFICE_TABL-REGION .
MOVE ZV_BP_SOFFICE-DIVISON TO
ZBP_SOFFICE_TABL-DIVISON .
MOVE ZV_BP_SOFFICE-MANDT TO
ZBP_SOFFICE_TABL-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZBP_SOFFICE_TABL'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZBP_SOFFICE_TABL TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZBP_SOFFICE_TABL'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_MAP_TABLE_BP.................................*
FORM GET_DATA_ZV_MAP_TABLE_BP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZMAP_TABLE_BP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_MAP_TABLE_BP .
ZV_MAP_TABLE_BP-MANDT =
ZMAP_TABLE_BP-MANDT .
ZV_MAP_TABLE_BP-PURPOSE =
ZMAP_TABLE_BP-PURPOSE .
ZV_MAP_TABLE_BP-SUBS_FIELD =
ZMAP_TABLE_BP-SUBS_FIELD .
ZV_MAP_TABLE_BP-MAPP_FIELD =
ZMAP_TABLE_BP-MAPP_FIELD .
<VIM_TOTAL_STRUC> = ZV_MAP_TABLE_BP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_MAP_TABLE_BP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_MAP_TABLE_BP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_MAP_TABLE_BP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZMAP_TABLE_BP WHERE
  PURPOSE = ZV_MAP_TABLE_BP-PURPOSE AND
  SUBS_FIELD = ZV_MAP_TABLE_BP-SUBS_FIELD .
    IF SY-SUBRC = 0.
    DELETE ZMAP_TABLE_BP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZMAP_TABLE_BP WHERE
  PURPOSE = ZV_MAP_TABLE_BP-PURPOSE AND
  SUBS_FIELD = ZV_MAP_TABLE_BP-SUBS_FIELD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZMAP_TABLE_BP.
    ENDIF.
ZMAP_TABLE_BP-MANDT =
ZV_MAP_TABLE_BP-MANDT .
ZMAP_TABLE_BP-PURPOSE =
ZV_MAP_TABLE_BP-PURPOSE .
ZMAP_TABLE_BP-SUBS_FIELD =
ZV_MAP_TABLE_BP-SUBS_FIELD .
ZMAP_TABLE_BP-MAPP_FIELD =
ZV_MAP_TABLE_BP-MAPP_FIELD .
    IF SY-SUBRC = 0.
    UPDATE ZMAP_TABLE_BP ##WARN_OK.
    ELSE.
    INSERT ZMAP_TABLE_BP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_MAP_TABLE_BP-UPD_FLAG,
STATUS_ZV_MAP_TABLE_BP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_MAP_TABLE_BP.
  SELECT SINGLE * FROM ZMAP_TABLE_BP WHERE
PURPOSE = ZV_MAP_TABLE_BP-PURPOSE AND
SUBS_FIELD = ZV_MAP_TABLE_BP-SUBS_FIELD .
ZV_MAP_TABLE_BP-MANDT =
ZMAP_TABLE_BP-MANDT .
ZV_MAP_TABLE_BP-PURPOSE =
ZMAP_TABLE_BP-PURPOSE .
ZV_MAP_TABLE_BP-SUBS_FIELD =
ZMAP_TABLE_BP-SUBS_FIELD .
ZV_MAP_TABLE_BP-MAPP_FIELD =
ZMAP_TABLE_BP-MAPP_FIELD .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_MAP_TABLE_BP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_MAP_TABLE_BP-PURPOSE TO
ZMAP_TABLE_BP-PURPOSE .
MOVE ZV_MAP_TABLE_BP-SUBS_FIELD TO
ZMAP_TABLE_BP-SUBS_FIELD .
MOVE ZV_MAP_TABLE_BP-MANDT TO
ZMAP_TABLE_BP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZMAP_TABLE_BP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZMAP_TABLE_BP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZMAP_TABLE_BP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
