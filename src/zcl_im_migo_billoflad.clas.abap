class ZCL_IM_MIGO_BILLOFLAD definition
  public
  final
  create public .

public section.

  interfaces IF_EX_MB_CHECK_LINE_BADI .
protected section.
private section.
ENDCLASS.



CLASS ZCL_IM_MIGO_BILLOFLAD IMPLEMENTATION.


METHOD IF_EX_MB_CHECK_LINE_BADI~CHECK_LINE.

  DATA : V_BSART TYPE EKKO-BSART.
  DATA : V_LIFNR TYPE EKKO-LIFNR.
  DATA : V_PLANT TYPE EKPO-WERKS.
  DATA : V_BILL TYPE MKPF-FRBNR.
  DATA:  V_YEAR TYPE MKPF-MJAHR.

  DATA : V_LFBNR TYPE MSEG-LFBNR.

  DATA : V_VENDOR TYPE EKKO-LIFNR.
  DATA : V_WERKS TYPE MSEG-MBLNR.
  DATA : V_MBLNR TYPE MSEG-MBLNR.

  DATA : BILL TYPE TY_T_MSEG.

  DATA : GT_EKKO TYPE TABLE OF EKKO,
         WA_EKKO TYPE EKKO.

  DATA: GT_EKPO TYPE TABLE OF EKPO,
        WA_EKPO TYPE EKPO.

  TYPES : BEGIN OF GS_MKPF,
            MBLNR TYPE MKPF-MBLNR,
            BKTXT TYPE MKPF-BKTXT,
            FRBNR TYPE MKPF-FRBNR,
         END OF GS_MKPF.

  DATA : GT_MKPF TYPE TABLE OF GS_MKPF ,
         WA_MKPF TYPE GS_MKPF.

  TYPES : BEGIN OF GS_MSEG,

          MBLNR TYPE MSEG-MBLNR,
          MJAHR TYPE MSEG-MJAHR,
          BWART TYPE MSEG-BWART,
          WERKS TYPE MSEG-WERKS,
          LIFNR TYPE MSEG-LIFNR,
          EBELN TYPE MSEG-EBELN,
          SMBLN TYPE MSEG-SMBLN,
          LFBNR TYPE MSEG-LFBNR,

          ELIKZ TYPE MSEG-ELIKZ,

      END OF GS_MSEG.

  DATA : GT_MSEG TYPE TABLE OF GS_MSEG ,
         WA_MSEG TYPE GS_MSEG.


  TYPES : BEGIN OF GS_FINAL,

        MBLNR TYPE MSEG-MBLNR,
        MJAHR TYPE MSEG-MJAHR,
        BWART TYPE MSEG-BWART,
        WERKS TYPE MSEG-WERKS,
        LIFNR TYPE MSEG-LIFNR,
        SMBLN TYPE MSEG-SMBLN,
        BILLAD TYPE MKPF-FRBNR,
        LFBNR TYPE MSEG-LFBNR,
        EBELN TYPE MSEG-EBELN,

        ELIKZ TYPE MSEG-ELIKZ,

       END OF GS_FINAL.

  DATA : GT_FINAL TYPE TABLE OF GS_FINAL,
         WA_FINAL TYPE GS_FINAL.


  SELECT *  FROM EKKO INTO TABLE  GT_EKKO  WHERE EBELN = IS_MSEG-EBELN.

  IF GT_EKKO[] IS NOT INITIAL.

    SELECT * FROM EKPO INTO TABLE GT_EKPO FOR ALL ENTRIES IN GT_EKKO WHERE EBELN = GT_EKKO-EBELN.

  ENDIF.

  IF IS_MKPF-FRBNR IS NOT INITIAL.

    SELECT MBLNR BKTXT FRBNR FROM MKPF INTO TABLE GT_MKPF WHERE FRBNR = IS_MKPF-FRBNR.

  ENDIF.

  IF GT_MKPF[] IS NOT INITIAL.

    SELECT
          MBLNR
          MJAHR
          BWART
          WERKS
          LIFNR
          EBELN
          SMBLN
          LFBNR
          ELIKZ

     FROM MSEG INTO TABLE GT_MSEG FOR ALL ENTRIES IN GT_MKPF WHERE MBLNR = GT_MKPF-MBLNR." AND SMBLN NE GT_MKPF-MBLNR.

  ENDIF.


  LOOP AT GT_EKKO INTO WA_EKKO.

    SELECT SINGLE BSART FROM EKKO INTO V_BSART WHERE EBELN = WA_EKKO-EBELN.

    SELECT SINGLE LIFNR FROM EKKO INTO V_LIFNR WHERE EBELN = WA_EKKO-EBELN.

    CLEAR WA_EKKO.

  ENDLOOP.

  LOOP AT GT_EKPO INTO WA_EKPO.

    SELECT WERKS UP TO 1 ROWS FROM EKPO INTO V_PLANT WHERE EBELN = WA_EKPO-EBELN ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

    CLEAR WA_EKPO.

  ENDLOOP.

*  BREAK-POINT.

  LOOP AT GT_MKPF INTO WA_MKPF.

    WA_FINAL-BILLAD = WA_MKPF-FRBNR.

    READ TABLE GT_MSEG INTO WA_MSEG WITH KEY MBLNR = WA_MKPF-MBLNR.

    IF SY-SUBRC = 0.

      WA_FINAL-MBLNR = WA_MSEG-MBLNR.
      WA_FINAL-MJAHR = WA_MSEG-MJAHR.
      WA_FINAL-WERKS = WA_MSEG-WERKS.
      WA_FINAL-BWART = WA_MSEG-BWART.
      WA_FINAL-LIFNR = WA_MSEG-LIFNR.
      WA_FINAL-LFBNR = WA_MSEG-LFBNR.
      WA_FINAL-SMBLN = WA_MSEG-SMBLN.

      WA_FINAL-EBELN = WA_MSEG-EBELN.
      WA_FINAL-ELIKZ = WA_MSEG-ELIKZ.

      V_WERKS = WA_MSEG-WERKS.
      V_VENDOR = WA_MSEG-LIFNR.
      V_MBLNR = WA_MSEG-MBLNR.

      SELECT LFBNR UP TO 1 ROWS FROM MSEG INTO V_LFBNR WHERE MBLNR = WA_MSEG-MBLNR ORDER BY PRIMARY KEY.
      ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

      SELECT MJAHR UP TO 1 ROWS FROM MSEG INTO V_YEAR WHERE MBLNR = WA_MSEG-MBLNR ORDER BY PRIMARY KEY.
      ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

    ENDIF.

    APPEND WA_FINAL TO GT_FINAL.


    IF WA_FINAL-EBELN EQ IS_MSEG-EBELN.

      DELETE GT_FINAL WHERE LFBNR = V_LFBNR.

    ENDIF.

    CLEAR WA_FINAL.

  ENDLOOP.

*
  CASE V_BSART.

    WHEN 'ZNB'.

      IF IS_MKPF-BLART = 'WE'.

        IF IS_MKPF-FRBNR IS NOT INITIAL ."AND IS_MSEG-BWART EQ '101'.

          IF IS_MSEG-BWART NE '102'.

            LOOP AT GT_FINAL INTO WA_FINAL." WHERE BWART NE '102' .

              IF IS_MKPF-FRBNR EQ WA_FINAL-BILLAD AND WA_FINAL-WERKS EQ V_PLANT AND WA_FINAL-LIFNR EQ V_LIFNR AND WA_FINAL-MJAHR EQ V_YEAR.

                MESSAGE 'Bill Of Lading Column In LR Number already Exists in the same vendor' TYPE 'E' DISPLAY LIKE 'I'.

              ENDIF.

            ENDLOOP.

          ENDIF.

        ENDIF.

      ENDIF.



    WHEN 'ZIM'.

      IF IS_MKPF-BLART = 'WE'.

        IF IS_MKPF-FRBNR IS NOT INITIAL ."AND IS_MSEG-BWART EQ '101'.

          IF IS_MSEG-BWART NE '102'.

            LOOP AT GT_FINAL INTO WA_FINAL.

              IF IS_MKPF-FRBNR EQ WA_FINAL-BILLAD AND WA_FINAL-WERKS EQ V_PLANT AND WA_FINAL-LIFNR EQ V_LIFNR.

                MESSAGE 'Bill Of Lading Column In LR Number already Exists in the same vendor' TYPE 'E' DISPLAY LIKE 'I'.

              ENDIF.

            ENDLOOP.

          ENDIF.

        ENDIF.

      ENDIF.

    WHEN 'ZSC'.

      IF IS_MKPF-BLART = 'WE'.

        IF IS_MKPF-FRBNR IS NOT INITIAL ."AND IS_MSEG-BWART EQ '101'.

          IF IS_MSEG-BWART NE '102'.

            LOOP AT GT_FINAL INTO WA_FINAL.

              IF IS_MKPF-FRBNR EQ WA_FINAL-BILLAD AND WA_FINAL-WERKS EQ V_PLANT AND WA_FINAL-LIFNR EQ V_LIFNR.

                MESSAGE 'Bill Of Lading Column In LR Number already Exists in the same vendor' TYPE 'E' DISPLAY LIKE 'I'.

              ENDIF.

            ENDLOOP.

          ENDIF.

        ENDIF.

      ENDIF.
*    WHEN 'UB'.
*
*      IF IS_MKPF-BLART = 'WE'.
*
*        IF IS_MKPF-FRBNR IS NOT INITIAL ."AND IS_MSEG-BWART EQ '101'.
*
*          IF IS_MSEG-BWART NE '102'.
*
*            LOOP AT GT_FINAL INTO WA_FINAL." WHERE BWART NE '102' .
*
*              IF IS_MKPF-FRBNR EQ WA_FINAL-BILLAD AND WA_FINAL-WERKS EQ V_PLANT AND WA_FINAL-LIFNR EQ V_LIFNR.
*
*                MESSAGE 'Bill Of Lading Column In LR Number already Exists in the same Plant' TYPE 'E' DISPLAY LIKE 'I'.
*
*              ENDIF.
*
*            ENDLOOP.
*
*          ENDIF.
*
*        ENDIF.
*
*      ENDIF.
*    WHEN 'ZUB'.
*
*      IF IS_MKPF-BLART = 'WE'.
*
*        IF IS_MKPF-FRBNR IS NOT INITIAL ."AND IS_MSEG-BWART EQ '101'.
*
*          IF IS_MSEG-BWART NE '102'.
*
*            LOOP AT GT_FINAL INTO WA_FINAL." WHERE BWART NE '102' .
*
*              IF IS_MKPF-FRBNR EQ WA_FINAL-BILLAD AND WA_FINAL-WERKS EQ V_PLANT AND WA_FINAL-LIFNR EQ V_LIFNR.
*
*                MESSAGE 'Bill Of Lading Column In LR Number already Exists in the same Plant' TYPE 'E' DISPLAY LIKE 'I'.
*
*              ENDIF.
*
*            ENDLOOP.
*
*          ENDIF.
*
*        ENDIF.
*
*      ENDIF.
*
  ENDCASE.

ENDMETHOD.
ENDCLASS.
