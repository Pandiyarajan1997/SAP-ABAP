FUNCTION ZVENDOR_EVALUATION.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(S_LIFNR) TYPE  LIFNR OPTIONAL
*"     VALUE(FRM_DATE) TYPE  BUDAT
*"     VALUE(TO_DATE) TYPE  BUDAT
*"  TABLES
*"      IT_VEND_EVA_OUT STRUCTURE  ZSTR_VENDOR_EVA_OUT
*"----------------------------------------------------------------------


DATA : WA_ZSTR_VENDOR TYPE ZSTR_VENDOR_EVA_OUT.

  TYPES:BEGIN OF TY_MSEG,
  MBLNR TYPE MSEG-MBLNR,
  MJAHR TYPE MSEG-MJAHR,
  ZEILE TYPE MSEG-ZEILE, "YEAR
  BWART TYPE MSEG-BWART,
  MATNR TYPE MSEG-MATNR,
  WERKS TYPE MSEG-WERKS,
  LIFNR TYPE MSEG-LIFNR,
  MENGE TYPE MSEG-MENGE,
  EBELN TYPE MSEG-EBELN,
  EBELP TYPE MSEG-EBELP,
  LFBNR TYPE MSEG-LFBNR,
  SMBLN TYPE MSEG-SMBLN,
  BUDAT TYPE MSEG-BUDAT_MKPF,
  END OF TY_MSEG.

DATA: IT_MSEG TYPE TABLE OF TY_MSEG,
      WA_MSEG TYPE TY_MSEG.
DATA: IT_MSEG_TEM TYPE TABLE OF TY_MSEG,
      WA_MSEG_TEM TYPE TY_MSEG.

TYPES:BEGIN OF TY_MSEG1,
  MBLNR TYPE MSEG-MBLNR,
  BWART TYPE MSEG-BWART,
  MJAHR TYPE MSEG-MJAHR,
  ZEILE TYPE MSEG-ZEILE, "year
  MATNR TYPE MSEG-MATNR,
  WERKS TYPE MSEG-WERKS,
  LIFNR TYPE MSEG-LIFNR,
  MENGE TYPE MSEG-MENGE,
  EBELN TYPE MSEG-EBELN,
  EBELP TYPE MSEG-EBELP,
  LFBNR TYPE MSEG-LFBNR,
  SMBLN TYPE MSEG-SMBLN,
  BUDAT TYPE MSEG-BUDAT_MKPF,
  MONTH TYPE INT2,
  YEAR  TYPE MSEG-MJAHR,
  END OF TY_MSEG1.

DATA: IT_MSEG1 TYPE TABLE OF TY_MSEG1,
      WA_MSEG1 TYPE TY_MSEG1.

DATA: IT_MSEG2 TYPE TABLE OF TY_MSEG1,
      WA_MSEG2 TYPE TY_MSEG1.

DATA: IT_MSEG_PORE TYPE TABLE OF TY_MSEG1,
      WA_MSEG_PORE TYPE TY_MSEG1.

DATA: IT_QAMS TYPE TABLE OF TY_MSEG1,
      WA_QAMS TYPE TY_MSEG1.

DATA: IT_MARA TYPE TABLE OF MARA,
      WA_MARA TYPE MARA.

DATA: IT_MAKT TYPE TABLE OF MAKT,
      WA_MAKT TYPE MAKT.

TYPES:BEGIN OF TY_LFA1,
  LIFNR TYPE LFA1-LIFNR,
  LAND1 TYPE LFA1-LAND1,
  NAME1 TYPE LFA1-NAME1,
  KTOKK TYPE LFA1-KTOKK,
  END OF TY_LFA1.

DATA: IT_LFA1 TYPE TABLE OF TY_LFA1,
      WA_LFA1 TYPE TY_LFA1.

TYPES : BEGIN OF TY_EKKO,
  EBELN TYPE EKKO-EBELN,
  BSART TYPE EKKO-BSART,
  END OF TY_EKKO.

DATA: IT_EKKO TYPE TABLE OF TY_EKKO,
      WA_EKKO TYPE TY_EKKO.

TYPES:BEGIN OF TY_EKET,
  EBELN TYPE EKET-EBELN,
  EBELP TYPE EKET-EBELP,
  ETENR TYPE EKET-ETENR,
  EINDT TYPE EKET-EINDT,
  MENGE TYPE EKET-MENGE,
  BEDAT TYPE EKET-BEDAT,
  END OF TY_EKET.

DATA: IT_EKET TYPE TABLE OF TY_EKET,
      WA_EKET TYPE TY_EKET.

TYPES:BEGIN OF TY_EKET1.
        INCLUDE TYPE TY_EKET.
TYPES : MONTH TYPE INT2.
TYPES : YEAR  TYPE MSEG-MJAHR.
TYPES:END OF TY_EKET1.

DATA: IT_EKET1 TYPE TABLE OF TY_EKET1,
      WA_EKET1 TYPE TY_EKET1.


DATA: IT_NUM TYPE TABLE OF TY_EKET,
      WA_NUM TYPE TY_EKET.

DATA: EKET_QUN TYPE EKET-MENGE,
      MSEG_QUN TYPE MSEG-MENGE,
      QALS_QUA TYPE QALS-LMENGE02.

TYPES:BEGIN OF TY_DAT,
        DATE TYPE SY-DATUM,
      END OF TY_DAT.

DATA: IT_DT TYPE TABLE OF TY_DAT,
      WA_DT TYPE TY_DAT.

DATA: IT_MON TYPE TABLE OF T247,
      WA_MON TYPE T247.

DATA: MON_YER TYPE CHAR10.


TYPES:BEGIN OF TY_FINAL,
  MATNR TYPE MSEG-MATNR,
  MAKTX TYPE MAKT-MAKTX,
  LIFNR TYPE LFA1-LIFNR,
  NAME1 TYPE LFA1-NAME1,
  WERKS TYPE MSEG-WERKS,
  BUDAT TYPE MSEG-BUDAT_MKPF,
  MONTH TYPE INT2,
  MON_DES TYPE CHAR10,
  QUANT TYPE MSEG-MENGE,
  QUALI TYPE QALS-LMENGE02,
  KBETR TYPE MSEG-MENGE,   "AMOUNT
  SERVC TYPE INT2,
  TOTAL TYPE INT2,
  YEAR TYPE MSEG-MJAHR, "ONLY TYPE IS DECLARE NOT IMPLEMENT
  COUNT TYPE I,
  END OF TY_FINAL.

DATA: IT_FINAL TYPE TABLE OF TY_FINAL,
      WA_FINAL TYPE TY_FINAL.

DATA: IT_FINAL3 TYPE TABLE OF TY_FINAL,
      WA_FINAL3 TYPE TY_FINAL.

DATA: IT_FINAL1 TYPE TABLE OF TY_FINAL,
      WA_FINAL1 TYPE TY_FINAL.

DATA: IT_FINAL2 TYPE TABLE OF TY_FINAL,
      WA_FINAL2 TYPE TY_FINAL.

DATA: IT_FINAL_AMT TYPE TABLE OF TY_FINAL,
      WA_FINAL_AMT TYPE TY_FINAL.

DATA: IT_FINAL_AMT1 TYPE TABLE OF TY_FINAL,
      WA_FINAL_AMT1 TYPE TY_FINAL.

DATA: IT_PRICE TYPE TABLE OF TY_FINAL,
      WA_PRICE TYPE TY_FINAL.

TYPES:BEGIN OF TY_LESAMT,
  MATNR TYPE MARA-MATNR,
  LIFNR TYPE LFA1-LIFNR,
  WERKS TYPE T001W-WERKS,
  AMUNT TYPE  MSEG-MENGE,
  MONTH TYPE INT2,
  END OF TY_LESAMT.

DATA: IT_LESAMT TYPE TABLE OF TY_LESAMT,
      WA_LESAMT TYPE TY_LESAMT.

DATA: IT_LESAMT_IV TYPE TABLE OF TY_LESAMT,
      WA_LESAMT_IV TYPE TY_LESAMT.

DATA: IT_LESAMT1 TYPE TABLE OF TY_LESAMT,
      WA_LESAMT1 TYPE TY_LESAMT.

DATA: IT_LESAMT1_IV TYPE TABLE OF TY_LESAMT,
      WA_LESAMT1_IV TYPE TY_LESAMT.

TYPES: BEGIN OF TY_QALS,
  PRUEFLOS TYPE QALS-PRUEFLOS,
  WERK TYPE QALS-WERK,
  SELMATNR TYPE QALS-SELMATNR,
  SELLIFNR TYPE QALS-SELLIFNR,
  EBELN TYPE QALS-EBELN,
  EBELP TYPE QALS-EBELP,
  BUDAT TYPE QALS-BUDAT,
  LMENGE02 TYPE QALS-LMENGE02,
  LMENGE04 TYPE QALS-LMENGE04,
  END OF TY_QALS.

DATA: IT_QALS TYPE TABLE OF TY_QALS,
      WA_QALS TYPE TY_QALS.

TYPES:BEGIN OF TY_QALS1.
        INCLUDE TYPE TY_QALS .
TYPES : MONTH TYPE INT2.
TYPES : YEAR TYPE MSEG-MJAHR.
TYPES: END OF TY_QALS1.

DATA: IT_QALS1 TYPE TABLE OF TY_QALS1,
      WA_QALS1 TYPE TY_QALS1.

TYPES:BEGIN OF TY_EKBE,
  EBELN TYPE EKBE-EBELN,
  EBELP TYPE EKBE-EBELP,
  ZEKKN TYPE EKBE-ZEKKN,
  VGABE TYPE EKBE-VGABE,
  GJAHR TYPE EKBE-GJAHR,
  BELNR TYPE EKBE-BELNR,
  BUZEI TYPE EKBE-BUZEI,
  BWART TYPE EKBE-BWART,
  BUDAT TYPE EKBE-BUDAT,
  MENGE TYPE EKBE-MENGE,
  DMBTR TYPE EKBE-DMBTR,
  WAERS TYPE EKBE-WAERS,
  LFBNR TYPE EKBE-LFBNR, "ADDED PR@$@TH ON 14.01.2019
  MATNR TYPE EKBE-MATNR,
  WERKS TYPE EKBE-WERKS,
  END OF TY_EKBE.

DATA: IT_EKBE TYPE TABLE OF TY_EKBE,
      WA_EKBE TYPE TY_EKBE,
      WA_EKBE_TEM TYPE TY_EKBE.

TYPES:BEGIN OF TY_EKBE1,
    EBELN TYPE EKBE-EBELN,
    EBELP TYPE EKBE-EBELP,
    ZEKKN TYPE EKBE-ZEKKN,
    VGABE TYPE EKBE-VGABE,
    GJAHR TYPE EKBE-GJAHR,
    BELNR TYPE EKBE-BELNR,
    BUZEI TYPE EKBE-BUZEI,
    BWART TYPE EKBE-BWART,
    BUDAT TYPE EKBE-BUDAT,
    MENGE TYPE EKBE-MENGE,
    DMBTR TYPE EKBE-DMBTR,
    WAERS TYPE EKBE-WAERS,
    LFBNR TYPE EKBE-LFBNR, "ADDED PR@$@TH ON 14.01.2019
    MATNR TYPE EKBE-MATNR,
    WERKS TYPE EKBE-WERKS,
    MONTH TYPE INT2,
    TOTAL TYPE EKBE-DMBTR,
END OF TY_EKBE1.

DATA: IT_EKBE1 TYPE TABLE OF TY_EKBE1,
      WA_EKBE1 TYPE TY_EKBE1.

DATA: IT_TEM_EKBE TYPE TABLE OF TY_EKBE1,
      WA_TEM_EKBE TYPE TY_EKBE1.

DATA: IT_FIELDCAT TYPE TABLE OF SLIS_FIELDCAT_ALV,
      WA_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

DATA: IT_HEADER TYPE SLIS_T_LISTHEADER,
      WA_HEADER TYPE SLIS_LISTHEADER.

DATA : LAYOUT TYPE SLIS_LAYOUT_ALV.

DATA: MATNR_LOW TYPE MSEG-MATNR,
      MATNR_HIG TYPE MSEG-MATNR,
      MATNR_CON TYPE CHAR50.

DATA: LIFNR_LOW TYPE MSEG-LIFNR,
      LIFNR_HIG TYPE MSEG-LIFNR,
      LIFNR_CON TYPE CHAR50.

DATA: WERKS_LOW TYPE MSEG-WERKS,
      WERKS_HIG TYPE MSEG-WERKS,
      WERKS_CON TYPE CHAR50.

DATA: BUDAT_LOW TYPE MSEG-BUDAT_MKPF,
      BUDAT_HIG TYPE MSEG-BUDAT_MKPF,
      BUDAT_CON TYPE CHAR50.

DATA: BUDAT_LOW_FM TYPE SY-DATUM,
      BUDAT_HIG_FM TYPE SY-DATUM.

DATA: MON TYPE I,
      YER TYPE I.

DATA: DATLOW TYPE SY-DATUM,
      DATHIG TYPE SY-DATUM.

DATA: A017_MON TYPE I,
      A017_YER TYPE I.

DATA: PRICE_PER TYPE MSEG-MENGE.

DATA: TM TYPE I.

DATA: CO TYPE I.

DATA :REPT TYPE I.

TYPES:BEGIN OF TY_NUM,
  NUM TYPE I,
  END OF TY_NUM.

  CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
    EXPORTING
      I_DATE_FROM    = FRM_DATE
*     I_KEY_DAY_FROM =
      I_DATE_TO      = TO_DATE
*     I_KEY_DAY_TO   =
*     I_FLG_SEPARATE = ' '
    IMPORTING
*     E_DAYS         =
      E_MONTHS       = MON
*     E_YEARS        =
    .
  IF S_LIFNR IS NOT INITIAL OR ( FRM_DATE IS NOT INITIAL AND TO_DATE IS NOT INITIAL ).

    IF ( FRM_DATE IS NOT INITIAL AND TO_DATE IS NOT INITIAL ) .

      IF MON <= '12' .

        SELECT * FROM T247 INTO TABLE IT_MON WHERE SPRAS ='EN'.

        SELECT * FROM MARA INTO TABLE IT_MARA WHERE ( MTART EQ 'ROH' OR MTART EQ 'VERP' ) .

        IF IT_MARA IS NOT INITIAL .

          SELECT * FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_MARA WHERE MATNR EQ IT_MARA-MATNR.

SHIFT S_LIFNR LEFT DELETING LEADING '0' .

IF S_LIFNR IS NOT INITIAL .
          SELECT  LIFNR
                  LAND1
                  NAME1
                  KTOKK FROM LFA1 INTO TABLE IT_LFA1 WHERE LIFNR EQ S_LIFNR AND ( KTOKK = 'YB01' OR KTOKK = 'YBIV' ) .
ENDIF.

IF S_LIFNR IS INITIAL .
          SELECT  LIFNR
                  LAND1
                  NAME1
                  KTOKK FROM LFA1 INTO TABLE IT_LFA1 WHERE ( KTOKK = 'YB01' OR KTOKK = 'YBIV' ) .
ENDIF.


          IF IT_LFA1 IS NOT INITIAL.
IF S_LIFNR IS INITIAL.
            SELECT  MBLNR
                    MJAHR
                    ZEILE "year
                    BWART
                    MATNR
                    WERKS
                    LIFNR
                    MENGE
                    EBELN
                    EBELP
                    LFBNR
                    SMBLN
                    BUDAT_MKPF FROM MSEG INTO TABLE IT_MSEG FOR ALL ENTRIES IN IT_MARA WHERE MATNR EQ IT_MARA-MATNR AND BUDAT_MKPF GE FRM_DATE AND BUDAT_MKPF LE TO_DATE
                                                                                                         AND MATNR <> ' '  "AND LIFNR EQ S_LIFNR
                                                                                          AND LIFNR <> ' '  AND WERKS <> ' ' AND ( BWART = '101' OR BWART = '102' ) .
ENDIF.
 IF S_LIFNR IS NOT INITIAL.
    SELECT  MBLNR
                    MJAHR
                    ZEILE "year
                    BWART
                    MATNR
                    WERKS
                    LIFNR
                    MENGE
                    EBELN
                    EBELP
                    LFBNR
                    SMBLN
                    BUDAT_MKPF FROM MSEG INTO TABLE IT_MSEG FOR ALL ENTRIES IN IT_MARA WHERE MATNR EQ IT_MARA-MATNR AND BUDAT_MKPF GE FRM_DATE AND BUDAT_MKPF LE TO_DATE
                                                                                                         AND MATNR <> ' '  AND LIFNR EQ S_LIFNR
                                                                                          AND LIFNR <> ' '  AND WERKS <> ' ' AND ( BWART = '101' OR BWART = '102' ) .
   ENDIF.
            SELECT  EBELN
                    BSART FROM EKKO INTO TABLE IT_EKKO FOR ALL ENTRIES IN IT_MSEG WHERE EBELN = IT_MSEG-EBELN AND ( BSART = 'ZNB' OR BSART = 'ZIM' OR BSART = 'ZLP' ) .

            SELECT  EBELN
                    EBELP
                    ETENR
                    EINDT
                    MENGE
                    BEDAT FROM EKET INTO TABLE IT_EKET FOR ALL ENTRIES IN IT_MSEG WHERE EBELN EQ IT_MSEG-EBELN AND EBELP EQ IT_MSEG-EBELP.

            SELECT  PRUEFLOS
                    WERK
                    SELMATNR
                    SELLIFNR
                    EBELN
                    EBELP
                    BUDAT
                    LMENGE02
                    LMENGE04  FROM QALS INTO TABLE IT_QALS FOR ALL ENTRIES IN IT_MSEG WHERE EBELN EQ IT_MSEG-EBELN AND EBELP EQ IT_MSEG-EBELP
                                                                                         AND WERK EQ IT_MSEG-WERKS AND BUDAT EQ IT_MSEG-BUDAT
                                                                                         AND MATNR EQ IT_MSEG-MATNR AND LIFNR EQ IT_MSEG-LIFNR
                                                                                         AND SELMATNR <> ' ' AND SELLIFNR <> ' ' AND WERK <> ' '   .

            SELECT  EBELN
                    EBELP
                    ZEKKN
                    VGABE
                    GJAHR
                    BELNR
                    BUZEI
                    BWART
                    BUDAT
                    MENGE
                    DMBTR
                    WAERS
                    LFBNR
                    MATNR
                    WERKS FROM EKBE INTO TABLE IT_EKBE FOR ALL ENTRIES IN IT_MSEG WHERE EBELN = IT_MSEG-EBELN AND
                                                                                  EBELP = IT_MSEG-EBELP AND
                                                                                  BELNR = IT_MSEG-MBLNR AND
                                                                                  BUZEI = IT_MSEG-ZEILE .

ENDIF.
ENDIF.
ENDIF.
ENDIF.
ENDIF.

APPEND LINES OF IT_MSEG TO IT_MSEG_TEM .

  SORT IT_MSEG_TEM BY EBELN ASCENDING.

  DELETE ADJACENT DUPLICATES FROM IT_MSEG_TEM COMPARING EBELN .

  LOOP AT IT_MSEG_TEM INTO WA_MSEG_TEM.
    READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_MSEG_TEM-EBELN .
    IF WA_EKKO IS INITIAL.
      DELETE IT_MSEG WHERE EBELN = WA_MSEG_TEM-EBELN.
      DELETE IT_QALS WHERE EBELN = WA_MSEG_TEM-EBELN.
      DELETE IT_EKET WHERE EBELN = WA_MSEG_TEM-EBELN.
      DELETE IT_EKBE WHERE EBELN = WA_MSEG_TEM-EBELN.
    ENDIF.
    CLEAR : WA_EKKO .
  ENDLOOP.

******************************************************MSEG TABLE  FILTER VENDAR (YB01 & YBIV)***************************************************
  LOOP AT IT_MSEG INTO WA_MSEG .
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_MSEG-LIFNR.
    IF WA_LFA1 IS INITIAL .
      DELETE IT_MSEG WHERE  LIFNR = WA_MSEG-LIFNR.
    ENDIF.
  ENDLOOP.
*****************************************************MSEG TABLE  FILTER VENDAR (YB01 & YBIV)*****************************************************

  LOOP AT IT_MSEG INTO WA_MSEG.
    WA_MSEG1-MBLNR = WA_MSEG-MBLNR.
    WA_MSEG1-MJAHR = WA_MSEG-MJAHR.
    WA_MSEG1-ZEILE = WA_MSEG-ZEILE.
    WA_MSEG1-BWART = WA_MSEG-BWART .
    WA_MSEG1-MATNR = WA_MSEG-MATNR.
    WA_MSEG1-WERKS = WA_MSEG-WERKS .
    WA_MSEG1-LIFNR = WA_MSEG-LIFNR .
    WA_MSEG1-MENGE = WA_MSEG-MENGE .
    WA_MSEG1-EBELN = WA_MSEG-EBELN .
    WA_MSEG1-EBELP = WA_MSEG-EBELP .
    WA_MSEG1-LFBNR = WA_MSEG-LFBNR .
    WA_MSEG1-SMBLN = WA_MSEG-SMBLN .
    WA_MSEG1-BUDAT = WA_MSEG-BUDAT.
    WA_MSEG1-MONTH = WA_MSEG-BUDAT+4(2) .
    WA_MSEG1-YEAR = WA_MSEG-BUDAT(4).
    APPEND: WA_MSEG1 TO IT_MSEG1.
    APPEND: WA_MSEG1 TO IT_MSEG2.
  ENDLOOP.

  LOOP AT IT_QALS INTO WA_QALS.
    WA_QALS1 = WA_QALS.
    WA_QALS1-MONTH = WA_QALS-BUDAT+4(2).
    WA_QALS1-YEAR = WA_QALS-BUDAT(4) .
    APPEND : WA_QALS1 TO IT_QALS1 .
  ENDLOOP.

  LOOP AT IT_EKET INTO WA_EKET.
    WA_EKET1 = WA_EKET.
    WA_EKET1-MONTH = WA_EKET-EINDT+4(2).
    WA_EKET1-YEAR = WA_EKET-EINDT(4) .
    APPEND : WA_EKET1 TO IT_EKET1 .
  ENDLOOP.

*****************************************************MSEG (PO REVERSAL FILTER)**********************************************************************

  LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE BWART = '102'.
    WA_MSEG_PORE = WA_MSEG1.
    APPEND : WA_MSEG_PORE TO IT_MSEG_PORE .
  ENDLOOP.

  LOOP AT IT_MSEG_PORE INTO WA_MSEG_PORE.

    LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE MATNR = WA_MSEG_PORE-MATNR AND LIFNR = WA_MSEG_PORE-LIFNR AND WERKS = WA_MSEG_PORE-WERKS
                                                                    AND BWART = '101' AND (  MBLNR = WA_MSEG_PORE-LFBNR OR MBLNR = WA_MSEG_PORE-SMBLN ) .

      DELETE IT_MSEG2 WHERE ( MBLNR = WA_MSEG_PORE-LFBNR OR MBLNR = WA_MSEG_PORE-SMBLN ).
      DELETE IT_MSEG2 WHERE MBLNR = WA_MSEG_PORE-MBLNR.
      DELETE IT_EKBE  WHERE EBELN = WA_MSEG_PORE-EBELN AND EBELP = WA_MSEG_PORE-EBELP AND ( BELNR = WA_MSEG_PORE-LFBNR OR BELNR = WA_MSEG_PORE-SMBLN ).
      DELETE IT_EKBE  WHERE EBELN = WA_MSEG_PORE-EBELN AND EBELP = WA_MSEG_PORE-EBELP AND BELNR = WA_MSEG_PORE-MBLNR .

    ENDLOOP.
  ENDLOOP.

*****************************************************MSEG (PO REVERSAL FILTER)**********************************************************************

  REFRESH IT_MSEG1.

  APPEND LINES OF IT_MSEG2 TO IT_MSEG1 .

  APPEND LINES OF IT_MSEG1 TO IT_QAMS.
  SORT IT_MSEG1 BY MATNR WERKS LIFNR MONTH YEAR.
  SORT IT_QAMS BY MATNR WERKS LIFNR EBELN EBELP.

  DELETE ADJACENT DUPLICATES FROM IT_MSEG1 COMPARING MATNR LIFNR WERKS MONTH YEAR.
  DELETE ADJACENT DUPLICATES FROM IT_QAMS COMPARING MATNR LIFNR WERKS EBELN EBELP MONTH YEAR .

  LOOP AT IT_EKBE INTO WA_EKBE.
    WA_EKBE1 = WA_EKBE.
    WA_EKBE1-MONTH = WA_EKBE-BUDAT+4(2).
    WA_EKBE1-TOTAL = WA_EKBE-DMBTR / WA_EKBE-MENGE .
    APPEND: WA_EKBE1 TO IT_EKBE1.
  ENDLOOP.

  LOOP AT IT_MSEG1 INTO WA_MSEG1.

    LOOP AT IT_MSEG2 INTO WA_MSEG2 WHERE MATNR = WA_MSEG1-MATNR AND LIFNR = WA_MSEG1-LIFNR AND WERKS = WA_MSEG1-WERKS AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR.
      MSEG_QUN = MSEG_QUN + WA_MSEG2-MENGE.
      LOOP AT IT_EKBE1 INTO WA_EKBE1 WHERE EBELN = WA_MSEG2-EBELN AND EBELP = WA_MSEG2-EBELP AND BELNR = WA_MSEG2-MBLNR AND BUZEI = WA_MSEG2-ZEILE .
        WA_FINAL-KBETR = WA_FINAL-KBETR + WA_EKBE1-TOTAL .
        CO = CO + 1 .
      ENDLOOP.
    ENDLOOP.

**********************************DELIVERY PROCESS CALCULATION*********************************************************************************

    LOOP AT IT_MSEG2 INTO WA_MSEG2 WHERE MATNR = WA_MSEG1-MATNR AND LIFNR = WA_MSEG1-LIFNR AND WERKS = WA_MSEG1-WERKS AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR.
      READ TABLE IT_EKKO INTO  WA_EKKO WITH KEY EBELN = WA_MSEG2-EBELN.
      IF WA_EKKO-BSART = 'ZLP'.
        LOOP AT IT_EKET INTO WA_EKET WHERE EBELN = WA_MSEG2-EBELN AND EINDT < WA_MSEG2-BUDAT AND EBELP = WA_MSEG2-EBELP AND MENGE = WA_MSEG2-MENGE .
          EKET_QUN = EKET_QUN + WA_MSEG2-MENGE.
        ENDLOOP.
      ELSE.
        LOOP AT IT_EKET INTO WA_EKET WHERE EBELN = WA_MSEG2-EBELN AND EINDT < WA_MSEG2-BUDAT AND EBELP = WA_MSEG2-EBELP.
          EKET_QUN = EKET_QUN + WA_MSEG2-MENGE.
        ENDLOOP.
      ENDIF.
      CLEAR:WA_EKKO.
    ENDLOOP.

    WA_FINAL-QUANT = ( ( ( MSEG_QUN - EKET_QUN ) / MSEG_QUN ) *  40 ).

*   PR@$@TH Added ON 12.11.2018
    IF WA_FINAL-QUANT < '0.000'.
      CLEAR: EKET_QUN.
      LOOP AT IT_MSEG2 INTO WA_MSEG2 WHERE MATNR = WA_MSEG1-MATNR AND LIFNR = WA_MSEG1-LIFNR AND WERKS = WA_MSEG1-WERKS AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR.
        LOOP AT IT_EKET INTO WA_EKET WHERE EBELN = WA_MSEG2-EBELN AND EINDT < WA_MSEG2-BUDAT AND EBELP = WA_MSEG2-EBELP.
          EKET_QUN = EKET_QUN + WA_MSEG2-MENGE.
          EXIT. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
        ENDLOOP.
      ENDLOOP.
      CLEAR: WA_FINAL-QUANT.
      WA_FINAL-QUANT = ( ( ( MSEG_QUN - EKET_QUN ) / MSEG_QUN ) *  40 ).
    ENDIF.

**********************************DELIVERY PROCESS CALCULATION*********************************************************************************

**********************************QUALITY PROCESS CALCULATION*********************************************************************************

    LOOP AT IT_QALS1 INTO WA_QALS1 WHERE SELMATNR = WA_MSEG1-MATNR AND WERK = WA_MSEG1-WERKS AND SELLIFNR = WA_MSEG1-LIFNR
                                                                    AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR .

      QALS_QUA =  QALS_QUA + WA_QALS1-LMENGE02 + WA_QALS1-LMENGE04 .
    ENDLOOP.

    WA_FINAL-QUALI = ( ( ( MSEG_QUN - QALS_QUA ) / MSEG_QUN ) *  40 ).

**********************************QUALITY PROCESS CALCULATION*********************************************************************************

**********************************AMOUNT PROCESS CALCULATION*********************************************************************************

    WA_FINAL-KBETR = WA_FINAL-KBETR / CO .

**********************************AMOUNT PROCESS CALCULATION*********************************************************************************

    READ TABLE IT_MON INTO WA_MON WITH KEY MNR = WA_MSEG1-BUDAT+4(2).
    READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_MSEG1-MATNR.
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_MSEG1-LIFNR.

    SHIFT WA_MSEG1-MATNR LEFT DELETING LEADING '0'.
    SHIFT WA_MSEG1-LIFNR LEFT DELETING LEADING '0'.

    WA_FINAL-MATNR = WA_MSEG1-MATNR .
    WA_FINAL-MAKTX = WA_MAKT-MAKTX .
    WA_FINAL-LIFNR = WA_MSEG1-LIFNR .
    WA_FINAL-NAME1 = WA_LFA1-NAME1 .
    WA_FINAL-WERKS = WA_MSEG1-WERKS .
    WA_FINAL-BUDAT = WA_MSEG1-BUDAT.
    WA_FINAL-MONTH = WA_MSEG1-BUDAT+4(2) .
    CONCATENATE WA_MON-KTX '/' WA_MSEG1-BUDAT(4) INTO MON_YER.
    WA_FINAL-MON_DES = MON_YER .
    WA_FINAL-YEAR = WA_MSEG1-BUDAT(4) .
    APPEND: WA_FINAL TO IT_FINAL.
    CLEAR: WA_FINAL , WA_MON , EKET_QUN , MSEG_QUN , QALS_QUA ,MON_YER , WA_EKET, WA_MSEG , CO .
  ENDLOOP.

  SORT IT_FINAL BY YEAR MONTH MATNR ASCENDING .

  APPEND LINES OF IT_FINAL TO IT_FINAL_AMT .

  APPEND LINES OF IT_FINAL_AMT TO IT_FINAL_AMT1.

  DELETE ADJACENT DUPLICATES FROM IT_FINAL_AMT1 COMPARING MATNR WERKS MONTH .

  LOOP AT IT_FINAL_AMT1 INTO WA_FINAL_AMT1.
    LOOP AT IT_FINAL_AMT INTO WA_FINAL_AMT WHERE MATNR = WA_FINAL_AMT1-MATNR AND WERKS = WA_FINAL_AMT1-WERKS AND MONTH = WA_FINAL_AMT1-MONTH .

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT         = WA_FINAL_AMT-LIFNR
        IMPORTING
          OUTPUT        = WA_FINAL_AMT-LIFNR.

      READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_FINAL_AMT-LIFNR.

      IF WA_LFA1-KTOKK = 'YB01'.
        WA_LESAMT-MATNR = WA_FINAL_AMT-MATNR.
        WA_LESAMT-LIFNR = WA_FINAL_AMT-LIFNR.
        WA_LESAMT-WERKS = WA_FINAL_AMT-WERKS.
        WA_LESAMT-AMUNT = WA_FINAL_AMT-KBETR.
        WA_LESAMT-MONTH = WA_FINAL_AMT-MONTH.
        APPEND: WA_LESAMT TO IT_LESAMT.
        CLEAR: WA_LESAMT.
      ELSE.
        WA_LESAMT_IV-MATNR = WA_FINAL_AMT-MATNR.
        WA_LESAMT_IV-LIFNR = WA_FINAL_AMT-LIFNR.
        WA_LESAMT_IV-WERKS = WA_FINAL_AMT-WERKS.
        WA_LESAMT_IV-AMUNT = WA_FINAL_AMT-KBETR.
        WA_LESAMT_IV-MONTH = WA_FINAL_AMT-MONTH.
        APPEND: WA_LESAMT_IV TO IT_LESAMT_IV.
        CLEAR: WA_LESAMT_IV.
      ENDIF.

      CLEAR: WA_LFA1 .

    ENDLOOP.

    SORT IT_LESAMT BY AMUNT.
    SORT IT_LESAMT_IV BY AMUNT.

    DELETE ADJACENT DUPLICATES FROM IT_LESAMT COMPARING MATNR WERKS MONTH .
    DELETE ADJACENT DUPLICATES FROM IT_LESAMT_IV COMPARING MATNR WERKS MONTH .

    IF IT_LESAMT IS NOT INITIAL.
      APPEND LINES OF IT_LESAMT TO  IT_LESAMT1.
      REFRESH IT_LESAMT.
    ENDIF.

    IF IT_LESAMT_IV IS NOT INITIAL.
      APPEND LINES OF IT_LESAMT_IV TO IT_LESAMT1_IV.
      REFRESH IT_LESAMT_IV.
    ENDIF.

  ENDLOOP.

  SORT  IT_LESAMT1 BY MATNR.

  SORT IT_LESAMT_IV BY MATNR.

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1 COMPARING MATNR LIFNR WERKS MONTH .

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1_IV COMPARING MATNR LIFNR WERKS MONTH .

  SORT IT_LESAMT1 BY MONTH .

  SORT IT_LESAMT1_IV BY MONTH.

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1 COMPARING MATNR LIFNR WERKS MONTH.

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1_IV COMPARING MATNR LIFNR WERKS MONTH.

**************************************************************PRICE CALCULATION 10%********************************************************************
  APPEND LINES OF IT_FINAL TO IT_PRICE .

  LOOP AT IT_FINAL INTO WA_FINAL .
*    LOOP AT IT_PRICE INTO WA_PRICE WHERE MATNR = WA_FINAL-MATNR AND MONTH = WA_FINAL-MONTH AND WERKS = WA_FINAL-WERKS .
*      REPT = REPT + 1.
*    ENDLOOP.
    LOOP AT IT_LESAMT1 INTO WA_LESAMT1 WHERE MATNR = WA_FINAL-MATNR AND WERKS = WA_FINAL-WERKS AND MONTH = WA_FINAL-MONTH.
      IF WA_FINAL-KBETR = WA_LESAMT1-AMUNT .
*        IF REPT <> 1.
        PRICE_PER = '10'.
        WA_FINAL-KBETR = PRICE_PER.
*          ELSE.
*            PRICE_PER = '5' .
*            WA_FINAL-KBETR = PRICE_PER .
*        ENDIF.
        MODIFY IT_FINAL FROM WA_FINAL.
        CLEAR: WA_FINAL , PRICE_PER.

      ELSE.
        IF WA_FINAL-KBETR > '0' .
          PRICE_PER = ( ( ( WA_FINAL-KBETR - WA_LESAMT1-AMUNT ) / WA_FINAL-KBETR ) * 10 ).
          CLEAR: WA_FINAL-KBETR.
          WA_FINAL-KBETR = PRICE_PER.
          MODIFY IT_FINAL FROM WA_FINAL.
          CLEAR: WA_FINAL , PRICE_PER.
        ENDIF.
      ENDIF.
    ENDLOOP.

    LOOP AT IT_LESAMT1_IV INTO WA_LESAMT1_IV WHERE MATNR = WA_FINAL-MATNR AND WERKS = WA_FINAL-WERKS AND MONTH = WA_FINAL-MONTH.
      IF WA_FINAL-KBETR = WA_LESAMT1_IV-AMUNT .
*        IF REPT <> 1.
*          PRICE_PER = '10'.
        WA_FINAL-KBETR = PRICE_PER.
*          ELSE.
*            PRICE_PER = '5' .
*            WA_FINAL-KBETR = PRICE_PER .
*        ENDIF.
        MODIFY IT_FINAL FROM WA_FINAL.
        CLEAR: WA_FINAL , PRICE_PER.

      ELSE.
        IF WA_FINAL-KBETR > '0' .
          PRICE_PER = ( ( ( WA_FINAL-KBETR - WA_LESAMT1_IV-AMUNT ) / WA_FINAL-KBETR ) * 10 ).
          CLEAR: WA_FINAL-KBETR.
          WA_FINAL-KBETR = PRICE_PER.
          MODIFY IT_FINAL FROM WA_FINAL.
          CLEAR: WA_FINAL , PRICE_PER.
        ENDIF.
      ENDIF.
    ENDLOOP.
    CLEAR: REPT.
  ENDLOOP.

  SORT IT_FINAL BY MATNR LIFNR WERKS MONTH .

  DELETE ADJACENT DUPLICATES FROM IT_FINAL COMPARING ALL FIELDS .

  SORT IT_FINAL BY YEAR MONTH MATNR WERKS LIFNR .

  LOOP AT IT_FINAL INTO WA_FINAL.

    WA_ZSTR_VENDOR-MATNR = WA_FINAL-MATNR .
    WA_ZSTR_VENDOR-MAKTX = WA_FINAL-MAKTX .
    WA_ZSTR_VENDOR-LIFNR = WA_fINAL-LIFNR .
    WA_ZSTR_VENDOR-NAME1 = WA_fINAL-NAME1 .
    WA_ZSTR_VENDOR-BUDAT = WA_FINAL-BUDAT.
    WA_ZSTR_VENDOR-WERKS = WA_FINAL-WERKS .
    WA_ZSTR_VENDOR-QUALI = WA_FINAL-QUALI .
    WA_ZSTR_VENDOR-QUANT = WA_fINAL-QUANT .
    WA_ZSTR_VENDOR-KBETR = WA_fINAL-KBETR .
    WA_ZSTR_VENDOR-SERVC = WA_FINAL-SERVC .
    WA_ZSTR_VENDOR-TOTAL = WA_FINAL-TOTAL .
    WA_ZSTR_VENDOR-MON_DES = WA_FINAL-MON_DES.
    APPEND WA_ZSTR_VENDOR TO IT_VEND_EVA_OUT .
    CLEAR WA_FINAL.

  ENDLOOP.

ENDFUNCTION.
