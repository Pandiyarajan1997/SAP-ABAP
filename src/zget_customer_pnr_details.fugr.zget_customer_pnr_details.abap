FUNCTION ZGET_CUSTOMER_PNR_DETAILS.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(LV_VKORG) TYPE  VKORG
*"     VALUE(LV_KUNNR) TYPE  KUNNR OPTIONAL
*"  TABLES
*"      IT_CUST_PART_DETAILS STRUCTURE  ZGET_CUST_PART_DETAILS
*"----------------------------------------------------------------------
TYPES : BEGIN OF GS_KNVP,
    KUNNR TYPE  KUNNR,
    VKORG TYPE  VKORG,
    VTWEG	TYPE VTWEG,
    SPART TYPE  SPART,
    PARVW	TYPE PARVW,
    PERNR	TYPE PERNR_D,
    KUNN2 TYPE KUNN2,
  END OF GS_KNVP.

DATA : GT_KNVP TYPE TABLE OF GS_KNVP,
       WA_KNVP TYPE GS_KNVP.

TYPES: BEGIN OF GS_PA0001,
       PERNR TYPE PA0001-PERNR,
       ENAME TYPE PA0001-ENAME,
     END OF GS_PA0001.

DATA : GT_PA0001 TYPE TABLE OF GS_PA0001,
       WA_PA0001 TYPE GS_PA0001.


TYPES : BEGIN OF GS_KNA1,
        KUNNR TYPE KNA1-KUNNR,
        NAME1 TYPE KNA1-NAME1,
      END OF GS_KNA1.

DATA : GT_KNA1 TYPE TABLE OF GS_KNA1,
       WA_KNA1 TYPE GS_KNA1,
       GT_KUNN2 TYPE TABLE OF GS_KNA1,
       WA_KUNN2 TYPE GS_KNA1.


TYPES :  BEGIN OF GS_TSPAT,
         SPART TYPE TSPAT-SPART,
         VTEXT TYPE TSPAT-VTEXT,
      END OF GS_TSPAT.

DATA : GT_TSPAT TYPE TABLE OF GS_TSPAT,
       WA_TSPAT TYPE GS_TSPAT.

DATA : LAYOUT TYPE SLIS_LAYOUT_ALV.

TYPES: BEGIN OF STR_KNVV,
        KUNNR TYPE KNVV-KUNNR,
        VKORG TYPE KNVV-VKORG,
        SPART TYPE KNVV-SPART,
        VKBUR TYPE KNVV-VKBUR,
      END OF STR_KNVV.

DATA:WA_KNVV TYPE STR_KNVV,
      IT_KNVV TYPE TABLE OF STR_KNVV.

TYPES : BEGIN OF TY_TPAUM,
    SPRAS TYPE TPAUM-SPRAS,
    PARVW TYPE TPAUM-PARVW,
    PABEZ TYPE TPAUM-PABEZ,
  END OF TY_TPAUM.

DATA:WA_TPAUM TYPE TY_TPAUM,
     IT_TPAUM TYPE TABLE OF TY_TPAUM.

TYPES : BEGIN OF TY_TPART,
    SPRAS TYPE TPART-SPRAS,
    PARVW TYPE TPART-PARVW,
    VTEXT TYPE TPART-VTEXT,

  END OF TY_TPART.

DATA:WA_TPART TYPE TY_TPART,
     IT_TPART TYPE TABLE OF TY_TPART.

TYPES : BEGIN OF GS_FINAL,
      KUNNR TYPE KNVP-KUNNR,
      VKORG TYPE KNVP-VKORG,
      VTWEG	TYPE KNVP-VTWEG,
      SPART TYPE KNVP-SPART,
      VTEXT TYPE TSPAT-VTEXT,
      PARVW	TYPE KNVP-PARVW,
      NAME1 TYPE KNA1-NAME1,
      PERNR	TYPE KNVP-PERNR,
      ENAME TYPE PA0001-ENAME,
      VKBUR TYPE KNVV-VKBUR,
      NAME_VTEXT TYPE TPART-VTEXT,
      KUNN2 TYPE KNVP-KUNN2,
END OF  GS_FINAL.


DATA : GT_FINAL TYPE TABLE OF GS_FINAL,
       WA_FINAL TYPE GS_FINAL.

SELECT
      KUNNR
      VKORG
      VTWEG
      SPART
      PARVW
      PERNR
      KUNN2
    FROM KNVP INTO CORRESPONDING FIELDS OF TABLE GT_KNVP WHERE KUNNR EQ LV_KUNNR AND VKORG EQ LV_VKORG .

    SELECT
      SPRAS
      PARVW
      PABEZ
      FROM
      TPAUM INTO TABLE IT_TPAUM FOR ALL ENTRIES IN  GT_KNVP WHERE SPRAS = 'EN' AND PARVW = GT_KNVP-PARVW ORDER BY PRIMARY KEY.  " Added by <IT-CAR Tool> during Code Remediation

    SELECT
      SPRAS
      PARVW
      VTEXT
      FROM
      TPART INTO TABLE IT_TPART WHERE SPRAS = 'EN'.

    IF GT_KNVP IS NOT INITIAL .
      SELECT  PERNR
              ENAME FROM PA0001 INTO TABLE GT_PA0001 FOR ALL ENTRIES IN GT_KNVP WHERE PERNR = GT_KNVP-PERNR.
    ENDIF.

    SELECT KUNNR
           NAME1 FROM KNA1 INTO TABLE GT_KNA1 FOR ALL ENTRIES IN GT_KNVP WHERE KUNNR  = GT_KNVP-KUNNR.

    SELECT KUNNR
           NAME1 FROM KNA1 INTO TABLE GT_KUNN2 FOR ALL ENTRIES IN GT_KNVP WHERE KUNNR  = GT_KNVP-KUNN2.

    SELECT SPART
              VTEXT
              FROM TSPAT INTO TABLE GT_TSPAT
              FOR ALL ENTRIES IN GT_KNVP
              WHERE SPART = GT_KNVP-SPART
              AND SPRAS = 'EN'.

    SELECT KUNNR
           VKORG
           SPART
           VKBUR FROM KNVV
           INTO TABLE IT_KNVV
           FOR ALL ENTRIES IN GT_KNVP
           WHERE KUNNR = GT_KNVP-KUNNR .


    LOOP AT GT_KNVP INTO WA_KNVP .
      MOVE-CORRESPONDING WA_KNVP TO WA_FINAL.
      READ TABLE IT_TPART INTO WA_TPART WITH KEY PARVW = WA_KNVP-PARVW.
       IF WA_KNVP-PERNR NE 0.
        READ TABLE GT_PA0001 INTO WA_PA0001 WITH KEY PERNR = WA_KNVP-PERNR.
        IF SY-SUBRC = 0.
          WA_FINAL-ENAME = WA_PA0001-ENAME.
          WA_FINAL-NAME_VTEXT = WA_TPART-VTEXT.
        ENDIF.
      ELSE.
        READ TABLE GT_KUNN2 INTO WA_KUNN2 WITH KEY KUNNR = WA_KNVP-KUNN2.
        IF SY-SUBRC = 0.
          WA_FINAL-PERNR = WA_KUNN2-KUNNR.
          WA_FINAL-ENAME = WA_KUNN2-NAME1.
          WA_FINAL-NAME_VTEXT = WA_TPART-VTEXT.
        ENDIF.
      ENDIF.

      READ TABLE GT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_KNVP-KUNNR.
      IF SY-SUBRC = 0.
        WA_FINAL-NAME1 = WA_KNA1-NAME1.
      ENDIF.


      READ TABLE IT_KNVV INTO WA_KNVV
      WITH KEY KUNNR = WA_KNVP-KUNNR .
      IF SY-SUBRC = 0.
        WA_FINAL-VKBUR = WA_KNVV-VKBUR .
      ENDIF .


      READ TABLE GT_TSPAT INTO WA_TSPAT WITH KEY SPART = WA_KNVP-SPART.
      IF SY-SUBRC = 0.
        WA_FINAL-VTEXT = WA_TSPAT-VTEXT.
      ENDIF.


      APPEND WA_FINAL TO GT_FINAL.
      CLEAR WA_FINAL.
    ENDLOOP.

    LOOP AT GT_FINAL INTO WA_FINAL .
         IF WA_FINAL-PARVW = 'L1' OR WA_FINAL-PARVW = 'L2' OR WA_FINAL-PARVW = 'L3' OR WA_FINAL-PARVW = 'L4' OR WA_FINAL-PARVW = 'L5' .
    READ TABLE IT_TPAUM INTO WA_TPAUM WITH KEY PARVW = WA_FINAL-PARVW.
      WA_FINAL-PARVW =  WA_TPAUM-PABEZ.
      ENDIF.
      MODIFY GT_FINAL FROM WA_FINAL TRANSPORTING PARVW .
      CLEAR WA_FINAL.
    ENDLOOP.

  LOOP AT GT_FINAL INTO WA_FINAL.
    IT_CUST_PART_DETAILS-KUNNR = WA_FINAL-KUNNR.
    IT_CUST_PART_DETAILS-VKORG = WA_FINAL-VKORG.
    IT_CUST_PART_DETAILS-VTWEG = WA_FINAL-VTWEG.
    IT_CUST_PART_DETAILS-SPART = WA_FINAL-SPART.
    IT_CUST_PART_DETAILS-VTEXT = WA_FINAL-VTEXT.
    IT_CUST_PART_DETAILS-PARVW = WA_FINAL-PARVW.
    IT_CUST_PART_DETAILS-NAME1 = WA_FINAL-NAME1.
    IT_CUST_PART_DETAILS-PERNR = WA_FINAL-PERNR.
    IT_CUST_PART_DETAILS-ENAME = WA_FINAL-ENAME.
    IT_CUST_PART_DETAILS-VKBUR = WA_FINAL-VKBUR.
    IT_CUST_PART_DETAILS-NAME_VTEXT = WA_FINAL-NAME_VTEXT.
    IT_CUST_PART_DETAILS-KUNN2 = WA_FINAL-KUNN2.
     APPEND IT_CUST_PART_DETAILS.
  ENDLOOP.
ENDFUNCTION.
