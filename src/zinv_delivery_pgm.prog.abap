*&----------------------------PSKGDT-----------------------------------*
*& Report  ZINV_DELIVERY_PGM
*&
*&---------------------------------------------------------------------*
*&            DEVELOPED BY  PR@$@TH ON 08.04.2018
*&
*&---------------------------------------------------------------------*

REPORT ZINV_DELIVERY_PGM.

TABLES: EKKO,EKPO,MSEG,MKPF.

TYPES:BEGIN OF TY_EKKO,
  EBELN TYPE EKKO-EBELN,
  RESWK TYPE EKKO-RESWK,
  BEDAT TYPE EKKO-BEDAT,
  END OF TY_EKKO.

DATA: IT_EKKO TYPE TABLE OF TY_EKKO,
      WA_EKKO TYPE TY_EKKO.

TYPES:BEGIN OF TY_EKBE,
  EBELN TYPE EKBE-EBELN,
  EBELP TYPE EKBE-EBELP,
  BELNR TYPE EKBE-BELNR,
  BUZEI TYPE EKBE-BUZEI,
  BWART TYPE EKBE-BWART,
  DMBTR TYPE EKBE-DMBTR,
  END OF TY_EKBE.

DATA: IT_EKBE TYPE TABLE OF TY_EKBE,
      WA_EKBE TYPE TY_EKBE.

TYPES:BEGIN OF TY_EKPO,
  EBELN TYPE EKPO-EBELN,
  EBELP TYPE EKPO-EBELP,
  MATNR TYPE EKPO-MATNR,
  WERKS TYPE EKPO-WERKS,
  MENGE TYPE EKPO-MENGE,
  MEINS TYPE EKPO-MEINS,
  NETWR TYPE EKPO-NETWR,
  END OF TY_EKPO.

DATA: IT_EKPO TYPE TABLE OF TY_EKPO,
      WA_EKPO TYPE TY_EKPO.

DATA: IT_EKPO1 TYPE TABLE OF TY_EKPO,
      WA_EKPO1 TYPE TY_EKPO.

TYPES:BEGIN OF TY_MSEG,
  MBLNR TYPE MSEG-MBLNR,
  MJAHR TYPE MSEG-MJAHR,
  ZEILE TYPE MSEG-ZEILE,
  BWART TYPE MSEG-BWART,
  MATNR TYPE MSEG-MATNR,
  KDAUF TYPE MSEG-KDAUF,
  KDPOS TYPE MSEG-KDPOS,
  DMBTR TYPE MSEG-DMBTR,
  MENGE TYPE MSEG-MENGE,
  EBELN TYPE MSEG-EBELN,
  EBELP TYPE MSEG-EBELP,
  BUDAT_MKPF TYPE MSEG-BUDAT_MKPF,
  VBELN_IM TYPE MSEG-VBELN_IM,
  VBELP_IM TYPE MSEG-VBELP_IM,
  END OF TY_MSEG.

DATA: IT_MSEG TYPE TABLE OF TY_MSEG,
      WA_MSEG TYPE TY_MSEG.

DATA: IT_MSEG1 TYPE TABLE OF TY_MSEG,
      WA_MSEG1 TYPE TY_MSEG.

TYPES:BEGIN OF T642,
  MBLNR TYPE MSEG-MBLNR,
  MJAHR TYPE MSEG-MJAHR,
  ZEILE TYPE MSEG-ZEILE,
  BWART TYPE MSEG-BWART,
  MATNR TYPE MSEG-MATNR,
  KDAUF TYPE MSEG-KDAUF,
  KDPOS TYPE MSEG-KDPOS,
  DMBTR TYPE MSEG-DMBTR,
  MENGE TYPE MSEG-MENGE,
  EBELN TYPE MSEG-EBELN,
  EBELP TYPE MSEG-EBELP,
  SMBLN TYPE MSEG-SMBLN,
  SMBLP TYPE MSEG-SMBLP,
  BUDAT_MKPF TYPE MSEG-BUDAT_MKPF,
  VBELN_IM TYPE MSEG-VBELN_IM,
  VBELP_IM TYPE MSEG-VBELP_IM,
  END OF T642.

DATA: T642 TYPE TABLE OF T642,
      W642 TYPE T642.

DATA: IT_LIPS TYPE TABLE OF LIPS,
      WA_LIPS TYPE LIPS.

DATA: IT_VBRK TYPE TABLE OF VBRK,
      WA_VBRK TYPE VBRK.

DATA: IT_VBRP TYPE TABLE OF VBRP,
      WA_VBRP TYPE VBRP.

DATA: IT_MKPF TYPE TABLE OF MKPF,
      WA_MKPF TYPE MKPF.

TYPES:BEGIN OF TY_T001W,
  WERKS TYPE T001W-WERKS,
  NAME1 TYPE T001W-NAME1,
  REGIO TYPE T001W-REGIO,
  END OF TY_T001W.

DATA: IT_T001W TYPE TABLE OF TY_T001W,
      WA_T001W TYPE TY_T001W.

DATA: IT_T001W1 TYPE TABLE OF TY_T001W,
      WA_T001W1 TYPE TY_T001W.

TYPES:BEGIN OF TY_T005U,
  SPRAS TYPE T005U-SPRAS,
  LAND1 TYPE T005U-LAND1,
  BLAND TYPE T005U-BLAND,
  BEZEI TYPE T005U-BEZEI,
  END OF TY_T005U.

DATA: IT_T005U TYPE TABLE OF TY_T005U,
      WA_T005U TYPE TY_T005U.

TYPES:BEGIN OF TY_MAKT,
  MATNR TYPE MAKT-MATNR,
  MAKTX TYPE MAKT-MAKTX,
  END OF TY_MAKT.

DATA: IT_MAKT TYPE TABLE OF TY_MAKT,
      WA_MAKT TYPE TY_MAKT.

TYPES:BEGIN OF TY_OUTPUT,
  S_PLANT TYPE EKKO-RESWK,  "SUPPLY PLANT
  PO_NUMB TYPE EKKO-EBELN,  "PURCHASE ORDER NUMBER
  DOC_DAT TYPE EKKO-BEDAT,  "DOCUMENT DATE
  I_PLANT TYPE EKPO-WERKS,  "RECEIVE PLANT
  IP_NAME TYPE T001W-NAME1, "RECEIVE PLANT NAME
  REGION  TYPE T005U-BEZEI, " REGION
  ITEM    TYPE EKPO-EBELP,  "PURCHASE ORDER ITEM NUMBER
  MATNR   TYPE MSEG-MATNR,  "MATERIAL NUMBER
  MAT_DES TYPE MAKT-MAKTX,  "MATERIAL DESCRIPTION
  ORD_QUN TYPE EKPO-MENGE,  "SALEORDER QUANTITY
  ORD_MES TYPE EKPO-MEINS,  "QUANTITY UNIT
  ORD_AMT TYPE EKPO-BRTWR,  "AMOUNT
  GOI_NUM TYPE MSEG-BELNR,  "GOODS ISSUE NUMBER
  GOI_DAT TYPE MSEG-BUDAT_MKPF, "GOODS ISSUE DATE
  GOI_QUN TYPE MSEG-MENGE,  "GOODS ISSUE QUANTITY
  GOR_NUM TYPE MSEG-BELNR,  "GOODS RECEIPT NUMBER
  GOR_DAT TYPE MSEG-BUDAT_MKPF, "GOODS RECEIPT DATE
  GOR_QUN TYPE MSEG-MENGE,      " GOODS RECEIPT QUQNTITY
  INV_QUN TYPE MSEG-MENGE,      "INVOICE QUANTITY (MSEG 101 QUANTITY)
  INV_AMT TYPE MSEG-DMBTR,      "INVOICE AMOUNT
  REM_QUN TYPE MSEG-MENGE,      "REMAINING QUANTITY
  REM_AMT TYPE EKPO-BRTWR,      "REMAINING AMOUNT
  POVSGI TYPE CHAR4,       "DAYS OF GOODSISSUE
  POVSGR TYPE CHAR4,       "DAYS OF GOODSRECEIPT
  END OF TY_OUTPUT.

DATA: IT_OUTPUT TYPE TABLE OF TY_OUTPUT,
      WA_OUTPUT TYPE TY_OUTPUT.

DATA: IT_FINAL TYPE TABLE OF TY_OUTPUT,
      WA_FINAL TYPE TY_OUTPUT.

DATA: IT_FCL TYPE TABLE OF SLIS_FIELDCAT_ALV ,
      WA_FCL TYPE SLIS_FIELDCAT_ALV.

DATA : WA_LAYOUT TYPE SLIS_LAYOUT_ALV.

DATA: IT_HEAD TYPE SLIS_T_LISTHEADER,
      WA_HEAD TYPE SLIS_LISTHEADER.

DATA: POS TYPE I VALUE 0.
DATA: MON TYPE I.
DATA: DAI TYPE I.
DATA: DAI1 TYPE I.
DATA: FLAG TYPE C.

DATA: TEM_QUN TYPE MSEG-MENGE .
DATA: DEL TYPE MSEG-BWART.

SELECTION-SCREEN:BEGIN OF BLOCK STODEL WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: S_RESWK FOR EKKO-RESWK OBLIGATORY . "SUPPLYING PLANT
SELECT-OPTIONS: S_WERKS FOR EKPO-WERKS. "RECEIVING PLANT
SELECT-OPTIONS: S_BEDAT FOR EKKO-BEDAT OBLIGATORY. "DOCUMENT DATE
SELECTION-SCREEN:END OF BLOCK STODEL.

START-OF-SELECTION.

  PERFORM GET_DATA.
  PERFORM READ_DATA.
  PERFORM FIELDCAT.
  PERFORM DISPLAY.

END-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA .

  IF S_RESWK IS NOT INITIAL AND S_BEDAT IS NOT INITIAL.

    CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
      EXPORTING
        I_DATE_FROM    = S_BEDAT-LOW
*       I_KEY_DAY_FROM =
        I_DATE_TO      = S_BEDAT-HIGH
*       I_KEY_DAY_TO   =
*       I_FLG_SEPARATE = ' '
      IMPORTING
*       E_DAYS         =
        E_MONTHS       = MON
*       E_YEARS        =
      .
    IF MON <= 12.

      SELECT EBELN RESWK BEDAT FROM EKKO INTO TABLE IT_EKKO WHERE RESWK IN S_RESWK AND BEDAT IN S_BEDAT AND ( BSART = 'ZUB' OR BSART = 'ZSTO' ).

      IF IT_EKKO IS NOT INITIAL.

        SELECT EBELN EBELP MATNR WERKS MENGE MEINS NETWR FROM EKPO INTO TABLE IT_EKPO
                                                   FOR ALL ENTRIES IN IT_EKKO WHERE EBELN EQ IT_EKKO-EBELN AND WERKS IN S_WERKS.
        IF IT_EKPO IS NOT INITIAL.

          SELECT EBELN EBELP BELNR BUZEI BWART DMBTR FROM EKBE INTO TABLE IT_EKBE FOR ALL ENTRIES IN IT_EKPO WHERE EBELN EQ IT_EKPO-EBELN AND EBELP EQ IT_EKPO-EBELP
                                                                                                        AND ( BWART = '641' OR BWART = '643' OR BWART = '101' ).

          SELECT MATNR MAKTX FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_EKPO WHERE MATNR EQ IT_EKPO-MATNR.

          SELECT WERKS NAME1 REGIO FROM T001W INTO TABLE IT_T001W FOR ALL ENTRIES IN IT_EKPO WHERE WERKS EQ IT_EKPO-WERKS.

          SELECT SPRAS LAND1 BLAND BEZEI FROM T005U INTO TABLE IT_T005U
                                          FOR ALL ENTRIES IN IT_T001W WHERE BLAND EQ IT_T001W-REGIO AND SPRAS EQ 'EN' AND LAND1 EQ 'IN'.

          SELECT MBLNR MJAHR ZEILE BWART MATNR KDAUF KDPOS DMBTR MENGE EBELN EBELP BUDAT_MKPF VBELN_IM VBELP_IM FROM MSEG
                 INTO TABLE IT_MSEG FOR ALL ENTRIES IN IT_EKPO WHERE EBELN EQ IT_EKPO-EBELN AND EBELP = IT_EKPO-EBELP AND XAUTO <> 'X' AND
                                                                      ( BWART = '641' OR BWART = '643' OR BWART = '101' ).

          SELECT MBLNR MJAHR ZEILE BWART MATNR KDAUF KDPOS DMBTR MENGE EBELN EBELP SMBLN SMBLP BUDAT_MKPF VBELN_IM VBELP_IM FROM MSEG
                INTO TABLE T642 FOR ALL ENTRIES IN IT_EKPO WHERE EBELN EQ IT_EKPO-EBELN AND EBELP = IT_EKPO-EBELP AND XAUTO <> 'X' AND
                                                                     ( BWART = '642' OR BWART = '102' ).
        ELSE.
          MESSAGE: 'No Data Found' TYPE 'I' DISPLAY LIKE 'E'.
          SUBMIT ZSTO_DELIVERY_PGM VIA SELECTION-SCREEN.
        ENDIF.
      ELSE.
        MESSAGE: 'No Data Found' TYPE 'I' DISPLAY LIKE 'E'.
        SUBMIT ZSTO_DELIVERY_PGM VIA SELECTION-SCREEN.
      ENDIF.
    ELSE.
      MESSAGE: 'Please Enter Lessthen One Year date' TYPE 'I' DISPLAY LIKE 'I'.
      SUBMIT ZSTO_DELIVERY_PGM VIA SELECTION-SCREEN.
    ENDIF.
  ELSE.
    MESSAGE: 'Please Enter Mandatory Fields' TYPE 'I' DISPLAY LIKE 'I'.
    SUBMIT ZSTO_DELIVERY_PGM VIA SELECTION-SCREEN.
  ENDIF.
  SELECT WERKS NAME1 REGIO FROM T001W INTO TABLE IT_T001W1 WHERE WERKS IN S_RESWK OR WERKS IN S_WERKS.

ENDFORM.                    " GET_DATA

*&---------------------------------------------------------------------*
*&      Form  READ_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM READ_DATA .

  LOOP AT T642 INTO W642.
    DELETE IT_MSEG WHERE MBLNR = W642-SMBLN AND ZEILE = W642-SMBLP .
  ENDLOOP.

  APPEND LINES OF IT_MSEG TO IT_MSEG1.
  IF IT_EKPO IS NOT INITIAL.
    LOOP AT IT_EKPO INTO WA_EKPO.
      SELECT BWART UP TO 1 ROWS FROM MSEG INTO DEL WHERE EBELN = WA_EKPO-EBELN AND BWART = 351 ORDER BY PRIMARY KEY.
      ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
      IF DEL IS INITIAL.
        READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKPO-EBELN.
        READ TABLE IT_EKBE INTO WA_EKBE WITH KEY EBELN = WA_EKPO-EBELN EBELP = WA_EKPO-EBELP.
        READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_EKPO-MATNR.
        READ TABLE IT_T001W INTO WA_T001W WITH KEY WERKS = WA_EKPO-WERKS.
        READ TABLE IT_T005U INTO WA_T005U WITH KEY BLAND = WA_T001W-REGIO.
        LOOP AT IT_MSEG INTO WA_MSEG WHERE EBELN = WA_EKPO-EBELN AND EBELP = WA_EKPO-EBELP AND ( BWART = 641 OR BWART = 643 ) .
          READ TABLE IT_MSEG1 INTO WA_MSEG1 WITH KEY EBELN = WA_MSEG-EBELN EBELP = WA_MSEG-EBELP MENGE = WA_MSEG-MENGE BWART = 101 .
          CLEAR : WA_EKBE.
          READ TABLE IT_EKBE INTO WA_EKBE WITH KEY EBELN = WA_MSEG-EBELN EBELP = WA_MSEG-EBELP BWART = WA_MSEG-BWART BELNR = WA_MSEG-MBLNR BUZEI = WA_MSEG-ZEILE .

          WA_FINAL-S_PLANT = WA_EKKO-RESWK.  "SUPPLY PLANT
          WA_FINAL-PO_NUMB = WA_EKKO-EBELN.  "PURCHASE ORDER NUMBER
          WA_FINAL-DOC_DAT = WA_EKKO-BEDAT.  "DOCUMENT DATE
          WA_FINAL-I_PLANT = WA_EKPO-WERKS.  "RECEIVE PLANT
          WA_FINAL-IP_NAME = WA_T001W-NAME1. "RECEIVE PLANT NAME
          WA_FINAL-REGION  = WA_T005U-BEZEI. "REGION
          WA_FINAL-ITEM    = WA_EKPO-EBELP.  "PURCHASE ORDER ITEM NUMBER
          WA_FINAL-MATNR   = WA_MSEG-MATNR.  "MATERIAL NUMBER
          WA_FINAL-MAT_DES = WA_MAKT-MAKTX.  "MATERIAL DESCRIPTION
          WA_FINAL-ORD_QUN = WA_EKPO-MENGE.  "ORDER QUANTITY
          WA_FINAL-ORD_MES = WA_EKPO-MEINS.  "QUANTITY UNIT
          WA_FINAL-ORD_AMT = WA_EKBE-DMBTR.   "AMOUNT
          WA_FINAL-GOI_NUM = WA_MSEG-MBLNR.  "GOODS ISSUE NUMBER
          WA_FINAL-GOI_DAT = WA_MSEG-BUDAT_MKPF. "GOODS ISSUE DATE
          WA_FINAL-GOI_QUN = WA_MSEG-MENGE.    "GOODS ISSUE QUANTITY

          CLEAR :TEM_QUN.
          LOOP AT IT_OUTPUT INTO WA_OUTPUT WHERE PO_NUMB = WA_MSEG-EBELN AND ITEM = WA_MSEG-EBELP.
            TEM_QUN = TEM_QUN + WA_OUTPUT-GOI_QUN .
          ENDLOOP.
          IF TEM_QUN IS NOT INITIAL.
            CLEAR: WA_FINAL-ORD_QUN.
            WA_FINAL-ORD_QUN = WA_EKPO-MENGE - TEM_QUN .
          ENDIF.

          CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
            EXPORTING
              I_DATE_FROM = WA_EKKO-BEDAT
              I_DATE_TO   = WA_MSEG-BUDAT_MKPF
            IMPORTING
              E_DAYS      = DAI.        "DAYS OF PO VS GI
          WA_FINAL-POVSGI = DAI.
          IF WA_MSEG1 IS NOT INITIAL.
            WA_FINAL-GOR_NUM = WA_MSEG1-MBLNR.  "GOODS RECEIPT NUMBER
            WA_FINAL-GOR_DAT = WA_MSEG1-BUDAT_MKPF. "GOODS RECEIPT DATE
            WA_FINAL-GOR_QUN = WA_MSEG1-MENGE.  "GOODS RECEIPT QUANTITY
            IF TEM_QUN IS INITIAL.
              WA_FINAL-REM_QUN = WA_EKPO-MENGE - WA_MSEG1-MENGE.
            ENDIF.
            CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
              EXPORTING
                I_DATE_FROM = WA_EKKO-BEDAT
                I_DATE_TO   = WA_MSEG1-BUDAT_MKPF
              IMPORTING
                E_DAYS      = DAI1.
            WA_FINAL-POVSGR = DAI1 . "DAYS OF PO VS GR
          ELSE.
            WA_FINAL-GOR_NUM = ''.  "GOODS RECEIPT NUMBER
            WA_FINAL-GOR_DAT = ''.  "GOODS RECEIPT DATE
            WA_FINAL-GOR_QUN = ''.  "GOODS RECEIPT QUANTITY
          ENDIF.

          IF WA_MSEG1-MENGE IS INITIAL AND TEM_QUN IS INITIAL.
            WA_FINAL-REM_QUN = WA_EKPO-MENGE - WA_MSEG-MENGE.
          ELSE.
            WA_FINAL-REM_QUN = WA_FINAL-ORD_QUN - WA_MSEG-MENGE.
          ENDIF.

          SHIFT WA_FINAL-MATNR LEFT DELETING LEADING '0' .
          MOVE:WA_FINAL TO WA_OUTPUT.
          APPEND: WA_OUTPUT TO IT_OUTPUT.
          FLAG = 'X' .
          CLEAR: WA_MSEG1.
        ENDLOOP.

        IF FLAG <> 'X'.

          WA_FINAL-S_PLANT = WA_EKKO-RESWK.  "SUPPLY PLANT
          WA_FINAL-PO_NUMB = WA_EKKO-EBELN.  "PURCHASE ORDER NUMBER
          WA_FINAL-DOC_DAT = WA_EKKO-BEDAT.  "DOCUMENT DATE
          WA_FINAL-I_PLANT = WA_EKPO-WERKS.  "RECEIVE PLANT
          WA_FINAL-IP_NAME = WA_T001W-NAME1. "RECEIVE PLANT NAME
          WA_FINAL-REGION  = WA_T005U-BEZEI. "REGION
          WA_FINAL-ITEM    = WA_EKPO-EBELP.  "PURCHASE ORDER ITEM NUMBER
          WA_FINAL-MATNR   = WA_EKPO-MATNR.  "MATERIAL NUMBER
          WA_FINAL-MAT_DES = WA_MAKT-MAKTX.  "MATERIAL DESCRIPTION
          WA_FINAL-ORD_QUN = WA_EKPO-MENGE.  "SALEORDER QUANTITY
          WA_FINAL-ORD_MES = WA_EKPO-MEINS.  "QUANTITY UNIT
          WA_FINAL-ORD_AMT = WA_EKBE-DMBTR.   "AMOUNT
          WA_FINAL-REM_QUN = WA_EKPO-MENGE.   "REMAINING AMOUNT
          MOVE:WA_FINAL TO WA_OUTPUT.
          SHIFT WA_FINAL-MATNR LEFT DELETING LEADING '0'.
          APPEND: WA_OUTPUT TO IT_OUTPUT.
        ENDIF.
        CLEAR: WA_FINAL , WA_OUTPUT ,WA_EKKO,WA_T001W,WA_T005U.
        CLEAR:FLAG.
      ENDIF.
      CLEAR: DEL.
    ENDLOOP.
  ELSE.
    MESSAGE 'No Data Found' TYPE 'I' DISPLAY LIKE 'E' .
    SUBMIT ZSTO_DELIVERY_PGM VIA SELECTION-SCREEN.
  ENDIF.

ENDFORM.                    " READ_DATA

*&---------------------------------------------------------------------*
*&      Form  FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FIELDCAT .

  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'S_PLANT'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_L = 'Supply Plant'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'PO_NUMB'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_L = 'PO Number'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'ITEM'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_S = 'PO Line Item'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'DOC_DAT'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_L = 'Document Date'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'I_PLANT'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_L = 'Receiving Plant'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'IP_NAME'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_L = 'Receiving Plant Name'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'REGION'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_S = 'Region'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'MATNR'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'Material Code'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'MAT_DES'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'Material Description'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'ORD_QUN'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'PO Quantity'.
  WA_FCL-NO_ZERO = 'X'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

*  POS = POS + 1  .
*  WA_FCL-COL_POS = POS.
*  WA_FCL-FIELDNAME = 'ORD_MES'.
*  WA_FCL-TABNAME = 'WA_OUTPUT' .
*  WA_FCL-SELTEXT_S = 'Unit'.
*  APPEND: WA_FCL TO IT_FCL.
*  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'ORD_AMT'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'PO Amount'.
  WA_FCL-NO_ZERO = 'X'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'GOI_NUM'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'GI Number'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'GOI_DAT'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'GI Date'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'GOI_QUN'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'GI Quantity'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'GOR_NUM'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'GR Number'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'GOR_DAT'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'GR Date'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'GOR_QUN'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'GR Quantity'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

*  POS = POS + 1  .
*  WA_FCL-COL_POS = POS.
*  WA_FCL-FIELDNAME = 'INV_QUN'.
*  WA_FCL-TABNAME = 'WA_OUTPUT' .
*  WA_FCL-SELTEXT_M = 'INV Quantity'.
*  WA_FCL-NO_ZERO = 'X'.
*  APPEND: WA_FCL TO IT_FCL.
*  CLEAR: WA_FCL.

*  POS = POS + 1  .
*  WA_FCL-COL_POS = POS.
*  WA_FCL-FIELDNAME = 'INV_AMT'.
*  WA_FCL-TABNAME = 'WA_OUTPUT' .
*  WA_FCL-SELTEXT_M = 'INV Amount'.
*  WA_FCL-NO_ZERO = 'X'.
*  APPEND: WA_FCL TO IT_FCL.
*  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'REM_QUN'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'Remaining Quantity'.
  WA_FCL-NO_ZERO = 'X'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

*  POS = POS + 1  .
*  WA_FCL-COL_POS = POS.
*  WA_FCL-FIELDNAME = 'REM_AMT'.
*  WA_FCL-TABNAME = 'WA_OUTPUT' .
*  WA_FCL-SELTEXT_M = 'Remaining Amount'.
*  WA_FCL-NO_ZERO = 'X'.
*  APPEND: WA_FCL TO IT_FCL.
*  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'POVSGI'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'PO vs GI'.
  WA_FCL-NO_ZERO = 'X'.
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

  POS = POS + 1  .
  WA_FCL-COL_POS = POS.
  WA_FCL-FIELDNAME = 'POVSGR'.
  WA_FCL-TABNAME = 'WA_OUTPUT' .
  WA_FCL-SELTEXT_M = 'PO vs GR'.
  WA_FCL-NO_ZERO = 'X' .
  APPEND: WA_FCL TO IT_FCL.
  CLEAR: WA_FCL.

ENDFORM.                    " FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY .
  DATA: C_PLANT TYPE CHAR100.
  DATA: C_PLANT1 TYPE  CHAR100.

  DATA: F_DT TYPE CHAR10,
        T_DT TYPE CHAR10,
        C_DT TYPE CHAR30.

  WA_HEAD-TYP = 'H'.
  WA_HEAD-INFO = 'Stock Transfer Order ( Inter / Intra )'.
  APPEND:WA_HEAD TO IT_HEAD .
  CLEAR WA_HEAD.

  IF S_RESWK-LOW IS NOT INITIAL AND S_RESWK-HIGH IS NOT INITIAL .
    CONCATENATE S_RESWK-LOW ' TO ' S_RESWK-HIGH INTO C_PLANT SEPARATED BY SPACE.
    WA_HEAD-TYP = 'S'.
    WA_HEAD-KEY = 'Supplying Plant:'.
    WA_HEAD-INFO =  C_PLANT .
    APPEND:WA_HEAD TO IT_HEAD .
    CLEAR WA_HEAD.
  ELSE.
    READ TABLE IT_T001W1 INTO WA_T001W1 WITH KEY WERKS = S_RESWK-LOW.
    CONCATENATE S_RESWK-LOW ' - (' WA_T001W1-NAME1 ')' INTO C_PLANT .
    WA_HEAD-TYP = 'S'.
    WA_HEAD-KEY = 'Supplying Plant:'.
    WA_HEAD-INFO =  C_PLANT.
    APPEND:WA_HEAD TO IT_HEAD .
    CLEAR: WA_HEAD , WA_T001W1 .
  ENDIF.

  IF S_WERKS IS NOT INITIAL.

    IF S_WERKS-LOW IS NOT INITIAL AND S_WERKS-HIGH IS NOT INITIAL.
      WA_HEAD-TYP = 'S'.
      WA_HEAD-KEY = 'Receiving Plant:'.
      CONCATENATE S_WERKS-LOW 'TO' S_WERKS-HIGH INTO C_PLANT1 SEPARATED BY SPACE.
      WA_HEAD-INFO = C_PLANT1.
      APPEND: WA_HEAD TO IT_HEAD.
      CLEAR: WA_HEAD.
    ELSE.
      WA_HEAD-TYP = 'S'.
      WA_HEAD-KEY = 'Receiving Plant:'.
      READ TABLE IT_T001W1 INTO WA_T001W1 WITH KEY WERKS = S_WERKS-LOW.
      CONCATENATE S_WERKS-LOW ' - (' WA_T001W1-NAME1 ')' INTO C_PLANT1.
      WA_HEAD-INFO = C_PLANT1 .
      APPEND:WA_HEAD TO IT_HEAD .
      CLEAR: WA_HEAD , WA_T001W1 .
    ENDIF.

  ENDIF.

  IF S_BEDAT-LOW IS NOT INITIAL AND S_BEDAT-HIGH IS NOT INITIAL.
    CONCATENATE S_BEDAT-LOW+6(2) '.' S_BEDAT-LOW+4(2) '.' S_BEDAT-LOW(4) INTO F_DT .
    CONCATENATE S_BEDAT-HIGH+6(2) '.' S_BEDAT-HIGH+4(2) '.' S_BEDAT-LOW(4) INTO T_DT.
    WA_HEAD-TYP = 'S'.
    WA_HEAD-KEY = 'Document Date:'.
    CONCATENATE F_DT 'TO' T_DT INTO C_DT SEPARATED BY SPACE.
    WA_HEAD-INFO = C_DT .
    APPEND: WA_HEAD TO IT_HEAD.
    CLEAR: WA_HEAD.
  ENDIF.

  WA_HEAD-TYP = 'S'.
  WA_HEAD-KEY = 'Descriptions:'.
  WA_HEAD-INFO = 'PO-(Purchase Order) GI-(Goods Issue) GR-(Goods Receipt)'.
  APPEND: WA_HEAD TO IT_HEAD.
  CLEAR: WA_HEAD.

  WA_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  WA_LAYOUT-ZEBRA = 'X'.
  WA_LAYOUT-EXPAND_ALL = 'X'.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
   EXPORTING
*     I_INTERFACE_CHECK                 = ' '
*     I_BYPASSING_BUFFER                = ' '
*     I_BUFFER_ACTIVE                   = ' '
      I_CALLBACK_PROGRAM                = SY-REPID
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
      I_CALLBACK_TOP_OF_PAGE            = 'TOP_OF_PAGE'
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME                  =
*     I_BACKGROUND_ID                   = ' '
*     I_GRID_TITLE                      =
*     I_GRID_SETTINGS                   =
      IS_LAYOUT                         = WA_LAYOUT
      IT_FIELDCAT                       = IT_FCL
*     IT_EXCLUDING                      =
*     IT_SPECIAL_GROUPS                 =
*     IT_SORT                           =
*     IT_FILTER                         =
*     IS_SEL_HIDE                       =
*     I_DEFAULT                         = 'X'
*     I_SAVE                            = ' '
*     IS_VARIANT                        =
*     IT_EVENTS                         =
*     IT_EVENT_EXIT                     =
*     IS_PRINT                          =
*     IS_REPREP_ID                      =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE                 = 0
*     I_HTML_HEIGHT_TOP                 = 0
*     I_HTML_HEIGHT_END                 = 0
*     IT_ALV_GRAPHICS                   =
*     IT_HYPERLINK                      =
*     IT_ADD_FIELDCAT                   =
*     IT_EXCEPT_QINFO                   =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      T_OUTTAB                          = IT_OUTPUT
   EXCEPTIONS
     PROGRAM_ERROR                     = 1
     OTHERS                            = 2 .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    " DISPLAY

*&---------------------------------------------------------------------*
*&      Form  TIP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOP_OF_PAGE .

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_HEAD
      I_LOGO             = 'ZSHEENLAC'
*     I_END_OF_LIST_GRID =
*     I_ALV_FORM         =
    .

ENDFORM.                    "TIP_OF_PAGE
