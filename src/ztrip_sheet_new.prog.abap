*&---------------------------------------------------------------------*
*& Module Pool       ZTRIP_SHEET_NEW
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
* MODULE           :
* PURPOSE          : Trip Sheet Creation
* REPORT NAME      : ZTRIP_SHEET_NEW
* REQUEST NUMBER   : DEVK917438
* TECHNICAL SPEC # :
* DATE CREATED     :
* AUTHOR           : Ramachandran
* REQUESTED BY     :
* BUSINESS LOGIC   :
* CODING LOGIC     :
************************************************************************
* MODIFICATION LOG
************************************************************************
*                                                             Change/
*                                                  IMS #/     Support
* MODIFIED DATE  MODIFIED BY        REFERENCE      OSS NOTE   Request
*-----------------------------------------------------------------------
*<MM/DD/YYYY>    <> <AAMMDDYYYYX>  <XXXXXXX>  <XXXXXXX>
*
************************************************************************


*9004 - Edit Invoice Screen
*
*IPEI_TRANS*
*IPEI_FLOC*
*IPEI_TLOC*
*IPEI_FILL*
*IPEI_TCAP*
*OPEI_OFCHR*
*OPEI_LCHR*
*OPEI_UCHR*
*OPEI_HCRG*
*IPEI_VNO*
*
*IPEI_LOC
*IPEI_CT
*IPEI_DAY
*IPEI_CA
*OPEI_ACT*
*
*TCEI_1 - tc name
*
*TRN - TRNEI
*refresh - RF9004
*add button - ADD9004
*edit button - EDIT9004
*cc name - CC2EI_FC

PROGRAM ZTRIP_SHEET_NEW NO STANDARD PAGE HEADING MESSAGE-ID ZMTRIP.

TABLES: NRIV,
        ZFREIGHT_HEADER,
        ZTRIP_APPROVAL,
        LFA1.

TYPES: BEGIN OF TY_TC1, " Structure of the table Control
        SEL,
*        TRIP_NO TYPE ZFREIGHT_ITEM-TRIP_NO,
        INVOICE_NO TYPE ZFREIGHT_ITEM-INVOICE_NO,
        CUSTOMER_NAME TYPE ZFREIGHT_ITEM-CUSTOMER_NAME,
        INVOICE_DATE TYPE ZFREIGHT_ITEM-INVOICE_DATE,
        INVOICE_AMOUNT TYPE ZFREIGHT_ITEM-INVOICE_AMOUNT,
        WEIGHT TYPE ZFREIGHT_ITEM-WEIGHT,
        COMPANY_CODE TYPE ZFREIGHT_ITEM-COMPANY_CODE,
        LOCATION TYPE ZFREIGHT_ITEM-LOCATION,
        LR_NO TYPE ZFREIGHT_ITEM-LR_NO,
        STATUS TYPE ZFREIGHT_ITEM-STATUS,
*        REMARKS TYPE ZFREIGHT_ITEM-REMARKS,
      END OF TY_TC1,

  BEGIN OF TY_SEL, " Structure of the table Control
        SEL,

        TRIP_NO TYPE ZFREIGHT_ITEM-TRIP_NO,
        INVOICE_NO TYPE ZFREIGHT_ITEM-INVOICE_NO,
        CUSTOMER_NAME TYPE ZFREIGHT_ITEM-CUSTOMER_NAME,
        INVOICE_DATE TYPE ZFREIGHT_ITEM-INVOICE_DATE,
        INVOICE_AMOUNT TYPE ZFREIGHT_ITEM-INVOICE_AMOUNT,
        WEIGHT TYPE ZFREIGHT_ITEM-WEIGHT,
        COMPANY_CODE TYPE ZFREIGHT_ITEM-COMPANY_CODE,
        LOCATION TYPE ZFREIGHT_ITEM-LOCATION,
        LR_NO TYPE ZFREIGHT_ITEM-LR_NO,
*        REMARKS TYPE ZFREIGHT_ITEM-REMARKS,
      END OF TY_SEL,

*     BEGIN OF TY_ZFREIGHT_FLOAD,
*        FROML TYPE ZFREIGHT_FLOAD-FROML,
*        TOL TYPE ZFREIGHT_FLOAD-TOL,
*        CAP TYPE ZFREIGHT_FLOAD-CAP,
*        LOADC TYPE ZFREIGHT_FLOAD-LOADC,
*        LOADU TYPE ZFREIGHT_FLOAD-LOADU,
*        FRCHR TYPE ZFREIGHT_FLOAD-FRCHR,
*      END OF TY_ZFREIGHT_FLOAD,

      BEGIN OF TY_VBRK, " Invoice Header
        VBELN TYPE VBRK-VBELN,
        FKDAT TYPE VBRK-FKDAT,
        BUKRS TYPE VBRK-BUKRS,
        NETWR TYPE VBRK-NETWR,
        KUNAG TYPE VBRK-KUNAG,
        MWSBK TYPE VBRK-MWSBK,
      END OF TY_VBRK,

     BEGIN OF TY_VBRP, " Invoice Item
        VBELN TYPE VBRP-VBELN,
        POSNR TYPE VBRP-POSNR,
        NTGEW TYPE VBRP-NTGEW,
        BRGEW TYPE VBRP-BRGEW,
        GEWEI TYPE VBRP-GEWEI,
        VOLUM TYPE VBRP-VOLUM,
        VOLEH TYPE VBRP-VOLEH,
      END OF TY_VBRP,


     BEGIN OF TY_MSEG,
        MBLNR TYPE MSEG-MBLNR,
        BWART TYPE MSEG-BWART,
        MATNR TYPE MSEG-MATNR,
        SHKZG TYPE MSEG-SHKZG,
        DMBTR TYPE MSEG-DMBTR,
        MENGE TYPE MSEG-MENGE,
        BUKRS TYPE MSEG-BUKRS,
        UMWRK TYPE MSEG-UMWRK,
        BUDAT_MKPF TYPE MSEG-BUDAT_MKPF,
      END OF TY_MSEG,

     BEGIN OF TY_MARA,
        MATNR TYPE MARA-MATNR,
        BRGEW TYPE MARA-BRGEW,
        GEWEI TYPE MARA-GEWEI,
      END OF TY_MARA,

     BEGIN OF TY_T001W,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
        ORT01 TYPE T001W-ORT01,
      END OF TY_T001W,


      BEGIN OF TY_TC2, " Structure for additional loading charges - Custom control
        CHARGE_LOC TYPE ZFREIGHT_TRAN-CHARGE_LOC,
        CHARGE_TYPE TYPE ZFREIGHT_TRAN-CHARGE_TYPE,
        VENDOR_CODE TYPE ZFREIGHT_TRAN-VENDOR_CODE,
        NO_OF_DAYS TYPE ZFREIGHT_TRAN-NO_OF_DAYS,
        TOTAT_AMOUNT TYPE ZFREIGHT_TRAN-TOTAT_AMOUNT,
      END OF TY_TC2,

   BEGIN OF TY_KNA1,
        KUNNR TYPE KNA1-KUNNR,
        NAME1 TYPE KNA1-NAME1,
        LOCATION TYPE KNA1-LOCATION,
        "ORT01 TYPE KNA1-ORT01,
      END OF TY_KNA1,

      BEGIN OF TY_LVBRP,
         VBELN TYPE VBRP-VBELN,
         AUBEL TYPE VBRP-AUBEL,
      END OF TY_LVBRP,

      BEGIN OF TY_VBPA,
        VBELN TYPE VBPA-VBELN,
        PARVW TYPE VBPA-PARVW,
        KUNNR TYPE VBPA-KUNNR,
      END OF TY_VBPA,

      BEGIN OF TY_LKNA1,
        KUNNR TYPE KNA1-KUNNR,
        LOCATION TYPE KNA1-LOCATION,
      END OF TY_LKNA1,


      BEGIN OF TY_ZFREIGHT_HEADER,
        MANDT TYPE ZFREIGHT_HEADER-MANDT,
        TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO,
        STATUS TYPE ZFREIGHT_HEADER-STATUS,
        VENDOR_CODE TYPE ZFREIGHT_HEADER-VENDOR_CODE,
        VENDOR_NAME TYPE ZFREIGHT_HEADER-VENDOR_NAME,
        FORM_CODE TYPE ZFREIGHT_HEADER-FROM_CODE,
        FROM_LOC TYPE ZFREIGHT_HEADER-FROM_LOC,
        CITY_ID TYPE ZFREIGHT_HEADER-CITY_ID,
        TO_LOC TYPE ZFREIGHT_HEADER-TO_LOC,
        TRUCK_TYPE TYPE ZFREIGHT_HEADER-TRUCK_TYPE,
        TRUCK_DES TYPE ZFREIGHT_HEADER-TRUCK_DES,
        FILLING_TYPE TYPE ZFREIGHT_HEADER-FILLING_TYPE,
        FILING_DES TYPE ZFREIGHT_HEADER-FILING_DES,
        FREIGHT_CHARGE TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE,
        LODING_CHARGE TYPE ZFREIGHT_HEADER-LODING_CHARGE,
        UNLOAD_CHARGE TYPE ZFREIGHT_HEADER-UNLOAD_CHARGE,
        HALT_CHARGE TYPE ZFREIGHT_HEADER-HALT_CHARGE,
        LR_CHARGE TYPE ZFREIGHT_HEADER-LR_CHARGE,
        NO_OF_DAYS TYPE ZFREIGHT_HEADER-NO_OF_DAYS,
        VECHILE_NUMBER TYPE ZFREIGHT_HEADER-VECHILE_NUMBER,
        CRDATE TYPE ZFREIGHT_HEADER-CRDATE,
        CRTIME TYPE ZFREIGHT_HEADER-CRTIME,
        CREATED_BY TYPE ZFREIGHT_HEADER-CREATED_BY,
        TRN_VALUE TYPE ZFREIGHT_HEADER-TRN_VALUE,
        APR_STA TYPE ZFREIGHT_HEADER-APR_STA,
        REMARKS TYPE ZFREIGHT_HEADER-REMARKS,
        LOCAL_VENDOR TYPE ZFREIGHT_HEADER-LOCAL_VENDOR,
        LO_VENDORNAME TYPE ZFREIGHT_HEADER-LO_VENDORNAME,
        LOCAL_CHARGE TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,
      END OF TY_ZFREIGHT_HEADER,

      BEGIN OF TY_HSTA_HEADER,
        MANDT TYPE ZFREIGHT_HEADER-MANDT,
        TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO,
        STATUS TYPE ZFREIGHT_HEADER-STATUS,
        VENDOR_CODE TYPE ZFREIGHT_HEADER-VENDOR_CODE,
        VENDOR_NAME TYPE ZFREIGHT_HEADER-VENDOR_NAME,
        FROM_CODE TYPE ZFREIGHT_HEADER-FROM_CODE,
        FROM_LOC TYPE ZFREIGHT_HEADER-FROM_LOC,
        CITY_ID TYPE ZFREIGHT_HEADER-CITY_ID,
        TO_LOC TYPE ZFREIGHT_HEADER-TO_LOC,
        TRUCK_TYPE TYPE ZFREIGHT_HEADER-TRUCK_TYPE,
        TRUCK_DES TYPE ZFREIGHT_HEADER-TRUCK_DES,
        FILLING_TYPE TYPE ZFREIGHT_HEADER-FILLING_TYPE,
        FILING_DES TYPE ZFREIGHT_HEADER-FILING_DES,
        FREIGHT_CHARGE TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE,
        LODING_CHARGE TYPE ZFREIGHT_HEADER-LODING_CHARGE,
        UNLOAD_CHARGE TYPE ZFREIGHT_HEADER-UNLOAD_CHARGE,
        HALT_CHARGE TYPE ZFREIGHT_HEADER-HALT_CHARGE,
        LR_CHARGE TYPE ZFREIGHT_HEADER-LR_CHARGE,
        NO_OF_DAYS TYPE ZFREIGHT_HEADER-NO_OF_DAYS,
        VECHILE_NUMBER TYPE ZFREIGHT_HEADER-VECHILE_NUMBER,
        CRDATE TYPE ZFREIGHT_HEADER-CRDATE,
        CRTIME TYPE ZFREIGHT_HEADER-CRTIME,
        CREATED_BY TYPE ZFREIGHT_HEADER-CREATED_BY,
        TRN_VALUE TYPE ZFREIGHT_HEADER-TRN_VALUE,
        APR_STA,
        REMARKS TYPE ZFREIGHT_HEADER-REMARKS,
      END OF TY_HSTA_HEADER,

   BEGIN OF TY_ZFREIGHT_TYPE,
        MANDT TYPE ZFREIGHT_TYPE-MANDT,
        FTYPE TYPE ZFREIGHT_TYPE-FTYPE,
        FDES TYPE ZFREIGHT_TYPE-FDES,
      END OF TY_ZFREIGHT_TYPE,

  BEGIN OF TY_ZFREIGHT_FLOAD,
*        MANDT TYPE ZFREIGHT_FLOAD-MANDT,
        FTYPE TYPE ZFREIGHT_FLOAD-FTYPE,
        TCAP TYPE ZFREIGHT_FLOAD-TCAP,
        CCODE TYPE ZFREIGHT_FLOAD-CCODE,
        TNAME TYPE ZFREIGHT_FLOAD-TNAME,
        FLOC TYPE ZFREIGHT_FLOAD-FLOC,
        TLOC TYPE ZFREIGHT_FLOAD-TLOC,
        ZPPT TYPE ZFREIGHT_FLOAD-ZPPT,
        VFROM TYPE ZFREIGHT_FLOAD-VFROM,
        VTO TYPE ZFREIGHT_FLOAD-VTO,
      END OF TY_ZFREIGHT_FLOAD,


   BEGIN OF TY_ZFREIGHT_HLOAD,
*        MANDT TYPE ZFREIGHT_HLOAD-MANDT,
        FTYPE TYPE ZFREIGHT_HLOAD-FTYPE,
        CCODE TYPE ZFREIGHT_HLOAD-CCODE,
        TNAME TYPE ZFREIGHT_HLOAD-TNAME,
        FLOC TYPE ZFREIGHT_HLOAD-FLOC,
        TLOC TYPE ZFREIGHT_HLOAD-TLOC,
        ZPRI TYPE ZFREIGHT_HLOAD-ZPRI,
        VFROM TYPE ZFREIGHT_HLOAD-VFROM,
        VTO TYPE ZFREIGHT_HLOAD-VTO,
      END OF TY_ZFREIGHT_HLOAD,



     BEGIN OF TY_ZTRUCK,
        MANDT TYPE ZTRUCK-MANDT,
        TRUCK TYPE ZTRUCK-TRUCK,
        DES TYPE ZTRUCK-DES,
      END OF TY_ZTRUCK,

     BEGIN OF TY_ZFILLING,
        MANDT TYPE ZFILLING-MANDT,
        FILL TYPE ZFILLING-FILL,
        DES TYPE ZFILLING-DES,
      END OF TY_ZFILLING,


*   BEGIN OF TY_ZFREIGHT_HEADER,
*        MANDT TYPE ZFREIGHT_HEADER-MANDT,
*        TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO, " Generated
*        STATUS TYPE ZFREIGHT_HEADER-STATUS, " ZINV or ZSTO
*        VENDOR_NAME TYPE ZFREIGHT_HEADER-VENDOR_NAME, " Picked from table control
*        FROM_LOC TYPE ZFREIGHT_HEADER-FROM_LOC, " Picked from table control
*        TO_LOC TYPE ZFREIGHT_HEADER-TO_LOC, " Picked from table control
*        TRUCK_TYPE TYPE ZFREIGHT_HEADER-TRUCK_TYPE, " Based on Truck description
*        TRUCK_DES TYPE ZFREIGHT_HEADER-TRUCK_DES, " Picked from table control
*        FILLING_TYPE TYPE ZFREIGHT_HEADER-FILLING_TYPE, " Based on filling description
*        FILING_DES TYPE ZFREIGHT_HEADER-FILING_DES, " Picked from table control
*        FREIGHT_CHARGE TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE,
*        LODING_CHARGE TYPE ZFREIGHT_HEADER-LODING_CHARGE,
*        UNLOAD_CHARGE TYPE ZFREIGHT_HEADER-LODING_CHARGE,
*        VECHILE_NUMBER TYPE ZFREIGHT_HEADER-VECHILE_NUMBER,
*        CRDATE TYPE ZFREIGHT_HEADER-CRDATE,
*      END OF TY_ZFREIGHT_HEADER,

   BEGIN OF TY_ZFREIGHT_ITEM,
        MANDT TYPE ZFREIGHT_ITEM-MANDT,
        TRIP_NO TYPE ZFREIGHT_ITEM-TRIP_NO,
        INVOICE_NO TYPE ZFREIGHT_ITEM-INVOICE_NO,
        CUSTOMER_NAME TYPE ZFREIGHT_ITEM-CUSTOMER_NAME,
        INVOICE_DATE TYPE ZFREIGHT_ITEM-INVOICE_DATE,
        INVOICE_AMOUNT TYPE ZFREIGHT_ITEM-INVOICE_AMOUNT,
        WEIGHT TYPE ZFREIGHT_ITEM-WEIGHT,
        COMPANY_CODE TYPE ZFREIGHT_ITEM-COMPANY_CODE,
        LOCATION TYPE ZFREIGHT_ITEM-LOCATION,
        LR_NO TYPE ZFREIGHT_ITEM-LR_NO,
        STATUS TYPE ZFREIGHT_ITEM-STATUS,
*        REMARKS TYPE ZFREIGHT_ITEM-REMARKS,
      END OF TY_ZFREIGHT_ITEM,

   BEGIN OF TY_ZFREIGHT_TRAN,
        MANDT TYPE ZFREIGHT_TRAN-MANDT,
        TRIP_NO TYPE ZFREIGHT_TRAN-TRIP_NO,
        LINE_ITEM TYPE ZFREIGHT_TRAN-LINE_ITEM,
        CHARGE_LOC TYPE ZFREIGHT_TRAN-CHARGE_LOC,
        CHARGE_TYPE TYPE ZFREIGHT_TRAN-CHARGE_TYPE,
        VENDOR_CODE TYPE ZFREIGHT_TRAN-VENDOR_CODE,
        NO_OF_DAYS TYPE ZFREIGHT_TRAN-NO_OF_DAYS,
        TOTAT_AMOUNT TYPE ZFREIGHT_TRAN-TOTAT_AMOUNT,
      END OF TY_ZFREIGHT_TRAN,

     BEGIN OF TY_APR_ZFREIGHT_HEADER,
        TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO,
        VENDOR_NAME TYPE ZFREIGHT_HEADER-VENDOR_NAME,
        FROM_LOC TYPE ZFREIGHT_HEADER-FROM_LOC,
        TO_LOC TYPE ZFREIGHT_HEADER-TO_LOC,
        CRDATE TYPE ZFREIGHT_HEADER-CRDATE,
        CRTIME TYPE ZFREIGHT_HEADER-CRTIME,
        CREATED_BY TYPE ZFREIGHT_HEADER-CREATED_BY,
        TRN_VALUE TYPE ZFREIGHT_HEADER-TRN_VALUE,
        APR_STA,
      END OF TY_APR_ZFREIGHT_HEADER,

   BEGIN OF TY_LRREM,
       LNO TYPE I,
       LR_NO TYPE ZFREIGHT_ITEM-LR_NO,
*       REMARKS TYPE ZFREIGHT_ITEM-REMARKS,
   END OF TY_LRREM,

BEGIN OF TY_DOCTYP,
     TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO, " Generated
*     STATUS TYPE ZFREIGHT_HEADER-STATUS, " ZINV or ZSTO
END OF TY_DOCTYP,

      BEGIN OF TY_PROINV, " Already processed invoice in Trip sheet
        INVOICE_NO TYPE ZFREIGHT_ITEM-INVOICE_NO,
      END OF TY_PROINV,

      BEGIN OF TY_SHINV, " Search help structure for Invoice Number
        VBELN TYPE VBRK-VBELN,
      END OF TY_SHINV,

      BEGIN OF TY_SHSTO, " Search help structure for Invoice Number
        MBLNR TYPE MSEG-MBLNR,
      END OF TY_SHSTO,

     BEGIN OF TY_PLANT, "
        PLANT TYPE ZTRIP_PLANT-PLANT,
        MAPPING_PLANT TYPE ZTRIP_PLANT-MAPPING_PLANT,
      END OF TY_PLANT,


     BEGIN OF TY_DOCTRP,
        TRIP_NO TYPE ZFREIGHT_ITEM-TRIP_NO,
        INVOICE_NO TYPE ZFREIGHT_ITEM-INVOICE_NO,
      END OF TY_DOCTRP,

     BEGIN OF TY_LFA1,
          LIFNR TYPE LFA1-LIFNR,
          NAME1 TYPE LFA1-NAME1,
        END OF TY_LFA1,

     BEGIN OF TY_LLFA1,
          LIFNR TYPE LFA1-LIFNR,
          NAME1 TYPE LFA1-NAME1,
      END OF TY_LLFA1,

     BEGIN OF TY1_T001W,
          WERKS TYPE T001W-WERKS,
          NAME1 TYPE T001W-NAME1,
     END OF TY1_T001W ,

     BEGIN OF TY_TOCITY,
          CITY TYPE ZFREIGHT_CITY-AREA,
     END OF TY_TOCITY,

     BEGIN OF TY_SH_COMPNAM,
        FROM_LOC TYPE ZFREIGHT_HEADER-FROM_LOC,
        END OF TY_SH_COMPNAM,

     BEGIN OF TY_SH_TRN,
        TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO,
      END OF TY_SH_TRN.

TYPES : BEGIN OF TY_FTYPE,
         FTYPE TYPE ZFREIGHT_TYPE-FTYPE,
         FDES TYPE ZFREIGHT_TYPE-FDES,
        END OF TY_FTYPE,

        BEGIN OF TY_FLOC,
         "  TRIP_NO TYPE ZFREIGHT_ITEM-TRIP_NO,
           LOCATION TYPE ZFREIGHT_ITEM-LOCATION,
        END OF TY_FLOC.

TYPES : BEGIN OF TY_APP,
         LIFNR TYPE ZTRIP_APPROVAL-LIFNR,
         PERCENTAGE TYPE ZTRIP_APPROVAL-PERCENTAGE,
       END OF TY_APP.

DATA : IT_APP TYPE TABLE OF TY_APP,
       WA_APP TYPE TY_APP.

DATA : IT_FTYPE TYPE TABLE OF TY_FTYPE ,
       IT_FLOC TYPE TABLE OF TY_FLOC.


DATA:GT_TC1 TYPE TABLE OF TY_TC1, " ZFREIGHT_ITEM - Item Table  for table control
     GS_TC1 TYPE TY_TC1,
     WA_TC1 TYPE TY_TC1,
     GT_TC2 TYPE TABLE OF TY_TC2,
     GS_TC2 TYPE TY_TC2,
*     GT_TC2 TYPE TABLE OF TY_TC2,
*     GS_TC2 TYPE TY_TC2,
     GT_SEL TYPE TABLE OF TY_SEL,
     GS_SEL TYPE TY_SEL,
     GT_VBRK TYPE TABLE OF TY_VBRK,
     GS_VBRK TYPE TY_VBRK,
     GT_VBRP TYPE TABLE OF TY_VBRP,
     GS_VBRP TYPE TY_VBRP,
     GS_KNA1 TYPE TY_KNA1,
     GS_LVBRP TYPE TY_LVBRP,
     GS_VBPA TYPE TY_VBPA,
     GS_LKNA1 TYPE TY_LKNA1,
     GT_MSEG TYPE TABLE OF TY_MSEG,
     GS_MSEG TYPE TY_MSEG,
     GT1_MSEG TYPE TABLE OF TY_MSEG,
     GS1_MSEG TYPE TY_MSEG,
     GS_T001W TYPE TY_T001W,
     GT1_MARA TYPE TABLE OF TY_MARA,
     GS1_MARA TYPE TY_MARA,
     GS_MARA TYPE TY_MARA,
     GT_APR TYPE TABLE OF TY_APR_ZFREIGHT_HEADER,
     GS_APR TYPE TY_APR_ZFREIGHT_HEADER,
*     GT_CHK TYPE TABLE OF LVC_S_ROID,
*     GS_CHK TYPE LVC_S_ROID,
*LT_ROWS             TYPE LVC_T_ROW,
*LT_ROID             TYPE LVC_T_ROID.

GT_ROWS TYPE TABLE OF LVC_S_ROW,
GS_ROWS TYPE LVC_S_ROW,



     GT_CNM TYPE TABLE OF TY_SH_COMPNAM,
     GS_CNM TYPE TY_SH_COMPNAM,
     GT_FHEAD TYPE TABLE OF TY_ZFREIGHT_HEADER,
     GS_FHEAD TYPE TY_ZFREIGHT_HEADER,
     GT_HSTA TYPE TABLE OF TY_HSTA_HEADER,
     GS_HSTA TYPE TY_HSTA_HEADER,
*     GS_LOADC TYPE TY_ZFREIGHT_FLOAD, " Freight loading Charges
     GT_FITEM TYPE TABLE OF TY_ZFREIGHT_ITEM,
     GS_FITEM TYPE TY_ZFREIGHT_ITEM,
     GT_FTRAN TYPE TABLE OF TY_ZFREIGHT_TRAN,
     GS_FTRAN TYPE TY_ZFREIGHT_TRAN,
     GT_FLOAD TYPE TABLE OF TY_ZFREIGHT_FLOAD,
     GS_FLOAD TYPE TY_ZFREIGHT_FLOAD,
     GT_HLOAD TYPE TABLE OF TY_ZFREIGHT_HLOAD,
     GS_HLOAD TYPE TY_ZFREIGHT_HLOAD,
     GT_LTYPE TYPE TABLE OF TY_ZFREIGHT_TYPE,
     GS_LTYPE TYPE TY_ZFREIGHT_TYPE,
     GT_LRREM TYPE TABLE OF TY_LRREM,
     GS_LRREM TYPE TY_LRREM,
     GT_TTYPE TYPE TABLE OF TY_ZTRUCK,
     GS_TTYPE TYPE TY_ZTRUCK,
     GT_DOC TYPE TABLE OF TY_DOCTYP,
     GS_DOC TYPE TY_DOCTYP,
     GT_TRN TYPE TABLE OF TY_SH_TRN,
     GS_TRN TYPE TY_SH_TRN,
     GT_CKTRA TYPE TABLE OF TY_ZFREIGHT_TRAN, " Update additional freight structure
     GS_CKTRA TYPE TY_ZFREIGHT_TRAN,


     LREF_ALV TYPE REF TO CL_GUI_ALV_GRID,
     LREF_CON TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
     GT_FCAT_TC1 TYPE LVC_T_FCAT,
     GS_FCAT_TC1 TYPE LVC_S_FCAT,
     GS_LAYOUT_TC1 TYPE LVC_S_LAYO,
     GT_FCAT_TC2 TYPE LVC_T_FCAT,
     GS_FCAT_TC2 TYPE LVC_S_FCAT,
     GT_FCAT_TC3 TYPE LVC_T_FCAT,
     GS_FCAT_TC3 TYPE LVC_S_FCAT,
     GS_LAYOUT_TC2 TYPE LVC_S_LAYO,
     GT_CELLS  TYPE TABLE OF LVC_T_CELL,
     GS_CELLS  TYPE LVC_S_CELL,
     IND TYPE TABLE OF LVC_S_ROW,
     WA_IND TYPE LVC_S_ROID,
     ROW TYPE TABLE OF LVC_S_ROID,
     WA_ROW TYPE LVC_S_ROID,
     LV_SROW TYPE I,


     LV_NOL TYPE I,
     LV_WEIGHT TYPE VBRP-NTGEW,
     LV_TOTWT TYPE VBRP-NTGEW, " Total Weight of the invoice to calc half load rate
     LV_AMOUNT TYPE VBRK-NETWR,
     LV_TRNMAX TYPE ZFREIGHT_HEADER-TRIP_NO,
     LV_TTYPE TYPE ZFREIGHT_HEADER-TRUCK_TYPE,
     LV_FTYPE TYPE ZFILLING-FILL,
     LV_ITEM TYPE ZFREIGHT_TRAN-LINE_ITEM,
     LV_LOC TYPE ZFREIGHT_ITEM-LOCATION,
     LV_LR TYPE ZFREIGHT_ITEM-LR_NO,
*     LV_REM TYPE ZFREIGHT_ITEM-REMARKS,
     LV_FLOC TYPE ZFREIGHT_HEADER-FROM_LOC , " From Location
     LV_TLOC TYPE ZFREIGHT_FLOAD-TLOC, " To Location
     LV_TRCODE TYPE LFA1-LIFNR,
     LV_LTRCODE TYPE LFA1-LIFNR,
     LV_LOCCO TYPE LFA1-LIFNR,
     LV_TRCODE1 TYPE LFA1-LIFNR,
     LV_LTRCODE1 TYPE LFA1-LIFNR,
     LV_LOCCO1 TYPE LFA1-LIFNR,
     LV_TCAP TYPE ZTRUCK-TRUCK, " Truck Type
     LV_TRAN TYPE LFA1-LIFNR, " Transporter
     LV_NAME TYPE LFA1-NAME1,
     LV_LNAME TYPE LFA1-NAME1,
     LTV_NAME TYPE LFA1-NAME1,
     LV_FNAME TYPE T001W-NAME1,
     LV_CITYID TYPE ZFREIGHT_HEADER-CITY_ID ,
     LV_ADDTOT TYPE VBRK-NETWR, " Additional Charges total
     LV_CCODE TYPE T001-BUKRS,
     LV_MOD,
     LV_WHERE TYPE STRING, " Dynamic where condition
     GS_CHKINV TYPE TY_DOCTRP, " Check if the invoice is alreday processed
     GS_CHKSTO TYPE TY_DOCTRP, " Check if the Material Document is already processed
     IP_LOC TYPE ZFREIGHT_TRAN-CHARGE_LOC, " Charge location
     IP_CT TYPE ZFREIGHT_TRAN-CHARGE_TYPE, " Charge Type
     IP_LOCA TYPE ZFREIGHT_TRAN-VENDOR_CODE,
     IP_LOCA1 TYPE ZFREIGHT_HEADER-VENDOR_CODE,
     IP_CA TYPE ZFREIGHT_TRAN-TOTAT_AMOUNT, " Charge Amount
     IP_DAY TYPE ZFREIGHT_TRAN-NO_OF_DAYS, " No of Days
     IP_TRN TYPE ZFREIGHT_HEADER-TRIP_NO,
     IP_REM TYPE ZFREIGHT_HEADER-REMARKS,
     OP_OFCHR TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE, " Header
     OP_LCHR TYPE ZFREIGHT_HEADER-LODING_CHARGE, " Header
     OP_UCHR TYPE ZFREIGHT_HEADER-LODING_CHARGE, " Header
     OP_HCRG TYPE ZFREIGHT_HEADER-HALT_CHARGE,
     OP_LRC TYPE ZFREIGHT_HEADER-LR_CHARGE,
     OP_ACT TYPE VBRK-NETWR, " Additional charges Total
     OP_TRN TYPE ZFREIGHT_HEADER-TRIP_NO, " Header -  TRN Number
     IP_VNO TYPE ZFREIGHT_HEADER-VECHILE_NUMBER, " Header
     IP_TRANS TYPE ZFREIGHT_HEADER-VENDOR_NAME, " Header
     IP_LTRANS TYPE ZFREIGHT_HEADER-VENDOR_NAME, " Header
     IP_TRCODE TYPE LFA1-LIFNR,
     IP_LTRCODE TYPE LFA1-LIFNR,
     IP_FLOC TYPE ZFREIGHT_HEADER-FROM_LOC, " Header
     IP_TLOC TYPE ZFREIGHT_HEADER-TO_LOC, " Header
     IP_TCAP TYPE ZFREIGHT_HEADER-TRUCK_DES, " Header
     IP_FILL TYPE ZFREIGHT_HEADER-FILING_DES, " Header
     IP_NOD TYPE ZFREIGHT_HEADER-NO_OF_DAYS,
     IP_CNM TYPE  ZFREIGHT_HEADER-VENDOR_NAME, " Company Name
     IP_CCD TYPE T001-BUKRS,
     LOC_CHARGE TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,

*9004 - Edit Invoice

      IPEI_TRANS  TYPE ZFREIGHT_HEADER-VENDOR_NAME, " Header
      IPEI_FLOC TYPE ZFREIGHT_HEADER-FROM_LOC, " Header
      IPEI_TLOC TYPE ZFREIGHT_HEADER-TO_LOC, " Header
      IPEI_FILL  TYPE ZFREIGHT_HEADER-FILING_DES, " Header
      IPEI_TCAP TYPE ZFREIGHT_HEADER-TRUCK_DES, " Header
      OPEI_OFCHR TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE, " Header
      OPEI_LCHR TYPE ZFREIGHT_HEADER-LODING_CHARGE, " Header
      OPEI_UCHR TYPE ZFREIGHT_HEADER-LODING_CHARGE, " Header
      OPEI_HCRG TYPE ZFREIGHT_HEADER-HALT_CHARGE,
      IPEI_VNO TYPE ZFREIGHT_HEADER-VECHILE_NUMBER, " Header

      IPEI_LOC TYPE ZFREIGHT_TRAN-CHARGE_LOC, " Charge location
      IPEI_CT TYPE ZFREIGHT_TRAN-CHARGE_TYPE, " Charge Type
      IPEI_DAY TYPE ZFREIGHT_TRAN-TOTAT_AMOUNT, " Charge Amount
      IPEI_CA  TYPE ZFREIGHT_TRAN-NO_OF_DAYS, " No of Days
      OPEI_ACT TYPE VBRK-NETWR, " Additional charges Total

**************** Print related Declarations Start*****************


     FORMNAME TYPE TDSFNAME VALUE 'ZSF_TRIP_SHEET_NEW',
     FM_NAME TYPE RS38L_FNAM, " Function Module name

     GT_SFHEAD TYPE TABLE OF ZFREIGHT_HEADER,
     GS_SFHEAD TYPE   ZFREIGHT_HEADER,
     GT_SFITEM TYPE TABLE OF ZFREIGHT_ITEM,
     GS_SFITEM TYPE ZFREIGHT_ITEM,
     WA_SFITEM TYPE ZFREIGHT_ITEM,


**************** Print related Declarations End*****************



*9004 - Edit Invoice End

************* Tables related to Search help *************
     IT_RETURN TYPE STANDARD TABLE OF DDSHRETVAL,
     IT_RETURN1 TYPE STANDARD TABLE OF DDSHRETVAL,
     WA_RETURN TYPE DDSHRETVAL,
     IT_LFA1 TYPE TABLE OF TY_LFA1,
     LT_LFA1 TYPE TABLE OF TY_LFA1,
     IT_LLFA1 TYPE TABLE OF TY_LLFA1,
     LT_LLFA1 TYPE TABLE OF TY_LLFA1,
     IT1_T001W TYPE TABLE OF TY1_T001W,
     IT_TOCITY TYPE TABLE OF TY_TOCITY,
     IT_DYFIELDS TYPE TABLE OF DYNPREAD,
     GS_DYFIELDS TYPE DYNPREAD,
     GT_SHINV TYPE TABLE OF TY_SHINV,
     GS_SHINV TYPE TY_SHINV,
     GT_PLANT TYPE TABLE OF TY_PLANT,
     GS_PLANT TYPE TY_PLANT,
     GT_PRINV TYPE TABLE OF TY_PROINV,
     GS_PRINV TYPE TY_PROINV,
     GT_SHSTOI TYPE TABLE OF TY_SHSTO,
     GS_SHSTOI TYPE TY_SHSTO,
     GT_SHSTO TYPE TABLE OF TY_SHSTO,
     GS_SHSTO TYPE TY_SHSTO,
     WA_LFA1 TYPE TABLE OF TY_LFA1 WITH HEADER LINE,
************** Tables related to Search help ************

************** Tables for deletion from DB************
      GS_DELHEAD TYPE ZFREIGHT_HEADER,
      GT_DELITEM TYPE TABLE OF ZFREIGHT_ITEM,
      GS_DELITEM TYPE ZFREIGHT_ITEM,
      GT_DELTRAN TYPE TABLE OF ZFREIGHT_TRAN,
      GS_DELTRAN TYPE ZFREIGHT_TRAN,

************** Tables for deletion from DB ************

     RB_STO,  " Trip Sheet for Stock Tranfer - Screen 9001
     RB_INV,  " Trip Sheet for Invoice - Screen 9002
     RB_CTR, " Create Trip sheet
     RB_EDT, " Edit Trip sheet
     RB_PRI, " Print Trip Sheet
     RB_REP, " Trip sheet Report
     RB_APR, " Trip sheet Approve
     RB_DEL, " Trip sheet Delete
     OK_CODE TYPE SY-UCOMM,
     LV_NOLTC1 TYPE I,
     LV_SEL_LINE LIKE SY-LOOPC,
     LV_TABIX LIKE SY-TABIX,
     LV_TABTRA TYPE I,
     LV_TRALIN TYPE ZFREIGHT_TRAN-LINE_ITEM,
     LV_TYPE, " Trip sheet type Indicator
     LV_NR TYPE VBELN, " Number range ref to VBELN
     LV_OBJ TYPE INRI-OBJECT, " Number generation Object name
     INPUT TYPE CHAR100,
     OUTPUT TYPE ZFREIGHT_ITEM-INVOICE_NO,
     FNAM(30) VALUE 'GS_TC1-INVOICE_NO',
     FVAL(50),
     LV_ACTION,
     DYNPRO(4),
     DYNPRO2(4),
     DYNPRO3(4),
     SEL TYPE C,
     CHECKED.

DATA : LEN TYPE I,
       LEN1 TYPE I.

DATA : RE_LIN,
       RE_LIN1.

DATA : LV_PER TYPE ZTRIP_APPROVAL-PERCENTAGE ,
       LV_VEN TYPE ZTRIP_APPROVAL-LIFNR,
       LV_VEN1 TYPE ZTRIP_APPROVAL-LIFNR,
       TOT_INV TYPE VBRK-NETWR ,
       TOT_INV1 TYPE VBRK-NETWR,
       LV_TOT TYPE VBRK-NETWR .

DATA : LV_TR TYPE ZFREIGHT_HEADER-TRIP_NO .

DATA : LV_EDI TYPE ZFREIGHT_HEADER-TRIP_NO .

TYPES : BEGIN OF GS_EDI,
         FREIGHT_CHARGE TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE,
         LODING_CHARGE TYPE ZFREIGHT_HEADER-LODING_CHARGE,
         UNLOAD_CHARGE TYPE ZFREIGHT_HEADER-UNLOAD_CHARGE,
         HALT_CHARGE TYPE ZFREIGHT_HEADER-HALT_CHARGE,
         LR_CHARGE TYPE ZFREIGHT_HEADER-LR_CHARGE,
       END OF GS_EDI.

DATA : WA_EDI TYPE GS_EDI .

DATA : WA_EDP TYPE GS_EDI.

DATA :    LV_FC TYPE ZFREIGHT_HEADER-FREIGHT_CHARGE ,
           LV_LC TYPE ZFREIGHT_HEADER-LODING_CHARGE ,
           LV_UC TYPE ZFREIGHT_HEADER-UNLOAD_CHARGE ,
           LV_HC TYPE ZFREIGHT_HEADER-HALT_CHARGE ,
           LV_LRC TYPE ZFREIGHT_HEADER-LR_CHARGE .

DATA : IT_ZFREIGHT_TRAN TYPE TABLE OF  TY_TC2,
       WA_ZFREIGHT_TRAN TYPE TY_TC2 .

DATA : LV_INV TYPE ZFREIGHT_ITEM-INVOICE_AMOUNT .

DATA : L_PLANT TYPE T001W-WERKS.
DATA : LM_PLANT TYPE T001W-WERKS.
DATA : LM_NAME TYPE T001W-NAME1.

DATA : LV_MAP TYPE T001W-WERKS.

DATA : LV_EFROM TYPE ZFREIGHT_HEADER-FROM_LOC . " From Location

DATA : LV_EPLANT TYPE T001W-WERKS.

*LV_MANDT = SY-MANDT.

DEFINE ADD_FCAT_INV_9001.
  CLEAR GS_FCAT_TC1.
  GS_FCAT_TC1-COL_POS = &1.
  GS_FCAT_TC1-FIELDNAME = &2.
  GS_FCAT_TC1-COLTEXT = &3.
  GS_FCAT_TC1-OUTPUTLEN = &4.
  GS_FCAT_TC1-EDIT = &5.
  GS_FCAT_TC1-REF_TABLE = &6.
  GS_FCAT_TC1-DOMNAME   = &7.
  APPEND GS_FCAT_TC1 TO GT_FCAT_TC1.
END-OF-DEFINITION.

DEFINE ADD_FCAT_AFR_9001.
  CLEAR GS_FCAT_TC2.
  GS_FCAT_TC2-COL_POS = &1.
  GS_FCAT_TC2-FIELDNAME = &2.
  GS_FCAT_TC2-COLTEXT = &3.
  GS_FCAT_TC2-OUTPUTLEN = &4.
  GS_FCAT_TC2-EDIT = &5.
  GS_FCAT_TC2-REF_TABLE = &6.
  GS_FCAT_TC2-DOMNAME   = &7.
  APPEND GS_FCAT_TC2 TO GT_FCAT_TC2.
END-OF-DEFINITION.


DEFINE ADD_FCAT_AFR_9005.
  CLEAR GS_FCAT_TC3.
  GS_FCAT_TC3-COL_POS = &1.
  GS_FCAT_TC3-FIELDNAME = &2.
  GS_FCAT_TC3-COLTEXT = &3.
  GS_FCAT_TC3-OUTPUTLEN = &4.
  GS_FCAT_TC3-EDIT = &5.
  GS_FCAT_TC3-REF_TABLE = &6.
  GS_FCAT_TC3-DOMNAME   = &7.
  GS_FCAT_TC3-CHECKBOX = &8.
  GS_FCAT_TC3-EDIT = &9.
  APPEND GS_FCAT_TC3 TO GT_FCAT_TC3.
END-OF-DEFINITION.


CONTROLS: TC_1 TYPE TABLEVIEW USING SCREEN 9002,
          TCEI_1 TYPE TABLEVIEW USING SCREEN 9004. " Trip sheet frieght track input table control

SELECTION-SCREEN BEGIN OF SCREEN 2100 AS SUBSCREEN .
SELECT-OPTIONS: SO_TRN FOR ZFREIGHT_HEADER-TRIP_NO.
SELECTION-SCREEN END OF SCREEN 2100.
SELECTION-SCREEN BEGIN OF SCREEN 2102 AS SUBSCREEN .
SELECT-OPTIONS: SO_CDATE FOR ZFREIGHT_HEADER-CRDATE.
SELECTION-SCREEN END OF SCREEN 2102.
SELECTION-SCREEN BEGIN OF SCREEN 2104 AS SUBSCREEN .
SELECT-OPTIONS: SO_LIFNR FOR ZFREIGHT_HEADER-VENDOR_CODE. "CHAR10. " LFA1-LIFNR.
SELECTION-SCREEN END OF SCREEN 2104.

" Empty sub screen for hiding Select-options in the screen
SELECTION-SCREEN BEGIN OF SCREEN 2101 AS SUBSCREEN .

SELECTION-SCREEN END OF SCREEN 2101.
" Empty sub screen for hiding Select-options in the screen
SELECTION-SCREEN BEGIN OF SCREEN 2103 AS SUBSCREEN .

SELECTION-SCREEN END OF SCREEN 2103.
*" Empty sub screen for hiding Select-options in the screen
SELECTION-SCREEN BEGIN OF SCREEN 2105 AS SUBSCREEN .

SELECTION-SCREEN END OF SCREEN 2105.

*&---------------------------------------------------------------------*
*&      Form  FILL_INVOICE_CC_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_INVOICE_CC_9001 .

  CREATE OBJECT LREF_CON
    EXPORTING
*        PARENT                      =
      CONTAINER_NAME              = 'CC1_INV'
*        STYLE                       =
*        LIFETIME                    = lifetime_default
*        REPID                       =
*        DYNNR                       =
*        NO_AUTODEF_PROGID_DYNNR     =
*      EXCEPTIONS
*        CNTL_ERROR                  = 1
*        CNTL_SYSTEM_ERROR           = 2
*        CREATE_ERROR                = 3
*        LIFETIME_ERROR              = 4
*        LIFETIME_DYNPRO_DYNPRO_LINK = 5
*        OTHERS                      = 6
      .
  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CREATE OBJECT LREF_ALV
    EXPORTING
*    I_SHELLSTYLE      = 0
*    I_LIFETIME        =
      I_PARENT          = LREF_CON
*    I_APPL_EVENTS     = space
*    I_PARENTDBG       =
*    I_APPLOGPARENT    =
*    I_GRAPHICSPARENT  =
*    I_NAME            =
*    I_FCAT_COMPLETE   = SPACE
*  EXCEPTIONS
*    ERROR_CNTL_CREATE = 1
*    ERROR_CNTL_INIT   = 2
*    ERROR_CNTL_LINK   = 3
*    ERROR_DP_CREATE   = 4
*    OTHERS            = 5
      .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  GS_LAYOUT_TC1-ZEBRA = 'X'.
  GS_LAYOUT_TC1-NO_TOOLBAR = 'X'.

  ADD_FCAT_INV_9001:

       1 'VBELN' 'Invoice No' 10 'X' 'VBRK' 'VBELN',
       2 'KUNAG' 'Customer Name' 20 ' ' ' ' ' ',
       3 'NETWR' 'Invoice Amount' 14 ' ' ' ' ' ',
       4 'NTGEW' 'Weight in KGS'      13 ' ' ' ' ' ',
       5 'BUKRS' 'Company Code' 12 ' ' ' ' ' ',
       6 'LOC'  'Location'      10 'X' ' ' ' ',
       7 'LRNO' 'Lorry Number(LRN)' 17 'X' ' ' ' '.


  CALL METHOD LREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
  EXPORTING
*    I_BUFFER_ACTIVE               =
*    I_BYPASSING_BUFFER            =
*    I_CONSISTENCY_CHECK           =
*    I_STRUCTURE_NAME              =
*    IS_VARIANT                    =
*    I_SAVE                        =
*    I_DEFAULT                     = 'X'
     IS_LAYOUT                     = GS_LAYOUT_TC1
*    IS_PRINT                      =
*    IT_SPECIAL_GROUPS             =
*    IT_TOOLBAR_EXCLUDING          =
*    IT_HYPERLINK                  =
*    IT_ALV_GRAPHICS               =
*    IT_EXCEPT_QINFO               =
*    IR_SALV_ADAPTER               =
    CHANGING
      IT_OUTTAB                     = GT_TC1
      IT_FIELDCATALOG               = GT_FCAT_TC1
*    IT_SORT                       =
*    IT_FILTER                     =
*  EXCEPTIONS
*    INVALID_PARAMETER_COMBINATION = 1
*    PROGRAM_ERROR                 = 2
*    TOO_MANY_LINES                = 3
*    OTHERS                        = 4
          .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  REFRESH GT_FCAT_TC1.
  CLEAR GS_LAYOUT_TC2.

ENDFORM.                    " FILL_INVOICE_CC_9001

*&---------------------------------------------------------------------*
*&      Form  FILL_ADD_FRIEGHT_9001
*&---------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_ADD_FRIEGHT_9001 .


  IF IP_LOC IS NOT INITIAL AND IP_CT IS NOT INITIAL AND IP_CA IS NOT INITIAL.

    IF IP_LOCA EQ IP_TRCODE .
      MESSAGE 'Same vendor account is not allowed for this charge' TYPE 'I' .
    ENDIF.

    GS_TC2-CHARGE_LOC = IP_LOC.
    GS_TC2-CHARGE_TYPE = IP_CT.
    GS_TC2-NO_OF_DAYS = IP_DAY.
    GS_TC2-TOTAT_AMOUNT = IP_CA.
    GS_TC2-VENDOR_CODE = IP_LOCA .
    LV_ADDTOT = LV_ADDTOT + GS_TC2-TOTAT_AMOUNT.
    OP_ACT = LV_ADDTOT.
    APPEND GS_TC2 TO GT_TC2.
*    OP_ACT

    CLEAR GS_TC2.


  ENDIF.

  SET CURSOR FIELD 'IP_CA'.
ENDFORM.                    " FILL_ADD_FRIEGHT_9001
*&---------------------------------------------------------------------*
*&      Form  REFRESH_OBJECTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REFRESH_OBJECTS .

  IF LREF_ALV IS NOT INITIAL OR LREF_CON IS NOT INITIAL.

    CALL METHOD: LREF_ALV->FREE, LREF_CON->FREE.
    CLEAR: LREF_ALV, LREF_CON.
    CALL METHOD CL_GUI_CFW=>FLUSH.

  ENDIF.

ENDFORM.                    " REFRESH_OBJECTS

*&---------------------------------------------------------------------*
*&      Form  FILL_SELECT_INVOICE_CC_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_SELECT_INVOICE_CC_9001 .

*  CALL METHOD LREF_ALV->GET_SELECTED_CELLS
*    IMPORTING
*      ET_CELL = GT_CELLS.
*
*  LOOP AT GT_CELLS INTO GS_CELLS.
*
*  ENDLOOP.


*  SELECT VBELN
*         BUKRS
*         NETWR
*         KUNAG
*         FROM VBRK
*         INTO TABLE GT_VBRK
*         WHERE VBELN EQ GS_TC1-VBELN.

ENDFORM.                    " FILL_SELECT_INVOICE_CC_9001


*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.
  SET PF-STATUS '9000_PF'.
  SET TITLEBAR 'TRIP_TITLE'.


  PERFORM SET_PICTURE_MAIN_PAGE.


  CASE OK_CODE.
    WHEN ' '.
      RB_CTR = 'X'.
      LOOP AT SCREEN.
        IF RB_CTR = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
    WHEN 'RBACT' OR 'RPFUN' .
      LOOP AT SCREEN.
        IF RB_CTR = 'X' . "OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_REP = 'X' .
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_APR = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
*          ELSEIF SCREEN-GROUP1 = 'ECN'.
*            SCREEN-INPUT = '1'.
*            SCREEN-INVISIBLE = '0'.
          ENDIF.
        ELSEIF RB_EDT = 'X' OR RB_DEL = 'X'.
          IF SCREEN-GROUP1 = 'ETN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_PRI = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
    WHEN 'RBTYP'.
      LOOP AT SCREEN.
        IF RB_CTR = 'X' ."OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN' .
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_REP = 'X' .
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_APR = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ELSEIF SCREEN-GROUP1 = 'ECN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ENDIF.
        ELSEIF RB_EDT = 'X' OR RB_DEL = 'X'.
          IF SCREEN-GROUP1 = 'ETN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_PRI = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD'  .
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1' .
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
    WHEN 'BACK'.
*      RB_CTR = 'X'.
      LOOP AT SCREEN.
        IF RB_CTR = 'X' OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_APR = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ELSEIF SCREEN-GROUP1 = 'ECN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_EDT = 'X' OR RB_DEL = 'X'.
          IF SCREEN-GROUP1 = 'ETN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD'OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
      "ADDED RAM
      LOOP AT SCREEN.
        IF RB_PRI = 'X' .
          IF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
      "ENDED RAM ON 9/4/2018

    WHEN 'SUB'.
      LOOP AT SCREEN.
        IF RB_CTR = 'X' . "OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_REP = 'X' .
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_APR = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ELSEIF SCREEN-GROUP1 = 'ECN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ENDIF.
        ELSEIF RB_EDT = 'X' OR RB_DEL = 'X'.
          IF SCREEN-GROUP1 = 'ETN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD'OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_PRI = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
    WHEN 'ENTER' .
      LOOP AT SCREEN.
        IF RB_CTR = 'X' . "OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_REP = 'X' .
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_APR = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' OR SCREEN-GROUP1 ='LIN' OR SCREEN-GROUP1 = 'ECN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
*          ELSEIF SCREEN-GROUP1 = 'ECN'.
*            SCREEN-INPUT = '1'.
*            SCREEN-INVISIBLE = '0'.
          ENDIF.
        ELSEIF RB_EDT = 'X' OR RB_DEL = 'X'.
          IF SCREEN-GROUP1 = 'ETN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'CCD'OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ELSEIF RB_PRI = 'X'.
          IF SCREEN-GROUP1 = 'ETN' OR SCREEN-GROUP1 = 'CCD' .
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ELSEIF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 ='LIN'.
            SCREEN-INPUT = '0'.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
        MODIFY SCREEN.
      ENDLOOP.
  ENDCASE.

ENDMODULE.                 " STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.

*RB_STO,
*RB_INV,
*RB_CTR,
*RB_EDT,
*RB_PRI,
*RB_REP,

  "commend started on 16/3
*  IF RB_INV = 'X'.
*
*    RB_INV = 'X'.
*
*  ELSEIF RB_STO = 'X'.
*
*    RB_STO = 'X'.
*
*  ENDIF.
  "commend ended on 16/3

  CLEAR: OK_CODE,
         LV_ADDTOT,
         LV_ACTION.

  OK_CODE = SY-UCOMM.
  CASE OK_CODE.

    WHEN 'SUB'.

      IF RB_CTR = 'X' . "AND RB_INV = 'X'.

        LV_ACTION = 'I'.
        PERFORM REFRESH_9002.
        CALL SCREEN 9002.

      ELSEIF RB_EDT = 'X' . " AND RB_INV = 'X'.

        LV_ACTION = 'I'.
        IF IP_TRN IS INITIAL.
          MESSAGE 'Please Enter Trip sheet no' TYPE 'I' .
        ENDIF.


        IF IP_TRN IS NOT INITIAL.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = IP_TRN
            IMPORTING
              OUTPUT = LV_EDI.


          SELECT SINGLE TRIP_NO INTO LV_TR FROM ZFREIGHT_HEADER WHERE TRIP_NO = LV_EDI .

          SELECT FREIGHT_CHARGE LODING_CHARGE UNLOAD_CHARGE HALT_CHARGE LR_CHARGE INTO
                       WA_EDP UP TO 1 ROWS FROM ZFREIGHT_HEADER WHERE TRIP_NO = LV_EDI  ORDER BY PRIMARY KEY.
          ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

          LV_FC = WA_EDP-FREIGHT_CHARGE .
          LV_LC = WA_EDP-LODING_CHARGE .
          LV_UC = WA_EDP-UNLOAD_CHARGE.
          LV_HC = WA_EDP-HALT_CHARGE .
          LV_LRC = WA_EDP-LR_CHARGE .

          IF SY-SUBRC EQ '0' .



            LV_ACTION = 'U'.
            PERFORM EDIT_AUTHORIZATION.
            PERFORM FILL_EDIT_HEADER_INV.
            PERFORM FILL_EDIT_ITEM_INV.
            PERFORM FILL_EDIT_ADFR_INV.

            CALL SCREEN 9002.
            CLEAR : LV_TR , LV_EDI .
          ELSE.
            MESSAGE 'Please Enter Valid Trip sheet no' TYPE 'I' .
            CLEAR : LV_TR , LV_EDI .
            CLEAR : IP_TRN.
          ENDIF.
        ENDIF.


      ELSEIF RB_PRI = 'X' . " AND RB_INV = 'X'.

        IF IP_TRN IS INITIAL.
          MESSAGE 'Please Enter Trip sheet no' TYPE 'I' .
        ENDIF.


        IF IP_TRN IS NOT INITIAL.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = IP_TRN
            IMPORTING
              OUTPUT = LV_EDI.

          SELECT SINGLE TRIP_NO INTO LV_TR FROM ZFREIGHT_HEADER WHERE TRIP_NO = LV_EDI .

          IF SY-SUBRC EQ '0' .

            PERFORM PRINT_INITIALIZATION.
            PERFORM PRINT_TABLES_FILL.
            PERFORM PRINT_SMARTFORM.

            CLEAR : LV_TR,LV_EDI .
          ELSE.
            MESSAGE 'Please Enter Valid Trip sheet no' TYPE 'I' .
            CLEAR : LV_TR,LV_EDI .
            CLEAR : IP_TRN.
          ENDIF.

        ENDIF.

      ELSEIF RB_REP = 'X' . "AND RB_INV = 'X'.

        PERFORM REPORT_AUTHORIZATION.

        IF RE_LIN EQ 'X'.
          PERFORM TRIP_REPORT .
        ENDIF.

        IF RE_LIN1 EQ 'X' .
          PERFORM TRIP_CON_REPORT.
        ENDIF.


      ELSEIF RB_APR = 'X' . "AND RB_INV = 'X'.
        LV_ACTION = 'S'.
        PERFORM APPROVAL_AUTHORIZATION.
        PERFORM FILL_APPROVAL_REPORT.
        PERFORM CONTAINER_APPROVAL_REPORT.
        CALL SCREEN 9005.
        """""""""""""""""

      ELSEIF RB_DEL = 'X' . "AND RB_INV = 'X'.

        IF IP_TRN IS INITIAL.
          MESSAGE 'Please Enter Trip sheet no' TYPE 'I' .
        ENDIF.


        LV_ACTION = 'D'.

        PERFORM DELETE_AUTHORIZATION.
        PERFORM FILL_HEADER_TO_DELETE.
        PERFORM FILL_ITEM_TO_DELETE.
        PERFORM FILL_TRANS_TO_DELETE.
        PERFORM DB_UPDATION.
        CLEAR: IP_TRN.

*      ELSEIF RB_CTR = 'X' AND RB_STO = 'X'.
*
*        LV_ACTION = 'I'.
*        PERFORM REFRESH_9002.
*        CALL SCREEN 9002.
*
*      ELSEIF RB_EDT = 'X' AND RB_STO = 'X'.
*
*        LV_ACTION = 'U'.
*        PERFORM FILL_EDIT_HEADER_INV.
*        PERFORM FILL_EDIT_ITEM_INV.
*        PERFORM FILL_EDIT_ADFR_INV.
*
*        CALL SCREEN 9002.
*
*      ELSEIF RB_PRI = 'X' AND RB_STO = 'X'.
*
**        PERFORM PRINT_INITIALIZATION.
**        PERFORM PRINT_TABLES_FILL.
**        PERFORM PRINT_SMARTFORM.
*
*      ELSEIF RB_REP = 'X' AND RB_STO = 'X'.
*
*
*
*
*      ELSEIF RB_APR = 'X' AND RB_STO = 'X'.
*
*        LV_ACTION = 'S'.
*
*
*      ELSEIF RB_DEL = 'X' AND RB_STO = 'X'.
*
*        LV_ACTION = 'D'.
*        PERFORM FILL_HEADER_TO_DELETE.
*        PERFORM FILL_ITEM_TO_DELETE.
*        PERFORM FILL_TRANS_TO_DELETE.
*        PERFORM DB_UPDATION.
*        CLEAR: IP_TRN.
*
      ENDIF.


    WHEN 'BACK'.


      "  CALL SCREEN 9000.

      LEAVE TO SCREEN 0.
      EXIT.


    WHEN 'ENTER' .
      IF IP_TRN IS INITIAL.
        MESSAGE 'Please Enter Trip sheet no' TYPE 'I' .
        EXIT.
      ENDIF.

  ENDCASE.


ENDMODULE.                 " USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9002 OUTPUT.
  SET PF-STATUS '9002PF'.
  SET TITLEBAR '9002_TITLE'.

  IF RB_CTR = 'X'.
    "added on 10/12
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'ED' .
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    "ended on 10/12
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'TRN'.
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'JRT'.
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'VRT' .
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'REF' .
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'ZRT' .
        IF IP_FILL EQ 'Half Truck'.
          CLEAR IP_TCAP  .
          SCREEN-INPUT = '0'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    "added on 24/4

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'YLV' .
        IF IP_FILL EQ 'Full Truck'.
          CLEAR IP_LTRCODE  .
          SCREEN-INPUT = '0'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'ZLV' .
        IF IP_FILL EQ 'Full Truck'.
          CLEAR IP_LTRANS.
          SCREEN-INPUT = '0'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LVP' .
        IF IP_FILL EQ 'Full Truck'.
          CLEAR LOC_CHARGE  .
          SCREEN-INPUT = '0'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    "ended on 24/4
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LOC' .
        IF IP_CT NE 'LOCAL TRANSPORTER CHARGE'.
          CLEAR IP_LOCA1.
          SCREEN-INPUT = '0'.
          SCREEN-INVISIBLE = '1'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.


    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LOD' .
        IF IP_CT NE 'LOCAL TRANSPORTER CHARGE'.
          SCREEN-INPUT = '0'.
          SCREEN-INVISIBLE = '1'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'HDA' .
        IF IP_CT NE 'HALTING CHARGES'.
          SCREEN-INPUT = '0'.
          SCREEN-INVISIBLE = '0'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.


    "STARTED BY RAM
  ELSEIF RB_EDT = 'X' .
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'GRT' .
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'KRT' .
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'JRT'.
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'YRT' .
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'ZRT' .
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'VRT' .
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'REF' .
        SCREEN-INPUT = '0'.
        SCREEN-INVISIBLE = '1'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LOD'.
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LOC' .
        IF IP_CT NE 'LOCAL TRANSPORTER CHARGE'.
          SCREEN-INPUT = '0'.
          SCREEN-INVISIBLE = '1'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LOD' .
        IF IP_CT NE 'LOCAL TRANSPORTER CHARGE'.
          CLEAR IP_LOCA1.
          SCREEN-INPUT = '0'.
          SCREEN-INVISIBLE = '1'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'HDA' .
        IF IP_CT NE 'HALTING CHARGES'.
          SCREEN-INPUT = '0'.
          SCREEN-INVISIBLE = '0'.
        ENDIF.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.
    "added on 24/4

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'YLV'.
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'ZLV'.
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

    LOOP AT SCREEN.
      IF SCREEN-GROUP1 = 'LVP'.
        SCREEN-INPUT = '0'.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

  ENDIF.

  " IF RB_EDT = 'X' .

  "ENDIF.


  "ENDED BY RAM



*  IF RB_CTR = 'X' AND RB_INV = 'X'.
*
*    IF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 GE 6.
*
*      CLEAR LV_NOLTC1.
*      DESCRIBE TABLE GT_TC1 LINES LV_NOLTC1.
*      TC_1-LINES = LV_NOLTC1 + 1.
*
*      READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
*      IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.
*
*        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.
*
*      ELSE.
*
*
*        SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.
*
*      ENDIF.
*
*
*    ELSEIF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 LT 6.
*
*      CLEAR LV_NOLTC1.
*      DESCRIBE TABLE GT_TC1 LINES LV_NOLTC1.
*
*      READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
*      IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.
*
*        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.
*
*      ELSE.
*
*
*        SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.
*
*      ENDIF.
*
*
*    ENDIF.
*
**  ELSEIF RB_EDT = 'X' AND RB_INV = 'X' AND SY-UCOMM  <> 'ENTER'.
**
**
**    PERFORM FILL_EDIT_HEADER_INV.
**    PERFORM FILL_EDIT_ITEM_INV.
*
*  ENDIF.



ENDMODULE.                 " STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9002 INPUT.

  CLEAR OK_CODE.
  OK_CODE = SY-UCOMM.

  CASE OK_CODE.


      " General Function Codes starts

    WHEN 'ENTER'.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = IP_TRCODE
        IMPORTING
          OUTPUT = LV_TRCODE.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = IP_LOCA
        IMPORTING
          OUTPUT = LV_LOCCO.

      SELECT LIFNR NAME1 FROM LFA1 INTO TABLE IT_LFA1 WHERE LIFNR EQ LV_TRCODE .

      SELECT LIFNR NAME1 FROM LFA1 INTO TABLE LT_LFA1 WHERE LIFNR EQ LV_LOCCO .

      "LEN = STRLEN(IP_FLOC) .

      CALL FUNCTION 'STRING_LENGTH'
        EXPORTING
          STRING = IP_FLOC
        IMPORTING
          LENGTH = LEN.

      SELECT WERKS NAME1 FROM T001W INTO TABLE IT1_T001W WHERE NAME1 EQ IP_FLOC.


      PERFORM ENTER_IN_TABLE_CONTROL.



    WHEN 'TRN'.

      PERFORM CREATE_AUTHORIZATION.
      PERFORM CLEAR_VAR_WA_TABLES.
      PERFORM DB_UPDATION.

    WHEN 'ETS' .



      PERFORM EDIT_AUTHORIZATON.
      PERFORM CLEAR_VAR_WA_TABLES.
      PERFORM UDB_UPDATAION.


    WHEN 'RF9002'.

      PERFORM REFRESH_9002.

    WHEN 'BACK'.

      CLEAR IP_TRN.
      CALL SCREEN 9000.

******************   General Function Codes Ends  ************************

      " Table Control Function Codes starts

    WHEN 'DLT9002'.  " Table Control  delete

      LOOP AT GT_TC1 INTO GS_TC1 WHERE SEL = 'X'.
        "Deleting record to be deleted
        DELETE TABLE GT_TC1 FROM GS_TC1.
        "Decrementing table control line by one
        TC_1-LINES = TC_1-LINES - 1.
      ENDLOOP.


    WHEN 'RFT9002'.  " Table Control refresh

      REFRESH: GT_TC1.

      " ****************** Table Control Function Codes Ends  ******************


      " Container Function Codes Starts

    WHEN 'ADD9002'. " Container Add Values

      IF GT_TC1 IS NOT INITIAL.
        IF IP_LOC IS NOT INITIAL AND IP_CT IS NOT INITIAL AND IP_CA IS NOT INITIAL.

          PERFORM REFRESH_OBJECTS.
          PERFORM FILL_ADD_FRIEGHT_9001.
          PERFORM SHOW_ADD_FRIEGHT_CONTAINER.

        ENDIF.
      ENDIF.

    WHEN 'EDIT9002'.  " Container Edit Values

      PERFORM EDIT_IN_CONTAINER.


    WHEN 'DLC9002'.  " Container delete

      PERFORM DELETE_IN_CONTAINER.

      "PERFORM REFRESH_OBJECTS.

    WHEN 'RFC9002'.  " Container refresh

      CLEAR :IP_LOC,
             IP_CT,
             IP_LOCA,
             IP_LOCA1,
             IP_DAY,
             IP_CA.
      REFRESH: GT_TC2.
      PERFORM REFRESH_OBJECTS.

  ENDCASE.

  "****************** Container Function Codes Ends ******************




*  ENDLOOP.



*  GET CURSOR FIELD F LINE LIN.

ENDMODULE.                 " USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SHOW_ADD_FRIEGHT_CONTAINER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SHOW_ADD_FRIEGHT_CONTAINER .

  CREATE OBJECT LREF_CON
      EXPORTING
*        PARENT                      =
        CONTAINER_NAME              = 'CC2_FC'
*        STYLE                       =
*        LIFETIME                    = lifetime_default
*        REPID                       =
*        DYNNR                       =
*        NO_AUTODEF_PROGID_DYNNR     =
*      EXCEPTIONS
*        CNTL_ERROR                  = 1
*        CNTL_SYSTEM_ERROR           = 2
*        CREATE_ERROR                = 3
*        LIFETIME_ERROR              = 4
*        LIFETIME_DYNPRO_DYNPRO_LINK = 5
*        OTHERS                      = 6
        .
  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CREATE OBJECT LREF_ALV
    EXPORTING
*    I_SHELLSTYLE      = 0
*    I_LIFETIME        =
      I_PARENT          = LREF_CON
*    I_APPL_EVENTS     = space
*    I_PARENTDBG       =
*    I_APPLOGPARENT    =
*    I_GRAPHICSPARENT  =
*    I_NAME            =
*    I_FCAT_COMPLETE   = SPACE
*  EXCEPTIONS
*    ERROR_CNTL_CREATE = 1
*    ERROR_CNTL_INIT   = 2
*    ERROR_CNTL_LINK   = 3
*    ERROR_DP_CREATE   = 4
*    OTHERS            = 5
      .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  GS_LAYOUT_TC2-ZEBRA = 'X'.
  GS_LAYOUT_TC2-NO_TOOLBAR = 'X'.
  GS_LAYOUT_TC2-GRID_TITLE = 'Additional Freight Charges'.

  ADD_FCAT_AFR_9001:

    1 'CHARGE_LOC' 'Charge Location' 27 ' ' ' ' ' ',
    2 'CHARGE_TYPE' 'Charge Type' 16 ' ' ' ' ' ',
    3 'VENDOR_CODE' 'Vendor Code' 12 ' ' ' ' ' ',
    4 'NO_OF_DAYS' 'Days' 6 ' ' ' ' ' ',
    5 'TOTAT_AMOUNT' 'Amount'      10 ' ' ' ' ' '.

*ADD9001


  CALL METHOD LREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
  EXPORTING
*    I_BUFFER_ACTIVE               =
*    I_BYPASSING_BUFFER            =
*    I_CONSISTENCY_CHECK           =
*    I_STRUCTURE_NAME              =
*    IS_VARIANT                    =
*    I_SAVE                        =
*    I_DEFAULT                     = 'X'
     IS_LAYOUT                     = GS_LAYOUT_TC2
*    IS_PRINT                      =
*    IT_SPECIAL_GROUPS             =
*    IT_TOOLBAR_EXCLUDING          =
*    IT_HYPERLINK                  =
*    IT_ALV_GRAPHICS               =
*    IT_EXCEPT_QINFO               =
*    IR_SALV_ADAPTER               =
    CHANGING
      IT_OUTTAB                     = GT_TC2
      IT_FIELDCATALOG               = GT_FCAT_TC2
*    IT_SORT                       =
*    IT_FILTER                     =
*  EXCEPTIONS
*    INVALID_PARAMETER_COMBINATION = 1
*    PROGRAM_ERROR                 = 2
*    TOO_MANY_LINES                = 3
*    OTHERS                        = 4
          .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  REFRESH GT_FCAT_TC2.
  CLEAR GS_LAYOUT_TC2.



ENDFORM.                    " SHOW_ADD_FRIEGHT_CONTAINER

*&---------------------------------------------------------------------*
*&      Form  DB_UPDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DB_UPDATION .

  IF LV_ACTION EQ 'I'.


    PERFORM FILL_ZFREIGHT_HEADER.
    PERFORM FILL_ZFREIGHT_ITEM.
    PERFORM FILL_ZFREIGHT_TRAN.

    IF GS_FHEAD IS NOT INITIAL AND GT_FITEM IS NOT INITIAL AND GT_FTRAN IS INITIAL.

      IF GS_FHEAD-VENDOR_NAME IS NOT INITIAL AND GS_FHEAD-FROM_LOC IS NOT INITIAL AND GS_FHEAD-TO_LOC IS NOT INITIAL
        AND GS_FHEAD-FILLING_TYPE IS NOT INITIAL AND GS_FHEAD-FILLING_TYPE EQ '1' .

        CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
          EXPORTING
            ACTION                 = LV_ACTION
            WA_ZFREIGHT_HEADER     = GS_FHEAD
          TABLES
            IT_ZFREIGHT_ITEM       = GT_FITEM
*           IT_ZFREIGHT_TRAN       = GT_FTRAN
*           IT_ZFREIGHT_HEADER     =
          EXCEPTIONS
            DB_UPDATE_SUCCESS      = 1
            DB_UPDATE_FAIL         = 2
            DB_INSERT_SUCCESS      = 3
            DB_INSERT_FAIL         = 4
            DB_TRIP_DELETE_SUCCESS = 5
            DB_TRIP_DELETE_FAIL    = 6
            OTHERS                 = 7.
        IF SY-SUBRC <> 0.

          CASE SY-SUBRC.

            WHEN 1.

            WHEN 2.

            WHEN 3.
              MESSAGE I000 WITH GS_FHEAD-TRIP_NO.
              PERFORM REFRESH_9002.
            WHEN 4.
              MESSAGE I003 DISPLAY LIKE 'E'.
              PERFORM REFRESH_9002.

            WHEN OTHERS.
          ENDCASE.


        ENDIF.

      ELSEIF GS_FHEAD-VENDOR_NAME IS NOT INITIAL AND GS_FHEAD-FROM_LOC IS NOT INITIAL AND GS_FHEAD-TO_LOC IS NOT INITIAL
 AND GS_FHEAD-FILLING_TYPE IS NOT INITIAL AND GS_FHEAD-FILLING_TYPE EQ '2' AND GS_FHEAD-TRUCK_TYPE IS NOT INITIAL  .

        CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
          EXPORTING
            ACTION                 = LV_ACTION
            WA_ZFREIGHT_HEADER     = GS_FHEAD
          TABLES
            IT_ZFREIGHT_ITEM       = GT_FITEM
*           IT_ZFREIGHT_TRAN       = GT_FTRAN
*           IT_ZFREIGHT_HEADER     =
          EXCEPTIONS
            DB_UPDATE_SUCCESS      = 1
            DB_UPDATE_FAIL         = 2
            DB_INSERT_SUCCESS      = 3
            DB_INSERT_FAIL         = 4
            DB_TRIP_DELETE_SUCCESS = 5
            DB_TRIP_DELETE_FAIL    = 6
            OTHERS                 = 7.
        IF SY-SUBRC <> 0.

          CASE SY-SUBRC.

            WHEN 1.

            WHEN 2.

            WHEN 3.
              MESSAGE I000 WITH GS_FHEAD-TRIP_NO.
              PERFORM REFRESH_9002.
            WHEN 4.
              MESSAGE I003 DISPLAY LIKE 'E'.
              PERFORM REFRESH_9002.

            WHEN OTHERS.
          ENDCASE.


        ENDIF.

      ELSEIF GS_FHEAD-VENDOR_NAME IS INITIAL OR GS_FHEAD-FROM_LOC IS INITIAL OR GS_FHEAD-TO_LOC IS INITIAL OR
        GS_FHEAD-FILLING_TYPE IS INITIAL OR GS_FHEAD-TRUCK_TYPE IS INITIAL .

        IF GS_FHEAD-VENDOR_NAME IS INITIAL.
          MESSAGE 'Please Fill In All The Required Fields' TYPE 'E' .
        ELSEIF GS_FHEAD-FROM_LOC IS INITIAL .
          MESSAGE 'Please Fill In All The Required Fields' TYPE 'E' .
        ELSEIF GS_FHEAD-TO_LOC IS INITIAL.
          MESSAGE 'Please Fill In All The Required Fields' TYPE 'E' .
*        ELSEIF GS_FHEAD-FILLING_TYPE IS INITIAL.
*          MESSAGE 'Please Fill In All The Required Fields' TYPE 'E' .
        ELSEIF GS_FHEAD-TRUCK_TYPE IS INITIAL AND GS_FHEAD-FILLING_TYPE EQ '2' .
          MESSAGE 'Please Fill In All The Required Fields' TYPE 'E' .
        ENDIF.

      ENDIF.



*      ELSE.
*        MESSAGE 'Please Fill In All The Required Fields' TYPE 'E' .
*
*      ENDIF.

    ELSEIF GS_FHEAD IS NOT INITIAL AND GT_FITEM IS NOT INITIAL AND GT_FTRAN IS NOT INITIAL.

      CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
        EXPORTING
          ACTION                 = LV_ACTION
          WA_ZFREIGHT_HEADER     = GS_FHEAD
        TABLES
          IT_ZFREIGHT_ITEM       = GT_FITEM
          IT_ZFREIGHT_TRAN       = GT_FTRAN
*         IT_ZFREIGHT_HEADER     =
        EXCEPTIONS
          DB_UPDATE_SUCCESS      = 1
          DB_UPDATE_FAIL         = 2
          DB_INSERT_SUCCESS      = 3
          DB_INSERT_FAIL         = 4
          DB_TRIP_DELETE_SUCCESS = 5
          DB_TRIP_DELETE_FAIL    = 6
          OTHERS                 = 7.
      IF SY-SUBRC <> 0.
        CASE SY-SUBRC.

          WHEN 1.

          WHEN 2.

          WHEN 3.
            MESSAGE I000 WITH GS_FHEAD-TRIP_NO.
            PERFORM REFRESH_9002.
          WHEN 4.
            MESSAGE I003 DISPLAY LIKE 'E'.
            PERFORM REFRESH_9002.

          WHEN OTHERS.
        ENDCASE.
      ENDIF.

    ELSE.

      MESSAGE I004 DISPLAY LIKE 'E'.
      PERFORM REFRESH_9002.

    ENDIF.

    CLEAR: GS_FHEAD.
    REFRESH: GT_FITEM,GT_FTRAN.

  ELSEIF LV_ACTION EQ 'D'.

    IF GS_DELHEAD IS NOT INITIAL AND GT_DELITEM IS NOT INITIAL AND GT_DELTRAN IS INITIAL.

      CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
        EXPORTING
          ACTION                 = LV_ACTION
          WA_ZFREIGHT_HEADER     = GS_DELHEAD
        TABLES
          IT_ZFREIGHT_ITEM       = GT_DELITEM
*         IT_ZFREIGHT_TRAN       =
*         IT_ZFREIGHT_HEADER     =
        EXCEPTIONS
          DB_UPDATE_SUCCESS      = 1
          DB_UPDATE_FAIL         = 2
          DB_INSERT_SUCCESS      = 3
          DB_INSERT_FAIL         = 4
          DB_TRIP_DELETE_SUCCESS = 5
          DB_TRIP_DELETE_FAIL    = 6
          OTHERS                 = 7.
      IF SY-SUBRC <> 0.
        CASE SY-SUBRC.

          WHEN 1.

          WHEN 2.

          WHEN 3.

          WHEN 4.

          WHEN 5.

            MESSAGE I005 WITH GS_DELHEAD-TRIP_NO.

          WHEN 6.

            MESSAGE I006 WITH GS_DELHEAD-TRIP_NO.

          WHEN OTHERS.
        ENDCASE.
      ENDIF.

    ELSEIF  GS_DELHEAD IS NOT INITIAL AND GT_DELITEM IS NOT INITIAL AND GT_DELTRAN IS NOT INITIAL.

      CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
        EXPORTING
          ACTION                 = LV_ACTION
          WA_ZFREIGHT_HEADER     = GS_DELHEAD
        TABLES
          IT_ZFREIGHT_ITEM       = GT_DELITEM
          IT_ZFREIGHT_TRAN       = GT_DELTRAN
*         IT_ZFREIGHT_HEADER     =
        EXCEPTIONS
          DB_UPDATE_SUCCESS      = 1
          DB_UPDATE_FAIL         = 2
          DB_INSERT_SUCCESS      = 3
          DB_INSERT_FAIL         = 4
          DB_TRIP_DELETE_SUCCESS = 5
          DB_TRIP_DELETE_FAIL    = 6
          OTHERS                 = 7.
      IF SY-SUBRC <> 0.
        CASE SY-SUBRC.

          WHEN 1.

          WHEN 2.

          WHEN 3.

          WHEN 4.

          WHEN 5.

            MESSAGE I005 WITH GS_DELHEAD-TRIP_NO.

          WHEN 6.

            MESSAGE I006 WITH GS_DELHEAD-TRIP_NO.

          WHEN OTHERS.
        ENDCASE.
      ENDIF.


    ENDIF.

    "added on 7/4
    CLEAR: GS_FHEAD.
    CLEAR : GT_DELITEM .
    REFRESH: GT_FITEM,GT_FTRAN.


  ELSEIF LV_ACTION EQ 'I'.




  ENDIF.





ENDFORM.                    " DB_UPDATION



*&---------------------------------------------------------------------*
*&      Form  FILL_ZFREIGHT_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_ZFREIGHT_HEADER .

  "IF RB_INV EQ 'X'.

  IF OP_OFCHR IS INITIAL OR OP_LCHR IS INITIAL OR OP_LRC IS INITIAL . "Added on 17/04/2020
    MESSAGE 'Action has not been processed successfully because of freight charge is not updated' TYPE 'E' .
  ENDIF.
  IF IP_LTRANS IS NOT INITIAL.
    IF LOC_CHARGE IS INITIAL.
      MESSAGE 'Action has not been processed successfully because of freight charge is not updated' TYPE 'E' .
    ENDIF.
  ENDIF.

  GS_FHEAD-MANDT = SY-MANDT.
  GS_FHEAD-CRDATE = SY-DATUM.
  GS_FHEAD-CRTIME = SY-UZEIT.
  GS_FHEAD-CREATED_BY = SY-UNAME.
  GS_FHEAD-REMARKS = IP_REM.
  GS_FHEAD-APR_STA = ' '. " Check Conditions
  CLEAR: LV_OBJ,
         LV_NR.
  LV_OBJ = 'ZTRIP_INV'.

  IF RB_CTR = 'X'. " AND RB_INV = 'X'.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = LV_OBJ
*       QUANTITY                = '1'
*       SUBOBJECT               = ' '
*       TOYEAR                  = '0000'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = LV_NR
*       QUANTITY                =
*       RETURNCODE              =
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

*  SELECT SINGLE * FROM NRIV  WHERE OBJECT    = 'ZTRIP_INV'
*                               AND NRRANGENR = '01'.

    CLEAR LV_TYPE.
    LV_TYPE = '0'.

*  IF SY-SUBRC = 0.
*    IF NRIV-NRLEVEL IS INITIAL.
*      LV_NR = NRIV-FROMNUMBER.
*    ELSE.
*      LV_NR = NRIV-NRLEVEL + 1 .
*    ENDIF.
*  ENDIF.

    "LV_NR = GS_FHEAD-TRIP_NO .
    CONCATENATE LV_TYPE LV_NR INTO GS_FHEAD-TRIP_NO.

    " **************Ref Coding********************

*  IF SY-SUBRC = 0.
*    IF NRIV-NRLEVEL IS INITIAL.
*      ZGATEP-GTEN =  NRIV-FROMNUMBER.
*    ELSE.
*      ZGATEP-GTEN = NRIV-NRLEVEL + 1 .
*    ENDIF.

*  SELECT MAX( TRIP_NO )
*       INTO (LV_TRNMAX)
*       FROM ZFREIGHT_HEADER.
*  IF SY-SUBRC EQ 0.
*
*    LV_TRNMAX = LV_TRNMAX + 1.
*
*  ENDIF.

*  GS_FHEAD-TRIP_NO = LV_TRNMAX.

    " **************Ref Coding********************

*  CLEAR NRIV.

    GS_FHEAD-STATUS = 'ZINV'. " Hotcoded now later check condition and update
    GS_FHEAD-VENDOR_CODE = IP_TRCODE .
    GS_FHEAD-VENDOR_NAME = LV_NAME.
    GS_FHEAD-FORM_CODE = LV_FLOC .
    GS_FHEAD-FROM_LOC = IP_FLOC.
    GS_FHEAD-CITY_ID = LV_CITYID.
    GS_FHEAD-TO_LOC = IP_TLOC.
    GS_FHEAD-NO_OF_DAYS = IP_NOD.
    GS_FHEAD-LOCAL_VENDOR = IP_LTRCODE.
    GS_FHEAD-LO_VENDORNAME = LV_LNAME.
    GS_FHEAD-LOCAL_CHARGE = LOC_CHARGE .
    SELECT TRUCK
                  UP TO 1 ROWS FROM ZTRUCK
                  INTO LV_TTYPE
                  WHERE DES EQ IP_TCAP ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
    IF SY-SUBRC EQ 0.
      GS_FHEAD-TRUCK_TYPE = LV_TTYPE.
    ENDIF.
    GS_FHEAD-TRUCK_DES = IP_TCAP.
    SELECT FILL
                UP TO 1 ROWS FROM ZFILLING
                INTO LV_FTYPE
                WHERE DES EQ IP_FILL ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
    IF SY-SUBRC EQ 0.
      GS_FHEAD-FILLING_TYPE = LV_FTYPE.
    ENDIF.
    GS_FHEAD-FILING_DES = IP_FILL.
    GS_FHEAD-FREIGHT_CHARGE = OP_OFCHR.
    GS_FHEAD-LODING_CHARGE = OP_LCHR .
    GS_FHEAD-UNLOAD_CHARGE = OP_UCHR .
    GS_FHEAD-HALT_CHARGE = OP_HCRG.
    GS_FHEAD-LR_CHARGE = OP_LRC.
    GS_FHEAD-TRN_VALUE = OP_OFCHR + OP_LCHR + OP_UCHR + OP_HCRG + OP_ACT + OP_LRC.
    GS_FHEAD-VECHILE_NUMBER = IP_VNO.

    CLEAR: LV_TRNMAX,
           LV_TTYPE,
           LV_FTYPE.

  ELSEIF RB_EDT = 'X'. " AND RB_INV = 'X'.

*  GS_FHEAD-CRDATE

    GS_FHEAD-TRIP_NO = OP_TRN.
    GS_FHEAD-STATUS = 'ZINV'. " Hotcoded now later check condition and update
    GS_FHEAD-VENDOR_CODE = IP_TRCODE .
    GS_FHEAD-VENDOR_NAME = LV_NAME.
    GS_FHEAD-FORM_CODE = LV_FLOC .
    GS_FHEAD-FROM_LOC = IP_FLOC.
    GS_FHEAD-CITY_ID = LV_CITYID.
    GS_FHEAD-TO_LOC = IP_TLOC.
    GS_FHEAD-NO_OF_DAYS = IP_NOD.
    SELECT TRUCK
                  UP TO 1 ROWS FROM ZTRUCK
                  INTO LV_TTYPE
                  WHERE DES EQ IP_TCAP ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
    IF SY-SUBRC EQ 0.
      GS_FHEAD-TRUCK_TYPE = LV_TTYPE.
    ENDIF.
    GS_FHEAD-TRUCK_DES = IP_TCAP.
    SELECT FILL
                UP TO 1 ROWS FROM ZFILLING
                INTO LV_FTYPE
                WHERE DES EQ IP_FILL ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
    IF SY-SUBRC EQ 0.
      GS_FHEAD-FILLING_TYPE = LV_FTYPE.
    ENDIF.
    GS_FHEAD-FILING_DES = IP_FILL.
    GS_FHEAD-FREIGHT_CHARGE = OP_OFCHR.
    GS_FHEAD-LODING_CHARGE = OP_LCHR .
    GS_FHEAD-UNLOAD_CHARGE = OP_UCHR .
    GS_FHEAD-HALT_CHARGE = OP_HCRG.
    GS_FHEAD-LR_CHARGE = OP_LRC.
    GS_FHEAD-TRN_VALUE = OP_OFCHR + OP_LCHR + OP_UCHR + OP_HCRG + OP_ACT + OP_LRC.
    GS_FHEAD-VECHILE_NUMBER = IP_VNO.

    CLEAR: LV_TRNMAX,
           LV_TTYPE,
           LV_FTYPE,
           LV_NAME,
           LV_LNAME.

  ENDIF.

*  ELSEIF RB_STO EQ 'X'.
*
*    GS_FHEAD-MANDT = SY-MANDT.
*    GS_FHEAD-CRDATE = SY-DATUM.
*    GS_FHEAD-CRTIME = SY-UZEIT.
*    GS_FHEAD-REMARKS = IP_REM.
*    GS_FHEAD-APR_STA = ' '. " Check Conditions
*    CLEAR: LV_OBJ,
*           LV_NR.
*    LV_OBJ = 'ZTRIP_STO'.
*
*    IF RB_CTR = 'X' AND RB_STO = 'X'.
*
*
*
*      CALL FUNCTION 'NUMBER_GET_NEXT'
*        EXPORTING
*          NR_RANGE_NR             = '01'
*          OBJECT                  = LV_OBJ
**         QUANTITY                = '1'
**         SUBOBJECT               = ' '
**         TOYEAR                  = '0000'
*          IGNORE_BUFFER           = 'X'
*        IMPORTING
*          NUMBER                  = LV_NR
**         QUANTITY                =
**         RETURNCODE              =
*        EXCEPTIONS
*          INTERVAL_NOT_FOUND      = 1
*          NUMBER_RANGE_NOT_INTERN = 2
*          OBJECT_NOT_FOUND        = 3
*          QUANTITY_IS_0           = 4
*          QUANTITY_IS_NOT_1       = 5
*          INTERVAL_OVERFLOW       = 6
*          BUFFER_OVERFLOW         = 7
*          OTHERS                  = 8.
*      IF SY-SUBRC <> 0.
** Implement suitable error handling here
*      ENDIF.
*
*
*
**  SELECT SINGLE * FROM NRIV  WHERE OBJECT    = 'ZTRIP_INV'
**                               AND NRRANGENR = '01'.
*
*      CLEAR LV_TYPE.
*      LV_TYPE = 'S'.
*
**  IF SY-SUBRC = 0.
**    IF NRIV-NRLEVEL IS INITIAL.
**      LV_NR = NRIV-FROMNUMBER.
**    ELSE.
**      LV_NR = NRIV-NRLEVEL + 1 .
**    ENDIF.
**  ENDIF.
*
*      CONCATENATE LV_TYPE LV_NR INTO GS_FHEAD-TRIP_NO.
*
*      " **************Ref Coding********************
*
**  IF SY-SUBRC = 0.
**    IF NRIV-NRLEVEL IS INITIAL.
**      ZGATEP-GTEN =  NRIV-FROMNUMBER.
**    ELSE.
**      ZGATEP-GTEN = NRIV-NRLEVEL + 1 .
**    ENDIF.
*
**  SELECT MAX( TRIP_NO )
**       INTO (LV_TRNMAX)
**       FROM ZFREIGHT_HEADER.
**  IF SY-SUBRC EQ 0.
**
**    LV_TRNMAX = LV_TRNMAX + 1.
**
**  ENDIF.
*
**  GS_FHEAD-TRIP_NO = LV_TRNMAX.
*
*      " **************Ref Coding********************
*
**  CLEAR NRIV.
*
*      GS_FHEAD-STATUS = 'ZSTO'. " Hotcoded now later check condition and update
*      GS_FHEAD-VENDOR_NAME = IP_TRANS.
*      GS_FHEAD-FROM_LOC = IP_FLOC.
*      GS_FHEAD-TO_LOC = IP_TLOC.
*      GS_FHEAD-NO_OF_DAYS = IP_NOD.
*      SELECT SINGLE TRUCK
*                    FROM ZTRUCK
*                    INTO LV_TTYPE
*                    WHERE DES EQ IP_TCAP.
*      IF SY-SUBRC EQ 0.
*        GS_FHEAD-TRUCK_TYPE = LV_TTYPE.
*      ENDIF.
*      GS_FHEAD-TRUCK_DES = IP_TCAP.
*      SELECT SINGLE FILL
*                  FROM ZFILLING
*                  INTO LV_FTYPE
*                  WHERE DES EQ IP_FILL.
*      IF SY-SUBRC EQ 0.
*        GS_FHEAD-FILLING_TYPE = LV_FTYPE.
*      ENDIF.
*      GS_FHEAD-FILING_DES = IP_FILL.
*      GS_FHEAD-FREIGHT_CHARGE = OP_OFCHR.
*      GS_FHEAD-LODING_CHARGE = OP_LCHR .
*      GS_FHEAD-UNLOAD_CHARGE = OP_UCHR .
*      GS_FHEAD-HALT_CHARGE = OP_HCRG.
*      GS_FHEAD-TRN_VALUE = OP_OFCHR + OP_LCHR + OP_UCHR + OP_HCRG + OP_ACT.
*      GS_FHEAD-VECHILE_NUMBER = IP_VNO.
*
*      CLEAR: LV_TRNMAX,
*             LV_TTYPE,
*             LV_FTYPE.
*
*    ELSEIF RB_EDT = 'X' AND RB_STO = 'X'.
*
*
*      GS_FHEAD-TRIP_NO = OP_TRN.
*      GS_FHEAD-STATUS = 'ZSTO'. " Hotcoded now later check condition and update
*      GS_FHEAD-VENDOR_NAME = IP_TRANS.
*      GS_FHEAD-FROM_LOC = IP_FLOC.
*      GS_FHEAD-TO_LOC = IP_TLOC.
*      GS_FHEAD-NO_OF_DAYS = IP_NOD.
*      SELECT SINGLE TRUCK
*                    FROM ZTRUCK
*                    INTO LV_TTYPE
*                    WHERE DES EQ IP_TCAP.
*      IF SY-SUBRC EQ 0.
*        GS_FHEAD-TRUCK_TYPE = LV_TTYPE.
*      ENDIF.
*      GS_FHEAD-TRUCK_DES = IP_TCAP.
*      SELECT SINGLE FILL
*                  FROM ZFILLING
*                  INTO LV_FTYPE
*                  WHERE DES EQ IP_FILL.
*      IF SY-SUBRC EQ 0.
*        GS_FHEAD-FILLING_TYPE = LV_FTYPE.
*      ENDIF.
*      GS_FHEAD-FILING_DES = IP_FILL.
*      GS_FHEAD-FREIGHT_CHARGE = OP_OFCHR.
*      GS_FHEAD-LODING_CHARGE = OP_LCHR .
*      GS_FHEAD-UNLOAD_CHARGE = OP_UCHR .
*      GS_FHEAD-HALT_CHARGE = OP_HCRG.
*      GS_FHEAD-LR_CHARGE = OP_LRC.
*      GS_FHEAD-TRN_VALUE = OP_OFCHR + OP_LCHR + OP_UCHR + OP_HCRG + OP_ACT + OP_LRC.
*      GS_FHEAD-VECHILE_NUMBER = IP_VNO.
*
*      CLEAR: LV_TRNMAX,
*             LV_TTYPE,
*             LV_FTYPE.
*
*
*    ENDIF.






  " ENDIF.


  IF GS_FHEAD-FORM_CODE IS INITIAL .

    SELECT WERKS INTO LV_EDI UP TO 1 ROWS FROM T001W WHERE NAME1 EQ LV_FLOC ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
    GS_FHEAD-FORM_CODE = LV_EFROM .

  ENDIF.

ENDFORM.                    " FILL_ZFREIGHT_HEADER


*&---------------------------------------------------------------------*
*&      Form  FILL_ZFREIGHT_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_ZFREIGHT_ITEM .

  CLEAR GT_FITEM .

  LOOP AT GT_TC1 INTO GS_TC1.

    GS_FITEM-MANDT = SY-MANDT.
    GS_FITEM-TRIP_NO = GS_FHEAD-TRIP_NO.
    GS_FITEM-INVOICE_NO = GS_TC1-INVOICE_NO.
    GS_FITEM-CUSTOMER_NAME = GS_TC1-CUSTOMER_NAME.
    GS_FITEM-INVOICE_DATE = GS_TC1-INVOICE_DATE.
    GS_FITEM-INVOICE_AMOUNT = GS_TC1-INVOICE_AMOUNT.
    GS_FITEM-WEIGHT = GS_TC1-WEIGHT.
    GS_FITEM-COMPANY_CODE = GS_TC1-COMPANY_CODE.
    GS_FITEM-LOCATION = GS_TC1-LOCATION.
    GS_FITEM-LR_NO = GS_TC1-LR_NO.
    GS_FITEM-STATUS = GS_TC1-STATUS.
    IF GS_FITEM-LR_NO IS  INITIAL .
      MESSAGE 'Please Enter LR No' TYPE 'E' .
    ENDIF.

*    GS_FITEM-REMARKS = GS_TC1-REMARKS.

    APPEND GS_FITEM TO GT_FITEM.
    CLEAR GS_FITEM.

  ENDLOOP.
*  GS_FHEAD-TRIP_NO

ENDFORM.                    " FILL_ZFREIGHT_ITEM


*&---------------------------------------------------------------------*
*&      Form  FILL_ZFREIGHT_TRAN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_ZFREIGHT_TRAN .

  LOOP AT GT_TC2 INTO GS_TC2.

    LV_ITEM = LV_ITEM + 1.

    GS_FTRAN-MANDT = SY-MANDT.
    GS_FTRAN-TRIP_NO = GS_FHEAD-TRIP_NO.
    GS_FTRAN-LINE_ITEM = LV_ITEM.
    GS_FTRAN-CHARGE_LOC = GS_TC2-CHARGE_LOC.
    GS_FTRAN-VENDOR_CODE = GS_TC2-VENDOR_CODE.
    GS_FTRAN-CHARGE_TYPE = GS_TC2-CHARGE_TYPE.
    GS_FTRAN-NO_OF_DAYS = GS_TC2-NO_OF_DAYS.
    GS_FTRAN-TOTAT_AMOUNT = GS_TC2-TOTAT_AMOUNT.
    APPEND GS_FTRAN TO GT_FTRAN.

  ENDLOOP.
  CLEAR LV_ITEM.

ENDFORM.                    " FILL_ZFREIGHT_TRAN
*&---------------------------------------------------------------------*
*&      Form  FILL_TABLE_CONTROL_VALUES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_TABLE_CONTROL_VALUES .

  CLEAR: GS_VBRK,
         GS_MSEG,
         GS_KNA1,
         GS_TC1,
         LV_WEIGHT,
         LV_AMOUNT,
         LV_TABIX,
         LV_SEL_LINE,
         LV_MOD,
         FNAM,
         FVAL,
         INPUT,
         OUTPUT.

  "CLEAR : GT_LRREM , GS_LRREM .

  REFRESH: GT_VBRP.

  GET CURSOR LINE LV_SEL_LINE.

  LV_TABIX = TC_1-TOP_LINE + ( LV_SEL_LINE - 1 ).

  READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
  IF SY-SUBRC EQ 0.

    LV_MOD = 'X'.

  ELSE.

    CLEAR LV_MOD.

  ENDIF.

* IF RB_CTR = 'X' AND RB_INV = 'X'.
* IF RB_CTR = 'X'.
* IF GS_TC1-CUSTOMER_NAME IS INITIAL AND GS_TC1-INVOICE_AMOUNT IS INITIAL AND GS_TC1-WEIGHT IS INITIAL AND GS_TC1-COMPANY_CODE IS INITIAL.
* IF FNAM EQ 'GS_TC1-INVOICE_NO'.
* SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.

  GET CURSOR FIELD FNAM VALUE FVAL.

  IF FNAM EQ 'GS_TC1-INVOICE_NO'.

    INPUT = FVAL.

    CALL 'CONVERSION_EXIT_ALPHA_INPUT'  ID 'INPUT'  FIELD INPUT
                                        ID 'OUTPUT' FIELD OUTPUT.

    CLEAR: GS_CHKINV.
    SELECT TRIP_NO
                  INVOICE_NO
                  UP TO 1 ROWS FROM ZFREIGHT_ITEM
                  INTO GS_CHKINV
                  WHERE INVOICE_NO EQ OUTPUT ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

    IF GS_CHKINV IS NOT INITIAL.

      MESSAGE I002 WITH GS_CHKINV-TRIP_NO.

    ELSE.

      READ TABLE GT_TC1 INTO GS_TC1 WITH KEY INVOICE_NO = OUTPUT.

      IF SY-SUBRC EQ 0.

        MESSAGE I001.

      ELSE.

        GS_TC1-INVOICE_NO = OUTPUT.

        SELECT SINGLE VBELN
                      FKDAT
                      BUKRS
                      NETWR
                      KUNAG
                      MWSBK
                      FROM VBRK
                      INTO GS_VBRK
                      WHERE VBELN EQ GS_TC1-INVOICE_NO.

        SELECT MBLNR
            BWART
            MATNR
            SHKZG
            DMBTR
            MENGE
            BUKRS
            UMWRK
            BUDAT_MKPF
            UP TO 1 ROWS FROM MSEG
            INTO GS_MSEG
            WHERE MBLNR EQ GS_TC1-INVOICE_NO AND
            SHKZG EQ 'H' AND
            BWART EQ '351' ORDER BY PRIMARY KEY.
        ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

        SELECT MBLNR
               BWART
               MATNR
               SHKZG
               DMBTR
               MENGE
               BUKRS
               UMWRK
               BUDAT_MKPF
               FROM MSEG
               INTO TABLE GT1_MSEG
               WHERE MBLNR EQ GS_TC1-INVOICE_NO AND
               SHKZG EQ 'H' AND
               BWART EQ '351'.

        IF GS_MSEG IS NOT INITIAL.

          SELECT SINGLE MATNR
                       BRGEW
                       GEWEI
                       FROM MARA
                       INTO GS_MARA
                       WHERE MATNR EQ GS_MSEG-MATNR.

          SELECT SINGLE WERKS
                        NAME1
                        ORT01
                        FROM T001W
                        INTO GS_T001W
                        WHERE WERKS EQ GS_MSEG-UMWRK.

        ENDIF.

        IF GT1_MSEG IS NOT INITIAL.

          SELECT MATNR
                       BRGEW
                       GEWEI
                       FROM MARA
                       INTO TABLE GT1_MARA FOR ALL ENTRIES IN GT1_MSEG
                       WHERE MATNR EQ GT1_MSEG-MATNR.

          LOOP AT GT1_MSEG INTO GS1_MSEG.
            LOOP AT GT1_MARA INTO GS1_MARA WHERE MATNR = GS1_MSEG-MATNR.
              LV_WEIGHT = LV_WEIGHT + ( GS1_MSEG-MENGE *  GS1_MARA-BRGEW ). "  Gross Weight addition by Invoice line item
              LV_AMOUNT = LV_AMOUNT + GS1_MSEG-DMBTR.
            ENDLOOP.
            CLEAR GS1_MSEG.
          ENDLOOP.
*          SELECT SINGLE WERKS
*                        NAME1
*                        ORT01
*                        FROM T001W
*                        INTO GS_T001W
*                        WHERE WERKS EQ GS_MSEG-UMWRK.

        ENDIF.

        IF GS_VBRK IS NOT INITIAL.

          SELECT VBELN
                 POSNR
                 NTGEW
                 BRGEW
                 GEWEI
                 VOLUM
                 VOLEH
                 FROM VBRP INTO TABLE GT_VBRP
                 WHERE VBELN EQ GS_VBRK-VBELN.

          SELECT SINGLE KUNNR
                        NAME1
                        LOCATION
                        "ORT01
                        FROM KNA1
                        INTO GS_KNA1
                        WHERE KUNNR EQ GS_VBRK-KUNAG.

          SELECT
                       VBELN
                       AUBEL
                         UP TO 1 ROWS FROM VBRP INTO GS_LVBRP WHERE VBELN EQ GS_VBRK-VBELN  ORDER BY PRIMARY KEY.
          ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

          SELECT
                   VBELN
                   PARVW
                   KUNNR UP TO 1 ROWS FROM VBPA INTO GS_VBPA WHERE VBELN EQ GS_LVBRP-AUBEL AND PARVW EQ'WE' ORDER BY PRIMARY KEY. .
          ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

          SELECT SINGLE
                   KUNNR
                   LOCATION FROM KNA1 INTO GS_LKNA1 WHERE KUNNR EQ GS_VBPA-KUNNR.


        ENDIF.

*        "added on 14/3
*        LV_WEIGHT = GS_MSEG-MENGE *  GS_MARA-BRGEW. "  Gross Weight addition by Invoice line item
*        LV_AMOUNT = GS_MSEG-DMBTR.
*        "ended on 14/3

*    CLEAR LV_WEIGHT.
        LOOP AT GT_VBRP INTO GS_VBRP.

          LV_WEIGHT = LV_WEIGHT + GS_VBRP-BRGEW. "  Gross Weight addition by Invoice line item

        ENDLOOP.

*    CLEAR LV_AMOUNT.
        IF GS_VBRK IS NOT INITIAL.
          LV_AMOUNT = GS_VBRK-NETWR + GS_VBRK-MWSBK.
        ENDIF.

        IF GS_VBRK IS NOT INITIAL AND GS_KNA1 IS NOT INITIAL.

*       TRIP_NO
          GS_TC1-INVOICE_NO = GS_VBRK-VBELN.
          GS_TC1-CUSTOMER_NAME = GS_KNA1-NAME1.
          GS_TC1-INVOICE_DATE = GS_VBRK-FKDAT.
          GS_TC1-INVOICE_AMOUNT = LV_AMOUNT.
          GS_TC1-WEIGHT = LV_WEIGHT.
          GS_TC1-COMPANY_CODE = GS_VBRK-BUKRS.
          "GS_TC1-LOCATION = GS_KNA1-ORT01.
          IF GS_LKNA1 IS NOT INITIAL. "ADDED ON 22/4
            GS_TC1-LOCATION = GS_LKNA1-LOCATION.
          ENDIF.
          IF GS_LKNA1 IS INITIAL.
            GS_TC1-LOCATION = GS_KNA1-LOCATION.
          ENDIF.
          GS_TC1-STATUS = 'ZINV' .
          SORT GT_LRREM BY LNO.
          READ TABLE GT_LRREM INTO GS_LRREM WITH KEY LNO = LV_TABIX BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            GS_TC1-LR_NO = GS_LRREM-LR_NO.
*          GS_TC1-REMARKS = GS_LRREM-REMARKS.
          ENDIF.
          LV_TOTWT = LV_TOTWT + LV_WEIGHT.

*        IF GS_TC1-LR_NO IS INITIAL AND GS_TC1-REMARKS IS INITIAL.

          IF LV_MOD = 'X'.

            MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1.
            CLEAR:GS_LRREM, GS_TC1.
            SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

          ELSE.

            APPEND GS_TC1 TO GT_TC1.
            CLEAR:GS_LRREM, GS_TC1.
            SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

          ENDIF.

        ENDIF.

        IF GS_MSEG IS NOT INITIAL AND GS_MARA IS NOT INITIAL AND GS_T001W IS NOT INITIAL.

*       TRIP_NO
          GS_TC1-INVOICE_NO = GS_MSEG-MBLNR.
          GS_TC1-CUSTOMER_NAME = GS_T001W-NAME1.
          GS_TC1-INVOICE_DATE = GS_MSEG-BUDAT_MKPF.
          GS_TC1-INVOICE_AMOUNT = LV_AMOUNT.
          GS_TC1-WEIGHT = LV_WEIGHT.
          GS_TC1-COMPANY_CODE = GS_MSEG-BUKRS.
          GS_TC1-LOCATION = GS_T001W-ORT01.
          GS_TC1-STATUS = 'STO' .

          SORT GT_LRREM BY LNO.
          READ TABLE GT_LRREM INTO GS_LRREM WITH KEY LNO = LV_TABIX BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            GS_TC1-LR_NO = GS_LRREM-LR_NO.

          ENDIF.
          LV_TOTWT = LV_TOTWT + LV_WEIGHT.

*        IF GS_TC1-LR_NO IS INITIAL AND GS_TC1-REMARKS IS INITIAL.

          IF LV_MOD = 'X'.

            MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1.
            CLEAR:GS_LRREM, GS_TC1.
            SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

          ELSE.

            APPEND GS_TC1 TO GT_TC1.
            CLEAR:GS_LRREM, GS_TC1.
            SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

          ENDIF.

        ENDIF.

      ENDIF.
    ENDIF.
  ELSEIF FNAM EQ 'GS_TC1-LR_NO'.

    SORT GT_LRREM BY LNO.
    READ TABLE GT_LRREM INTO GS_LRREM WITH KEY LNO = LV_TABIX BINARY SEARCH.
    IF SY-SUBRC EQ 0.

      GS_TC1-LR_NO = GS_LRREM-LR_NO.
*      GS_TC1-REMARKS = GS_LRREM-REMARKS.
      MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LR_NO." REMARKS.
      CLEAR:GS_LRREM, GS_TC1.

    ENDIF.
    CLEAR : GT_LRREM , GS_LRREM .
*  ELSEIF FNAM EQ 'GS_TC1-REMARKS'.
*
*    SORT GT_LRREM BY LNO.
*    READ TABLE GT_LRREM INTO GS_LRREM WITH KEY LNO = LV_TABIX BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*
*      GS_TC1-LR_NO = GS_LRREM-LR_NO.
*      GS_TC1-REMARKS = GS_LRREM-REMARKS.
*      MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LR_NO REMARKS.
*      CLEAR:GS_LRREM, GS_TC1.
*
*    ENDIF.

  ENDIF.

*        ELSEIF GS_TC1-LR_NO IS NOT INITIAL OR GS_TC1-REMARKS IS INITIAL.

*          GS_TC1-LR_NO = LV_LR.
*          GS_TC1-REMARKS = LV_REM.
*
*
*          MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LR_NO REMARKS.
*          CLEAR GS_TC1.

*        ENDIF.

*      ELSEIF FNAM EQ 'GS_TC1-LR_NO'.



*      ENDIF.


*        APPEND GS_TC1 TO GT_TC1.
*        CLEAR GS_TC1.
*        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.


*        GS_TC1-LR_NO = LV_LR.
*        GS_TC1-REMARKS = LV_REM.
*
*
*        MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LR_NO REMARKS.
*        CLEAR GS_TC1.

*    ENDIF.
*      ENDIF.

*  ELSE.

*  MESSAGE I001.

*  ENDIF.


*    ELSE.


  " Check for Location , LR Number and Remarks is not initial


*    GS_TC1-LOCATION = LV_LOC.
*    GS_TC1-LR_NO = LV_LR.
*    GS_TC1-REMARKS = LV_REM.


*    MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LOCATION LR_NO REMARKS.
*    CLEAR GS_TC1.
*    ENDIF.

*  ELSEIF RB_EDT = 'X' AND RB_INV = 'X'.

*  ENDIF.

*ELSEIF RB_EDT = 'X'.

*  SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.
*
*  GET CURSOR FIELD FNAM VALUE FVAL.
*
*  INPUT = FVAL.
*
*  CALL 'CONVERSION_EXIT_ALPHA_INPUT'  ID 'INPUT'  FIELD INPUT
*                                      ID 'OUTPUT' FIELD OUTPUT.
*
*  DELETE GT_TC1 INDEX LV_TABIX.
*
*  READ TABLE GT_TC1 INTO GS_TC1 WITH KEY INVOICE_NO = OUTPUT.
*
**  IF SY-SUBRC NE 0.
*
*  GS_TC1-INVOICE_NO = OUTPUT.
*
*
*  SELECT SINGLE VBELN
*                BUKRS
*                NETWR
*                KUNAG
*                MWSBK
*                FROM VBRK
*                INTO GS_VBRK
*                WHERE VBELN EQ GS_TC1-INVOICE_NO.
*
*  IF GS_VBRK IS NOT INITIAL.
*
*
*    SELECT VBELN
*           POSNR
*           NTGEW
*           BRGEW
*           GEWEI
*           VOLUM
*           VOLEH
*           FROM VBRP INTO TABLE GT_VBRP
*           WHERE VBELN EQ GS_VBRK-VBELN.
*
*    SELECT SINGLE KUNNR
*                  NAME1
*                  ORT01
*                  FROM KNA1
*                  INTO GS_KNA1
*                  WHERE KUNNR EQ GS_VBRK-KUNAG.
*
*  ENDIF.
*
*
**    CLEAR LV_WEIGHT.
*  LOOP AT GT_VBRP INTO GS_VBRP.
*
*    LV_WEIGHT = LV_WEIGHT + GS_VBRP-BRGEW. "  Gross Weight addition by Invoice line item
*
*
*  ENDLOOP.
*
**    CLEAR LV_AMOUNT.
*  LV_AMOUNT = GS_VBRK-NETWR + GS_VBRK-MWSBK.
*
*
**    IF GS_VBRK IS NOT INITIAL AND GS_KNA1 IS NOT INITIAL.
*
**       TRIP_NO
*  GS_TC1-INVOICE_NO = GS_VBRK-VBELN.
*  GS_TC1-CUSTOMER_NAME = GS_KNA1-NAME1.
*  GS_TC1-INVOICE_AMOUNT = LV_AMOUNT.
*  GS_TC1-WEIGHT = LV_WEIGHT.
*  GS_TC1-COMPANY_CODE = GS_VBRK-BUKRS.
*  GS_TC1-LOCATION = GS_KNA1-ORT01.
*  GS_TC1-LR_NO = LV_LR.
*  GS_TC1-REMARKS = LV_REM.
*  LV_TOTWT = LV_TOTWT + LV_WEIGHT.
*
**IF GS_TC1-LR_NO.
**
**ENDIF.
**        GS_TC1-LR_NO = LV_LR.
**        GS_TC1-REMARKS = LV_REM.
**
**        MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LOCATION LR_NO REMARKS.
**        CLEAR GS_TC1.
*
*
*  APPEND GS_TC1 TO GT_TC1.
*  CLEAR GS_TC1.
*  SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.
**    ENDIF.
*
**  ELSE.
*
*  MESSAGE I001.

*  ENDIF.


*    ELSE.


  " Check for Location , LR Number and Remarks is not initial


*    GS_TC1-LOCATION = LV_LOC.

*    GS_TC1-LR_NO = LV_LR.
*    GS_TC1-REMARKS = LV_REM.
*
*
*    MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LOCATION LR_NO REMARKS.
*    CLEAR GS_TC1.


*    ENDIF.

*  ELSEIF RB_EDT = 'X' AND RB_INV = 'X'.

*  ENDIF.



*ENDIF.


ENDFORM.                    " FILL_TABLE_CONTROL_VALUES
**&---------------------------------------------------------------------*
**&      Module  CHECK  OUTPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE CHECK OUTPUT.
*
*
*
**  BREAK-POINT.
**  BREAK-POINT.
*ENDMODULE.                 " CHECK  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  9002_GET_TC_VALUES  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 9002_GET_TC_VALUES INPUT.

  CLEAR: LV_SEL_LINE,
         LV_TABIX,
         LV_LR.
*         LV_REM.

  CASE OK_CODE.

    WHEN 'DLT9002'.

      READ TABLE GT_TC1 INTO GS_TC1 INDEX TC_1-CURRENT_LINE. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
      IF NOT SEL IS INITIAL.
        GS_TC1-SEL = 'X'.
        MODIFY GT_TC1 FROM GS_TC1 INDEX TC_1-CURRENT_LINE.
      ENDIF.

*
*     WHEN 'ENTER'.
*        READ TABLE GT_TC1 INTO GS_TC1 INDEX TC_1-CURRENT_LINE .
*    "    IF SEL IS NOT INITIAL.
*          LV_INV = GS_TC1-INVOICE_NO .
*     "   ENDIF.


  ENDCASE.


*  READ TABLE GT_TC1 INTO GS_TC1 INDEX TC_1-CURRENT_LINE.
*  IF NOT SEL IS INITIAL.
*    GS_TC1-SEL = 'X'.
*    MODIFY GT_TC1 FROM GS_TC1 INDEX TC_1-CURRENT_LINE.
*  ENDIF.

*  MODIFY GT_TC1 FROM GS_TC1 INDEX TC_1-CURRENT_LINE.

*  LV_LR = GS_TC1-LR_NO.
*  LV_REM = GS_TC1-REMARKS.
*
*  GS_TC1-LR_NO = LV_LR.
*  GS_TC1-REMARKS = LV_REM.

*  FNAM = 'GS_TC1-LR_NO'.
*  SET CURSOR FIELD FNAM.
*  GET CURSOR FIELD FNAM VALUE FVAL.

*  FNAM = 'GS_TC1-REMARKS'.
*  SET CURSOR FIELD FNAM.
*  GET CURSOR FIELD FNAM VALUE FVAL.
*  LV_REM = FVAL.
*  CLEAR: FNAM, FVAL.
*
*  GS_TC1-LR_NO = LV_LR.
*  GS_TC1-REMARKS = LV_REM.

  GET CURSOR FIELD FNAM.
  IF FNAM EQ 'GS_TC1-LR_NO'." OR FNAM EQ 'GS_TC1-REMARKS'.

    GET CURSOR LINE LV_SEL_LINE.
    LV_TABIX = TC_1-TOP_LINE + ( LV_SEL_LINE - 1 ).
*    READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
    IF GS_TC1-LR_NO IS NOT INITIAL." AND GS_TC1-REMARKS IS INITIAL.

      READ TABLE GT_LRREM INTO GS_LRREM INDEX LV_TABIX.
      IF SY-SUBRC EQ 0 AND GS_LRREM-LR_NO IS NOT INITIAL.
        SET CURSOR LINE LV_TABIX.
        GET CURSOR FIELD FNAM VALUE FVAL.
        LV_LR = FVAL.
        GS_LRREM-LNO = LV_TABIX.
        GS_LRREM-LR_NO = LV_LR.
        MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING LR_NO.
      ELSEIF SY-SUBRC NE 0 AND GS_LRREM-LR_NO IS INITIAL." AND GS_LRREM-REMARKS IS INITIAL.
        SET CURSOR LINE LV_TABIX.
        GET CURSOR FIELD FNAM VALUE FVAL.
        LV_LR = FVAL.
        GS_LRREM-LNO = LV_TABIX.
        GS_LRREM-LR_NO = LV_LR.
        APPEND GS_LRREM TO GT_LRREM.
*      ELSEIF SY-SUBRC EQ 0 AND GS_LRREM-LR_NO IS INITIAL AND GS_LRREM-REMARKS IS NOT INITIAL.
*        MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING LR_NO.
      ENDIF.

*    ELSEIF GS_TC1-LR_NO IS INITIAL.  "GS_TC1-REMARKS IS NOT INITIAL AND
*
*      READ TABLE GT_LRREM INTO GS_LRREM INDEX LV_TABIX.
*      IF SY-SUBRC EQ 0 AND GS_LRREM-REMARKS IS NOT INITIAL.
*        MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING REMARKS.
*      ELSEIF SY-SUBRC NE 0 AND GS_LRREM-LR_NO IS INITIAL AND GS_LRREM-REMARKS IS INITIAL.
*        GS_LRREM-LNO = LV_TABIX.
*        GS_LRREM-REMARKS = GS_TC1-REMARKS.
*        APPEND GS_LRREM TO GT_LRREM.
*      ELSEIF SY-SUBRC EQ 0 AND GS_LRREM-LR_NO IS NOT INITIAL AND GS_LRREM-REMARKS IS INITIAL.
*        MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING REMARKS.
*      ENDIF.

*    ELSEIF GS_TC1-REMARKS IS NOT INITIAL AND GS_TC1-LR_NO IS NOT INITIAL.
*      READ TABLE GT_LRREM INTO GS_LRREM INDEX LV_TABIX.
*      IF SY-SUBRC NE 0.
*        GS_LRREM-LNO = LV_TABIX.
*        GS_LRREM-LR_NO = GS_TC1-LR_NO.
*        GS_LRREM-REMARKS = GS_TC1-REMARKS.
*        APPEND GS_LRREM TO GT_LRREM.
*      ELSEIF SY-SUBRC EQ 0.
*        GS_LRREM-LNO = LV_TABIX.
*        GS_LRREM-LR_NO = GS_TC1-LR_NO.
*        GS_LRREM-REMARKS = GS_TC1-REMARKS.
*        MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING LR_NO REMARKS.
*      ENDIF.

    ENDIF.

  ENDIF.
*  GET CURSOR LINE LV_SEL_LINE.
*  LV_TABIX = TC_1-TOP_LINE + ( LV_SEL_LINE - 1 ).
*
*  IF GS_TC1-LR_NO IS NOT INITIAL AND GS_TC1-REMARKS IS INITIAL.
*
*    READ TABLE GT_LRREM INTO GS_LRREM INDEX LV_TABIX.
*    IF SY-SUBRC EQ 0 AND GS_LRREM-LR_NO IS NOT INITIAL.
*      MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING LR_NO.
*    ELSEIF SY-SUBRC NE 0 AND GS_LRREM-LR_NO IS INITIAL AND GS_LRREM-REMARKS IS INITIAL.
*      GS_LRREM-LNO = LV_TABIX.
*      GS_LRREM-LR_NO = GS_TC1-LR_NO.
*      APPEND GS_LRREM TO GT_LRREM.
*    ELSEIF SY-SUBRC EQ 0 AND GS_LRREM-LR_NO IS INITIAL AND GS_LRREM-REMARKS IS NOT INITIAL.
*      MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING LR_NO.
*    ENDIF.
*
*  ELSEIF GS_TC1-REMARKS IS NOT INITIAL AND GS_TC1-LR_NO IS INITIAL.
*
*    READ TABLE GT_LRREM INTO GS_LRREM INDEX LV_TABIX.
*    IF SY-SUBRC EQ 0 AND GS_LRREM-REMARKS IS NOT INITIAL.
*      MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING REMARKS.
*    ELSEIF SY-SUBRC NE 0 AND GS_LRREM-LR_NO IS INITIAL AND GS_LRREM-REMARKS IS INITIAL.
*      GS_LRREM-LNO = LV_TABIX.
*      GS_LRREM-REMARKS = GS_TC1-REMARKS.
*      APPEND GS_LRREM TO GT_LRREM.
*    ELSEIF SY-SUBRC EQ 0 AND GS_LRREM-LR_NO IS NOT INITIAL AND GS_LRREM-REMARKS IS INITIAL.
*      MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING REMARKS.
*    ENDIF.
*
*  ELSEIF GS_TC1-REMARKS IS NOT INITIAL AND GS_TC1-LR_NO IS NOT INITIAL.
*    READ TABLE GT_LRREM INTO GS_LRREM INDEX LV_TABIX.
*    IF SY-SUBRC NE 0.
*      GS_LRREM-LNO = LV_TABIX.
*      GS_LRREM-LR_NO = GS_TC1-LR_NO.
*      GS_LRREM-REMARKS = GS_TC1-REMARKS.
*      APPEND GS_LRREM TO GT_LRREM.
*    ELSEIF SY-SUBRC EQ 0.
*      GS_LRREM-LNO = LV_TABIX.
*      GS_LRREM-LR_NO = GS_TC1-LR_NO.
*      GS_LRREM-REMARKS = GS_TC1-REMARKS.
*      MODIFY GT_LRREM FROM GS_LRREM INDEX LV_TABIX TRANSPORTING LR_NO REMARKS.
*    ENDIF.
*
*  ENDIF.

  CLEAR OK_CODE.
  OK_CODE = SY-UCOMM.

  CASE OK_CODE.

    WHEN 'DLT9002'.  " Table Control  delete

      READ TABLE GT_TC1 INTO GS_TC1 INDEX TC_1-CURRENT_LINE. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
      IF SEL IS NOT INITIAL.

      ENDIF.

    WHEN 'ENTER'.
      READ TABLE GT_TC1 INTO GS_TC1 INDEX TC_1-CURRENT_LINE . "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
      IF SEL IS NOT INITIAL.
        LV_INV = GS_TC1-INVOICE_NO .
      ENDIF.

  ENDCASE.


  CLEAR: GS_TC1.


ENDMODULE.                 " 9002_GET_TC_VALUES  INPUT
*&---------------------------------------------------------------------*
*&      Form  REFRESH_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REFRESH_9002 .

  CLEAR: IP_TRCODE,
         IP_TRANS,
         IP_FLOC,
         IP_TLOC,
         IP_TCAP,
         IP_FILL,
         IP_TRN,
         IP_REM,
         IP_NOD,
         OP_OFCHR,
         OP_LCHR,
         OP_UCHR,
         OP_HCRG,
         OP_LRC,
         OP_ACT,
         IP_VNO,
         IP_LOC,
         IP_CT,
         IP_LOCA,
         IP_DAY,
         IP_CA,
         IP_LTRCODE,
         IP_LTRANS,
         LOC_CHARGE.
  REFRESH: GT_TC1,
           GT_TC2.

  PERFORM REFRESH_OBJECTS.

  CALL SCREEN 9002.


ENDFORM.                    " REFRESH_9002
*&---------------------------------------------------------------------*
*&      Module  SH_9002  INPUT
*&---------------------------------------------------------------------*
*  Invoice Screen - 9002 - Search help Module
*----------------------------------------------------------------------*
MODULE SH_9002 INPUT.

  PERFORM SEARCH_HELP_TRANPORTER_9002.


ENDMODULE.                 " SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  TRANPORTER_SEARCH_HELP_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_TRANPORTER_9002.


  SELECT LIFNR
         NAME1
         FROM LFA1
         INTO TABLE IT_LFA1
         WHERE KTOKK EQ 'YBTR' AND LOEVM <> 'X' .

  DATA: RETURN TYPE TABLE OF DDSHRETVAL WITH HEADER LINE.

  DATA: T_VALUES  TYPE STANDARD TABLE OF TY_LFA1.
  DATA: T_RETURN  TYPE STANDARD TABLE OF DDSHRETVAL.
  DATA: T_MAPPING TYPE STANDARD TABLE OF DSELC.

  DATA: S_VALUES  TYPE TY_LFA1.
  DATA: S_RETURN  TYPE DDSHRETVAL.
  DATA: S_MAPPING TYPE DSELC.

  S_MAPPING-FLDNAME     = 'F0001'.
  S_MAPPING-DYFLDNAME   = 'IP_TRCODE'.
  APPEND S_MAPPING TO T_MAPPING.
  CLEAR S_MAPPING.

  S_MAPPING-FLDNAME     = 'F0002'.
  S_MAPPING-DYFLDNAME   = 'IP_TRANS'.
  APPEND S_MAPPING TO T_MAPPING.
  CLEAR S_MAPPING.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'NAME1_GP'
      DYNPPROG        = SY-CPROG
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = 'IP_TRCODE'
                                                                      " window_title    = ‘Selection of Material with Description’
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_LFA1
      RETURN_TAB      = T_RETURN
      DYNPFLD_MAPPING = T_MAPPING
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  IF SY-SUBRC <> 0.
** Implement suitable error handling here
  ENDIF.



*CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
*  EXPORTING
*    TABNAME                   = 'IT_LFA1'
*    FIELDNAME                 = 'LIFNR'
**   SEARCHHELP                = ' '
**   SHLPPARAM                 = ' '
*   DYNPPROG                  = sy-cprog
*   DYNPNR                    = sy-dynnr
*   DYNPROFIELD               = 'IP_TRANS'
**   STEPL                     = 0
**   VALUE                     = ' '
**   MULTIPLE_CHOICE           = ' '
**   DISPLAY                   = ' '
**   SUPPRESS_RECORDLIST       = ' '
**   CALLBACK_PROGRAM          = ' '
**   CALLBACK_FORM             = ' '
**   CALLBACK_METHOD           =
**   SELECTION_SCREEN          = ' '
** IMPORTING
**   USER_RESET                =
* TABLES
*   RETURN_TAB                = return
* EXCEPTIONS
*   FIELD_NOT_FOUND           = 1
*   NO_HELP_FOR_FIELD         = 2
*   INCONSISTENT_HELP         = 3
*   NO_VALUES_FOUND           = 4
*   OTHERS                    = 5
*          .
*IF SY-SUBRC <> 0.
** Implement suitable error handling here
*ENDIF.













*  SELECT LIFNR
*         NAME1
*         FROM LFA1
*         INTO TABLE IT_LFA1
*         WHERE KTOKK EQ 'YBTR'.
*
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*  EXPORTING
* " DDIC_STRUCTURE         = 'GT_TAB'
* RETFIELD               = 'NAME1_GP'
*
**   PVALKEY                = ' '
**   DYNPPROG               = ' '
**   DYNPNR                 = ' '
*  DYNPROFIELD            = 'IP_TRANS'
**   STEPL                  = 0
*  WINDOW_TITLE           = 'Transporter Name'
**   VALUE                  = ' '
*  VALUE_ORG              = 'S'
**   MULTIPLE_CHOICE        = ' '
**   DISPLAY                = ' '
**   CALLBACK_PROGRAM       = ' '
**   CALLBACK_FORM          = ' '
**   CALLBACK_METHOD        =
**   MARK_TAB               =
** IMPORTING
**   USER_RESET             =
*  TABLES
*  VALUE_TAB              = IT_LFA1
**   FIELD_TAB              =
*     RETURN_TAB             = IT_RETURN
**   DYNPFLD_MAPPING        =
** EXCEPTIONS
**   PARAMETER_ERROR        = 1
**   NO_VALUES_FOUND        = 2
**   OTHERS                 = 3
*        .
*  IF SY-SUBRC <> 0.
** Implement suitable error handling here
*  ENDIF.
*
*
*"APPEND LINES OF IT_RETURN1 TO IT_RETURN .
*
*  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.
*
*  IF SY-SUBRC = 0.
*
*    GS_DYFIELDS-FIELDNAME  = 'IP_TRANS'.
*
*    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
*    APPEND GS_DYFIELDS TO IT_DYFIELDS.
*
*    CALL FUNCTION 'DYNP_VALUES_UPDATE'
*      EXPORTING
*        DYNAME                     = SY-REPID
*        DYNUMB                     = '9002'
*      TABLES
*        DYNPFIELDS                 = IT_DYFIELDS
** EXCEPTIONS
**   INVALID_ABAPWORKAREA       = 1
**   INVALID_DYNPROFIELD        = 2
**   INVALID_DYNPRONAME         = 3
**   INVALID_DYNPRONUMMER       = 4
**   INVALID_REQUEST            = 5
**   NO_FIELDDESCRIPTION        = 6
**   UNDEFIND_ERROR             = 7
**   OTHERS                     = 8
*              .
*    IF SY-SUBRC <> 0.
** Implement suitable error handling here
*    ENDIF.
*
*  ENDIF.


ENDFORM.                    " TRANPORTER_SEARCH_HELP




*&---------------------------------------------------------------------*
*&      Form  FILL_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_HEADER .

  CLEAR: LV_FLOC,
         LV_TLOC,
         LV_TCAP,
         LV_TRAN,
         "LV_LTRAN,
         LV_FTYPE,
         OP_OFCHR,
         OP_LCHR,
         OP_UCHR,
         OP_LRC,
         OP_HCRG.
*         IP_TRANS.
*         IP_FLOC,
*         IP_TLOC,
*         IP_TCAP,
*         IP_FILL,
*         IP_NOD.
  CLEAR : LV_MAP.

  LV_TRCODE1 = IP_TRCODE.
  LV_LTRCODE1 = IP_LTRCODE.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = LV_TRCODE1
    IMPORTING
      OUTPUT = LV_TRCODE.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = LV_LTRCODE1
    IMPORTING
      OUTPUT = LV_LTRCODE.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = IP_LOCA
    IMPORTING
      OUTPUT = LV_LOCCO1.

  SELECT SINGLE NAME1
               FROM LFA1
               INTO LV_NAME
               WHERE LIFNR EQ LV_TRCODE.

  IP_TRANS = LV_NAME.

  SELECT SINGLE NAME1
              FROM LFA1
              INTO LV_LNAME
              WHERE LIFNR EQ LV_LTRCODE.  "ADDED ON 21/4

  IP_LTRANS = LV_LNAME.

  IF LV_NAME EQ LV_LNAME .
    MESSAGE 'Same vednor not allowed' TYPE 'E' .
  ENDIF.

  SELECT SINGLE NAME1
             FROM LFA1
             INTO LTV_NAME
             WHERE LIFNR EQ LV_LOCCO1.

  IP_LOCA1 = LTV_NAME.


  CALL FUNCTION 'STRING_LENGTH'
    EXPORTING
      STRING = IP_FLOC
    IMPORTING
      LENGTH = LEN1.

  IF LEN1 EQ '4' .

    SELECT SINGLE NAME1
                  FROM T001W
                  INTO LV_FLOC
                  WHERE WERKS EQ IP_FLOC.


  ELSE.
    SELECT WERKS
                  UP TO 1 ROWS FROM T001W
                  INTO LV_FLOC
                  WHERE NAME1 EQ IP_FLOC ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
  ENDIF.


  SELECT CITY_ROW UP TO 1 ROWS FROM ZFREIGHT_CITY INTO LV_CITYID WHERE AREA EQ IP_TLOC  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

  LV_TLOC = IP_TLOC.


  SELECT TRUCK
                UP TO 1 ROWS FROM ZTRUCK
                INTO LV_TCAP " Capacity 5K , 9K
                WHERE DES EQ IP_TCAP ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
  " Message

  SELECT FILL
                UP TO 1 ROWS FROM ZFILLING
                INTO LV_FTYPE " Half truck or full truck
                WHERE DES EQ IP_FILL ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation


  IF LV_FTYPE EQ '1'. " Half  Loading.

    PERFORM HALF_LOAD.

  ELSEIF LV_FTYPE EQ '2'. " Full Load"  FNAM EQ 'IP_FILL' OR FNAM EQ 'IP_TCAP' AND LV_FTYPE EQ '2'. " Full Load

    PERFORM FULL_LOAD.

  ENDIF.

ENDFORM.                    " FILL_HEADER

*&---------------------------------------------------------------------*
*&      Form  INVOICE_SEARCH_HELP_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_INVOICE_9002.

  RANGES: INVOICE_NO FOR GS_TC1-INVOICE_NO.

  TYPES : BEGIN OF GS_STOINV ,
           VBELN TYPE VBRK-VBELN,
         END OF GS_STOINV .
  DATA : GT_STOINV TYPE TABLE OF GS_STOINV,
         WA_STOINV TYPE GS_STOINV.

  SELECT INVOICE_NO
         FROM ZFREIGHT_ITEM
         INTO TABLE GT_PRINV.

  DATA : LV_DATE TYPE SY-DATUM .

  DATA : LV_WERKS TYPE T001W-WERKS.


  IF LV_FLOC IS INITIAL .

    SELECT FROM_CODE UP TO 1 ROWS INTO LV_EFROM FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ OP_TRN ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
    LV_FLOC = LV_EFROM .

  ENDIF.

  DATA : LV_years TYPE T5A4A-DLYYR.

  CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
    EXPORTING
      DATE      = SY-DATUM
      DAYS      = '07'
      MONTHS    = '07'
      SIGNUM    = '-'
**      YEARS     = LV_years
    IMPORTING
      CALC_DATE = LV_DATE.


  LOOP AT GT_PRINV INTO GS_PRINV.

    INVOICE_NO-SIGN = 'I'.
    INVOICE_NO-OPTION = 'EQ'.
    INVOICE_NO-LOW = GS_PRINV-INVOICE_NO.

    APPEND INVOICE_NO.
  ENDLOOP.

  IF GT_TC1 IS NOT INITIAL.

    LOOP AT GT_TC1 INTO GS_TC1.

      INVOICE_NO-SIGN = 'I'.
      INVOICE_NO-OPTION = 'EQ'.
      INVOICE_NO-LOW = GS_TC1-INVOICE_NO.

      APPEND INVOICE_NO.
    ENDLOOP.

  ENDIF.

  "SELECT PLANT MAPPING_PLANT FROM ZTRIP_PLANT INTO TABLE GT_PLANT WHERE PLANT EQ LV_FLOC.

  SELECT MAPPING_PLANT UP TO 1 ROWS FROM ZTRIP_PLANT INTO LV_MAP WHERE PLANT EQ LV_FLOC ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

  IF INVOICE_NO IS INITIAL.

    SELECT VBELN "#EC CI_DB_OPERATION_OK[2768887] " Added by <IT-CAR Tool> during Code Remediation
       FROM VBRK
       INTO TABLE GT_SHINV.

  ELSEIF INVOICE_NO IS NOT INITIAL.


*    SELECT VBELN
*         FROM VBRK
*         INTO TABLE GT_SHINV
*         WHERE VBELN NOT IN INVOICE_NO AND FKDAT GE LV_DATE   . "-INVOICE_NO.

    "   SELECT VBELN FROM VBRP INTO TABLE GT_SHINV WHERE VBELN NOT IN INVOICE_NO AND ERDAT >= LV_DATE AND WERKS EQ LV_FLOC.

    SELECT  VBELN "#EC CI_DB_OPERATION_OK[2768887] " Added by <IT-CAR Tool> during Code Remediation
       FROM VBRP INTO TABLE GT_SHINV WHERE
       ( WERKS = LV_MAP OR WERKS EQ LV_FLOC )
       AND VBELN NOT IN INVOICE_NO
       AND ERDAT >= LV_DATE . " AND ( WERKS = GT_PLANT-PLANT OR WERKS EQ LV_FLOC ) .

*    SELECT VBELN
*           FROM VBRP INTO TABLE GT_SHINV
*           FOR ALL ENTRIES IN GT_PLANT WHERE ( WERKS = GT_PLANT-MAPPING_PLANT OR WERKS EQ LV_FLOC )
*           AND VBELN NOT IN INVOICE_NO
*           AND ERDAT >= LV_DATE . " AND ( WERKS = GT_PLANT-PLANT OR WERKS EQ LV_FLOC ) .
    " WHERE VBELN NOT IN INVOICE_NO AND ERDAT >= LV_DATE AND WERKS EQ LV_FLOC.



*    SELECT MBLNR
*         FROM MSEG
*         INTO TABLE GT_SHSTOI
*         WHERE MBLNR NOT IN INVOICE_NO
*         AND BWART EQ '351' AND SHKZG EQ 'H' AND CPUDT_MKPF >= LV_DATE AND WERKS EQ LV_FLOC.

*    SELECT MBLNR
*          FROM MSEG
*          INTO TABLE GT_SHSTOI
*          FOR ALL ENTRIES IN GT_PLANT
*          WHERE ( WERKS = GT_PLANT-MAPPING_PLANT OR WERKS EQ LV_FLOC )
*          AND MBLNR NOT IN INVOICE_NO AND CPUDT_MKPF >= LV_DATE
*          AND BWART EQ '351' AND SHKZG EQ 'H'.


    SELECT MBLNR
          FROM MSEG
          INTO TABLE GT_SHSTOI
          WHERE ( WERKS = LV_MAP OR WERKS EQ LV_FLOC )
          AND MBLNR NOT IN INVOICE_NO AND CPUDT_MKPF >= LV_DATE
          AND BWART EQ '351' AND SHKZG EQ 'H'.

  ENDIF.


  LOOP AT GT_SHSTOI INTO GS_SHSTOI .

    WA_STOINV-VBELN = GS_SHSTOI-MBLNR.

    APPEND WA_STOINV TO GT_STOINV.

  ENDLOOP.

  APPEND LINES OF GT_STOINV TO GT_SHINV .

SORT GT_SHINV BY VBELN . " Added by <IT-CAR Tool> during Code Remediation
SORT GT_SHINV BY VBELN . " Added by <IT-CAR Tool> during Code Remediation
  DELETE ADJACENT DUPLICATES FROM GT_SHINV COMPARING VBELN .

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'VBELN_VF'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            = 'GS_TC1-INVOICE_NO'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Invoice Number'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = GT_SHINV
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'GS_TC1-INVOICE_NO'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.



ENDFORM.                    " INVOICE_SEARCH_HELP_9002
*&---------------------------------------------------------------------*
*&      Module  IN_SH_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE IN_SH_9002 INPUT.
  "IF RB_INV = 'X'.

  PERFORM SEARCH_HELP_INVOICE_9002.

  "ELSEIF RB_STO = 'X'.

  " PERFORM SEARCH_HELP_STO_9002.

  "ENDIF.


ENDMODULE.                 " IN_SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  CLEAR_VAR_WA_TABLES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CLEAR_VAR_WA_TABLES .

  CLEAR: LV_ADDTOT,
         OP_ACT,
         LV_TOTWT.
*         LV_ACTION.


ENDFORM.                    " CLEAR_VAR_WA_TABLES
*&---------------------------------------------------------------------*
*&      Form  FULL_LOAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FULL_LOAD .


  IF LV_TCAP IS NOT INITIAL.

    SELECT FTYPE
          TCAP
          CCODE
          TNAME
          FLOC
          TLOC
          ZPPT
          VFROM
          VTO
          FROM ZFREIGHT_FLOAD
          INTO TABLE GT_FLOAD
         WHERE TCAP EQ LV_TCAP AND TNAME = LV_TRCODE AND
          FLOC EQ LV_FLOC AND
          TLOC EQ LV_TLOC AND
          VFROM LE SY-DATUM AND VTO GE SY-DATUM .

*        WHERE TCAP EQ LV_TCAP AND TNAME = LV_TRCODE AND
*        FLOC EQ LV_FLOC AND
*        TLOC EQ LV_TLOC.

    "     "TNAME EQ LV_TRAN AND
    "TNAME EQ LV_TRAN AND

    SORT GT_FLOAD BY FTYPE.

    " Ordinary Freight - FREI
    READ TABLE GT_FLOAD INTO GS_FLOAD WITH KEY FTYPE = 'FREI' BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      OP_OFCHR = GS_FLOAD-ZPPT.
    ENDIF.

    " Loading Charges - LOAD
    READ TABLE GT_FLOAD INTO GS_FLOAD WITH KEY FTYPE = 'LOAD' BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      OP_LCHR = GS_FLOAD-ZPPT.
    ENDIF.

    " Unloading Charges - ULOA
    READ TABLE GT_FLOAD INTO GS_FLOAD WITH KEY FTYPE = 'ULOA' BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      OP_UCHR = GS_FLOAD-ZPPT.
    ENDIF.

    " LR Charges - LRCH
    READ TABLE GT_FLOAD INTO GS_FLOAD WITH KEY FTYPE = 'LRCH' BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      OP_LRC = GS_FLOAD-ZPPT.
    ENDIF.

    " Halting Charges - HALT
    READ TABLE GT_FLOAD INTO GS_FLOAD WITH KEY FTYPE = 'HALT' BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      OP_HCRG = IP_NOD * GS_FLOAD-ZPPT.
    ENDIF.

    IF OP_OFCHR IS INITIAL OR OP_LCHR IS INITIAL OR OP_LRC IS INITIAL . "Added on 17/04/2020
      MESSAGE 'Action has not been processed successfully because of freight charge is not updated' TYPE 'E' .
    ENDIF.

  ENDIF.

  CLEAR : LV_TCAP.

ENDFORM.                    " FULL_LOAD
*&---------------------------------------------------------------------*
*&      Form  HALF_LOAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM HALF_LOAD .


  SELECT FTYPE
       CCODE
       TNAME
       FLOC
       TLOC
       ZPRI
       VFROM
       VTO
       FROM ZFREIGHT_HLOAD
       INTO TABLE GT_HLOAD "FOR ALL ENTRIES IN GS_KNA1
       WHERE TNAME = LV_TRCODE AND
       FLOC EQ LV_FLOC AND
       "TLOC EQ GS_KNA1-LOCATION AND
        TLOC EQ LV_TLOC AND
       VFROM LE SY-DATUM AND VTO GE SY-DATUM ..

  SORT GT_HLOAD BY FTYPE.

  " Ordinary Freight - FREI

if RB_CTR = 'X' .
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'FREI' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_OFCHR = LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.
 " Loading Charges - LOAD
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'LOAD' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_LCHR = LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.

  " Unloading Charges - ULOA
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'ULOA' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_UCHR = LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.

  " LR Charges - LRCH
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'LRCH' BINARY SEARCH."modified on 25/5
  IF SY-SUBRC EQ 0.
    OP_LRC =  GS_HLOAD-ZPRI.
    "OP_LRC = LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.

  " Halting Charges - HALT
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'HALT' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_HCRG = IP_NOD * GS_HLOAD-ZPRI.
  ENDIF.

endif.


  "edit
if RB_EDT = 'X'.
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'FREI' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_OFCHR = LV_FC + LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.
 " Loading Charges - LOAD
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'LOAD' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_LCHR = LV_LC + LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.

  " Unloading Charges - ULOA
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'ULOA' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_UCHR = LV_UC + LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.

  " LR Charges - LRCH
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'LRCH' BINARY SEARCH."modified on 25/5
  IF SY-SUBRC EQ 0.
    OP_LRC = GS_HLOAD-ZPRI.
    "OP_LRC = LV_TOTWT * GS_HLOAD-ZPRI.
  ENDIF.

  " Halting Charges - HALT
  READ TABLE GT_HLOAD INTO GS_HLOAD WITH KEY FTYPE = 'HALT' BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    OP_HCRG = LV_HC + IP_NOD * GS_HLOAD-ZPRI.
  ENDIF.

  endif.


*  IF OP_OFCHR IS INITIAL .
*    MESSAGE 'Freight charge is mandatory' TYPE 'E' .
*  ENDIF.

*    IF IP_LTRANS IS NOT INITIAL.
*      IF LOC_CHARGE IS INITIAL.
*        MESSAGE 'Freight charge is mandatory' TYPE 'E' .
*      ENDIF.
*    ENDIF.

ENDFORM.                    " HALF_LOAD
*&---------------------------------------------------------------------*
*&      Form  FIRST_ADD_FRIEGHT_CONTAINER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FIRST_ADD_FRIEGHT_CONTAINER .

  CREATE OBJECT LREF_CON
       EXPORTING
*        PARENT                      =
         CONTAINER_NAME              = 'CC2_FC'
*        STYLE                       =
*        LIFETIME                    = lifetime_default
*        REPID                       =
*        DYNNR                       =
*        NO_AUTODEF_PROGID_DYNNR     =
*      EXCEPTIONS
*        CNTL_ERROR                  = 1
*        CNTL_SYSTEM_ERROR           = 2
*        CREATE_ERROR                = 3
*        LIFETIME_ERROR              = 4
*        LIFETIME_DYNPRO_DYNPRO_LINK = 5
*        OTHERS                      = 6
         .
  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CREATE OBJECT LREF_ALV
    EXPORTING
*    I_SHELLSTYLE      = 0
*    I_LIFETIME        =
      I_PARENT          = LREF_CON
*    I_APPL_EVENTS     = space
*    I_PARENTDBG       =
*    I_APPLOGPARENT    =
*    I_GRAPHICSPARENT  =
*    I_NAME            =
*    I_FCAT_COMPLETE   = SPACE
*  EXCEPTIONS
*    ERROR_CNTL_CREATE = 1
*    ERROR_CNTL_INIT   = 2
*    ERROR_CNTL_LINK   = 3
*    ERROR_DP_CREATE   = 4
*    OTHERS            = 5
      .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  GS_LAYOUT_TC2-ZEBRA = 'X'.
  GS_LAYOUT_TC2-NO_TOOLBAR = 'X'.
  GS_LAYOUT_TC2-GRID_TITLE = 'Fill Entries'.

  ADD_FCAT_AFR_9001:

    1 'CHARGE_LOC' 'Charge Location' 15 ' ' ' ' ' ',
    2 'CHARGE_TYPE' 'Charge Type' 11 ' ' ' ' ' ',
    3 'VENDOR_CODE' 'Vendor Code' 11 ' ' ' ' ' ',
    4 'NO_OF_DAYS' 'Days' 4 ' ' ' ' ' ',
    5 'TOTAT_AMOUNT' 'Amount'      10 ' ' ' ' ' '.

*ADD9001


  CALL METHOD LREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
  EXPORTING
*    I_BUFFER_ACTIVE               =
*    I_BYPASSING_BUFFER            =
*    I_CONSISTENCY_CHECK           =
*    I_STRUCTURE_NAME              =
*    IS_VARIANT                    =
*    I_SAVE                        =
*    I_DEFAULT                     = 'X'
     IS_LAYOUT                     = GS_LAYOUT_TC2
*    IS_PRINT                      =
*    IT_SPECIAL_GROUPS             =
*    IT_TOOLBAR_EXCLUDING          =
*    IT_HYPERLINK                  =
*    IT_ALV_GRAPHICS               =
*    IT_EXCEPT_QINFO               =
*    IR_SALV_ADAPTER               =
    CHANGING
      IT_OUTTAB                     = GT_TC2
      IT_FIELDCATALOG               = GT_FCAT_TC2
*    IT_SORT                       =
*    IT_FILTER                     =
*  EXCEPTIONS
*    INVALID_PARAMETER_COMBINATION = 1
*    PROGRAM_ERROR                 = 2
*    TOO_MANY_LINES                = 3
*    OTHERS                        = 4
          .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  REFRESH GT_FCAT_TC2.
  CLEAR GS_LAYOUT_TC2.

ENDFORM.                    " FIRST_ADD_FRIEGHT_CONTAINER
*&---------------------------------------------------------------------*
*&      Module  MODIFY_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_9000 OUTPUT.

  CLEAR OK_CODE.
  OK_CODE = SY-UCOMM.

  CASE OK_CODE.
    WHEN 'RBACT' OR 'RPFUN' .
      LOOP AT SCREEN.
        IF RB_EDT = 'X' OR RB_PRI = 'X' OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ETN'.
            SCREEN-INPUT = '1'.
            SCREEN-INVISIBLE = '0'.
          ENDIF.
          "added on 25/6
*          IF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'LIN'.
*            SCREEN-ACTIVE = 0.
*            SCREEN-INVISIBLE = '1'.
*          ENDIF.
          "ended on 25/6
        ENDIF.
      ENDLOOP.

    WHEN 'ENTER' .
      LOOP AT SCREEN.
        IF RB_EDT = 'X' OR RB_PRI = 'X' OR RB_REP = 'X'.
          IF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'LIN'.
            SCREEN-ACTIVE = 0.
            SCREEN-INVISIBLE = '1'.
          ENDIF.
        ENDIF.
      ENDLOOP.
*
*    WHEN 'ENTER' .
*      LOOP AT SCREEN.
*        BREAK-POINT.

*      IF ( RB_EDT = 'X' OR RB_PRI = 'X' OR RB_REP = 'X' ).
*          IF SCREEN-GROUP1 = 'ECN' OR SCREEN-GROUP1 = 'LIN'.
*        LOOP AT SCREEN.
*          IF SCREEN-GROUP1 = 'ETN'.
*            SCREEN-ACTIVE = 0.
*            SCREEN-INVISIBLE = '1'.
*          ENDIF.
*          MODIFY SCREEN.
*        ENDLOOP.
*      ENDIF.


      "WHEN OTHERS .
  ENDCASE.

ENDMODULE.                 " MODIFY_9000  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  SH_9000_IP_TRN  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SH_9000_IP_TRN INPUT.

*IP_TRN

  PERFORM TRN_SEARCH_HELP.





ENDMODULE.                 " SH_9000_IP_TRN  INPUT
*&---------------------------------------------------------------------*
*&      Form  TRN_SEARCH_HELP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TRN_SEARCH_HELP .

  "IF RB_INV = 'X'.

  SELECT TRIP_NO
         FROM ZFREIGHT_HEADER
         INTO TABLE GT_TRN.
  " WHERE STATUS EQ 'ZINV'.

  " ELSEIF RB_STO = 'X'.

*    SELECT TRIP_NO
*         FROM ZFREIGHT_HEADER
*         INTO TABLE GT_TRN
*         WHERE STATUS EQ 'ZSTO'.

  "ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'ZTRIP'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            = 'IP_TRN'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Trip Sheet Number'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = GT_TRN
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'IP_TRN'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.

ENDFORM.                    " TRN_SEARCH_HELP
*&---------------------------------------------------------------------*
*&      Module  STATUS_9004  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9004 OUTPUT.
  SET PF-STATUS '9004PF'.
  SET TITLEBAR '9004_TITLE'.

ENDMODULE.                 " STATUS_9004  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  9004_GET_TC_VALUES  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 9004_GET_TC_VALUES INPUT.
*
  CLEAR: LV_SEL_LINE,
         OK_CODE.

  OK_CODE = SY-UCOMM.

*  BREAK-POINT.
  CASE OK_CODE.

    WHEN 'ENTER'.

      GET CURSOR LINE LV_SEL_LINE." VALUE GS_TC1.

*      APPEND GS_TC1 TO GT_TC1.

*      CLEAR GS_TC1.

*    WHEN 'DEL'.
*
*      READ TABLE GT_TC1 INTO GS_TC1 INDEX TC_1-CURRENT_LINE.
**      IF NOT SEL IS INITIAL.
*
**        GS_TC1-SEL = 'X'.
*        MODIFY GT_TC1 FROM GS_TC1 INDEX TC_1-CURRENT_LINE.
*
*      ENDIF.
*
*
*      LOOP AT GT_TC1 INTO GS_TC1 WHERE SEL = 'X'.
*
*        DELETE GT_TC1 INDEX SY-INDEX.
*
*      ENDLOOP.



  ENDCASE.


ENDMODULE.                 " 9004_GET_TC_VALUES  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9004  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9004 INPUT.
  CLEAR: OK_CODE,
          LV_SEL_LINE,
          LV_TABIX.

*  BREAK-POINT.
  OK_CODE = SY-UCOMM.

  GET CURSOR LINE LV_SEL_LINE.

  LV_TABIX = TCEI_1-TOP_LINE + ( LV_SEL_LINE - 1 ).
*  CLEAR OK_CODE.

  OK_CODE = SY-UCOMM.

  CASE OK_CODE.
*
*
*
    WHEN 'DEL'.

*      LOOP AT GT_TC1 INTO GS_TC1 WHERE SEL = 'X'.

*      ENDLOOP.


**    WHEN 'ENTER'.
**
**      APPEND GS_TC1 TO GT_TC1.
**      CLEAR GS_TC1.


  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9004  INPUT
*&---------------------------------------------------------------------*
*&      Module  SHEI_9004  INPUT
*&---------------------------------------------------------------------*
* Transporter Search help in TRN Edit screen
*----------------------------------------------------------------------*
MODULE SHEI_9004 INPUT.

ENDMODULE.                 " SHEI_9004  INPUT
*&---------------------------------------------------------------------*
*&      Module  INEI_SH_9004  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE INEI_SH_9004 INPUT.

ENDMODULE.                 " INEI_SH_9004  INPUT
*&---------------------------------------------------------------------*
*&      Module  SELOPT_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SELOPT_9000 OUTPUT.

  CASE OK_CODE.
    WHEN ' '.
      RB_CTR = 'X'.
      DYNPRO = '2101'.
      DYNPRO2 = '2103'.
      DYNPRO3 = '2105'.
    WHEN 'RBACT'.
*      IF  RB_REP = 'X' ."OR RB_APR = 'X'.
*        DYNPRO = '2100'.
*        DYNPRO2 = '2103'.
      "     ELSEIF RB_APR = 'X' OR RB_REP = 'X' .
      IF RB_APR = 'X' OR RB_REP = 'X' .
        DYNPRO = '2100'.
        DYNPRO2 = '2102'.
        IF RB_REP = 'X'.
          DYNPRO3 = '2104'.
        ENDIF.
        IF RB_APR = 'X'.
          DYNPRO3 = '2105'.
        ENDIF.
      ELSE.
        DYNPRO = '2101'.
        DYNPRO2 = '2103'.
        DYNPRO3 = '2105'.
      ENDIF.
    WHEN 'BACK'.
*      RB_CTR = 'X'.
      IF  RB_REP = 'X'." OR RB_APR = 'X'.
        DYNPRO = '2100'.
        DYNPRO2 = '2103'.
        DYNPRO3 = '2104'.
      ELSEIF RB_APR = 'X'.
        DYNPRO = '2100'.
        DYNPRO2 = '2102'.
        DYNPRO3 = '2105'.
      ELSE.
        DYNPRO = '2101'.
        DYNPRO2 = '2103'.
        DYNPRO3 = '2105'.
      ENDIF.
  ENDCASE.



ENDMODULE.                 " SELOPT_9000  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  FILL_EDIT_HEADER_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_EDIT_HEADER_INV.


  CLEAR:IP_LOC,
        IP_CT,
        IP_LOCA,
        IP_CA,
        IP_DAY,
        OP_OFCHR,
        OP_LCHR,
        OP_UCHR,
        OP_HCRG,
        OP_ACT,
        OP_TRN,
        IP_VNO,
        IP_TRCODE,
        IP_TRANS,
        IP_FLOC,
        IP_TLOC,
        IP_TCAP,
        IP_FILL,
        IP_NOD,
        GS_FHEAD,
        IP_LTRCODE,
        IP_LTRANS,
        LOC_CHARGE.

        SELECT MANDT
               TRIP_NO
               STATUS
               VENDOR_CODE
               VENDOR_NAME
               FROM_CODE
               FROM_LOC
               CITY_ID
               TO_LOC
               TRUCK_TYPE
               TRUCK_DES
               FILLING_TYPE
               FILING_DES
               FREIGHT_CHARGE
               LODING_CHARGE
               UNLOAD_CHARGE
               HALT_CHARGE
               LR_CHARGE
               NO_OF_DAYS
               VECHILE_NUMBER
               CRDATE
               CRTIME
               CREATED_BY
               TRN_VALUE
               APR_STA
               REMARKS
               LOCAL_VENDOR
               LO_VENDORNAME
               LOCAL_CHARGE
        UP TO 1 ROWS
        FROM ZFREIGHT_HEADER
               INTO GS_FHEAD WHERE TRIP_NO EQ LV_EDI  ORDER BY PRIMARY KEY.   ""IP_TRN.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation


  IP_VNO = GS_FHEAD-VECHILE_NUMBER.
  IP_TRCODE = GS_FHEAD-VENDOR_CODE.
  IP_TRANS = GS_FHEAD-VENDOR_NAME.
  IP_FLOC = GS_FHEAD-FROM_LOC.
  IP_TLOC = GS_FHEAD-TO_LOC.
  IP_TCAP = GS_FHEAD-TRUCK_DES.
  IP_FILL = GS_FHEAD-FILING_DES.
  IP_NOD = GS_FHEAD-NO_OF_DAYS.
  IP_REM = GS_FHEAD-REMARKS.
*
  OP_TRN = GS_FHEAD-TRIP_NO.
  OP_OFCHR = GS_FHEAD-FREIGHT_CHARGE.
  OP_LCHR = GS_FHEAD-LODING_CHARGE.
  OP_UCHR = GS_FHEAD-UNLOAD_CHARGE.
  OP_HCRG = GS_FHEAD-HALT_CHARGE.
  OP_LRC = GS_FHEAD-LR_CHARGE.
*OP_ACT = GS_FHEAD-TRIP_NO.

  IP_LTRCODE = GS_FHEAD-LOCAL_VENDOR.
  IP_LTRANS = GS_FHEAD-LO_VENDORNAME.
  LOC_CHARGE = GS_FHEAD-LOCAL_CHARGE.
*IP_LOC
*IP_CT
*IP_CA
*IP_DAY
*IP_TRN
*OP_OFCHR
*OP_LCHR
*OP_UCHR
*OP_HCRG
*OP_ACT
*OP_TRN
*IP_VNO
*IP_TRANS
*IP_FLOC
*IP_TLOC
*IP_TCAP
*IP_FILL
*IP_NOD

  REFRESH: GT_FHEAD.
  CLEAR: GS_FHEAD.


ENDFORM.                    " FILL_EDIT_HEADER_INV

*&---------------------------------------------------------------------*
*&      Form  FILL_EDIT_ITEM_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_EDIT_ITEM_INV .

  SELECT
*          TRIP_NO
        INVOICE_NO
        CUSTOMER_NAME
        INVOICE_DATE
        INVOICE_AMOUNT
        WEIGHT
        COMPANY_CODE
        LOCATION
        LR_NO
*          REMARKS
        FROM ZFREIGHT_ITEM
        INTO CORRESPONDING FIELDS OF TABLE GT_TC1 "GT_FITEM
        WHERE TRIP_NO EQ LV_EDI . "IP_TRN.

  IF RB_EDT = 'X' . "AND RB_INV = 'X'.

    CLEAR LV_NOLTC1.
    DESCRIBE TABLE GT_TC1 LINES LV_NOLTC1.

    IF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 GE 6.

      TC_1-LINES = LV_NOLTC1 + 1.

      READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
      IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.

        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

      ELSE.


        SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.

      ENDIF.


    ELSEIF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 LT 6.

      TC_1-LINES = 6.

      READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
      IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.

        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

      ELSE.


        SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.

      ENDIF.


    ENDIF.


  ENDIF.


ENDFORM.                    " FILL_EDIT_ITEM_INV

*&---------------------------------------------------------------------*
*&      Form  FILL_EDIT_ADFR_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_EDIT_ADFR_INV .

  CLEAR: LV_ADDTOT,
         OP_ACT.
  REFRESH: GT_TC2.
  PERFORM REFRESH_OBJECTS.

  IF IP_TRN IS NOT INITIAL.
    SELECT CHARGE_LOC
           CHARGE_TYPE
           VENDOR_CODE
           NO_OF_DAYS
           TOTAT_AMOUNT
           FROM ZFREIGHT_TRAN
           INTO TABLE GT_TC2
           WHERE TRIP_NO EQ LV_EDI. " IP_TRN.

  ENDIF.
  LOOP AT GT_TC2 INTO GS_TC2.

    LV_ADDTOT = LV_ADDTOT + GS_TC2-TOTAT_AMOUNT.

  ENDLOOP.

  OP_ACT = LV_ADDTOT.


  PERFORM SHOW_ADD_FRIEGHT_CONTAINER.

ENDFORM.                    " FILL_EDIT_ADFR_INV
*&---------------------------------------------------------------------*
*&      Module  9002_LR_REM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 9002_LR_REM INPUT.

  LV_LR = GS_TC1-LR_NO.
*  LV_REM = GS_TC1-REMARKS.


ENDMODULE.                 " 9002_LR_REM  INPUT
*&---------------------------------------------------------------------*
*&      Module  LOAD_TCEI_1_9004  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE LOAD_TCEI_1_9004 OUTPUT.

  CLEAR: OK_CODE,
          LV_SEL_LINE,
          LV_TABIX.
*
  OK_CODE = SY-UCOMM.
*
*  BREAK-POINT.
*
*  GET CURSOR LINE LV_SEL_LINE.
*
*  LV_TABIX = TCEI_1-TOP_LINE + ( LV_SEL_LINE - 1 ).
*
**
*  CASE OK_CODE.
**
*    WHEN 'ENTER'.
**      READ TABLE GT_TC1 INTO GS_TC1 INDEX TCEI_1-CURRENT_LINE.
***      APPEND GS_TC1 TO GT_TC1.
**      IF SY-SUBRC EQ 0.
*      IF LV_TABIX IS NOT INITIAL.
*      INSERT GS_TC1 INTO GT_TC1 INDEX LV_TABIX.
*      ENDIF.
*
*
**      ENDIF.
**
***      CLEAR GS_TC1.
**
**    WHEN 'DEL'.
**
**      READ TABLE GT_TC1 INTO GS_TC1 INDEX TCEI_1-CURRENT_LINE.
***      IF NOT SEL IS INITIAL.
**
***        GS_TC1-SEL = 'X'.
**      MODIFY GT_TC1 FROM GS_TC1 INDEX TCEI_1-CURRENT_LINE.
**
***      ENDIF.
**
**
***      LOOP AT GT_TC1 INTO GS_TC1 WHERE SEL = 'X'.
***
***        DELETE GT_TC1 INDEX SY-INDEX.
***
***      ENDLOOP.
**
**
**
*  ENDCASE.




ENDMODULE.                 " LOAD_TCEI_1_9004  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_9005  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9005 OUTPUT.
  SET PF-STATUS '9005_APR_PF'.
*  SET TITLEBAR 'xxx'.

ENDMODULE.                 " STATUS_9005  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9005  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9005 INPUT.
  CLEAR: OK_CODE.

  OK_CODE = SY-UCOMM.

  CASE OK_CODE.

    WHEN 'SUB9005'.

      PERFORM WHEN_APPROVAL_SUBMIT.
      PERFORM DB_UPDATION_STATUS.

    WHEN 'RES9005'.

    WHEN 'BACK'.

      PERFORM REFRESH_OBJECTS .
      CALL SCREEN 9000.


    WHEN OTHERS.


  ENDCASE.






ENDMODULE.                 " USER_COMMAND_9005  INPUT
*&---------------------------------------------------------------------*
*&      Form  APPROVAL_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CONTAINER_APPROVAL_REPORT.

  CREATE OBJECT LREF_CON
       EXPORTING
*        PARENT                      =
         CONTAINER_NAME              = 'CC_APR'
*        STYLE                       =
*        LIFETIME                    = lifetime_default
*        REPID                       =
*        DYNNR                       =
*        NO_AUTODEF_PROGID_DYNNR     =
*      EXCEPTIONS
*        CNTL_ERROR                  = 1
*        CNTL_SYSTEM_ERROR           = 2
*        CREATE_ERROR                = 3
*        LIFETIME_ERROR              = 4
*        LIFETIME_DYNPRO_DYNPRO_LINK = 5
*        OTHERS                      = 6
         .
  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CREATE OBJECT LREF_ALV
    EXPORTING
*    I_SHELLSTYLE      = 0
*    I_LIFETIME        =
      I_PARENT          = LREF_CON
*    I_APPL_EVENTS     = space
*    I_PARENTDBG       =
*    I_APPLOGPARENT    =
*    I_GRAPHICSPARENT  =
*    I_NAME            =
*    I_FCAT_COMPLETE   = SPACE
*  EXCEPTIONS
*    ERROR_CNTL_CREATE = 1
*    ERROR_CNTL_INIT   = 2
*    ERROR_CNTL_LINK   = 3
*    ERROR_DP_CREATE   = 4
*    OTHERS            = 5
      .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  GS_LAYOUT_TC2-ZEBRA = 'X'.
*  GS_LAYOUT_TC2-NO_TOOLBAR = 'X'.
*  GS_LAYOUT_TC2-GRID_TITLE = 'Fill Entries'.




  ADD_FCAT_AFR_9005:

    1 'TRIP_NO' 'Trip Sheet Number' 11 ' ' ' ' ' ' ' ' ' ',
    2 'VENDOR_NAME' 'Vendor Name' 35 ' ' ' ' ' ' ' ' ' ',
    3 'FROM_LOC' 'From' 35 ' ' ' ' ' ' ' ' ' ',
    4 'TO_LOC' 'To'      35 ' ' ' ' ' ' ' ' ' ',
    5 'CRDATE' 'Creation Date' 10 ' ' ' ' ' ' ' ' ' ',
    6 'TRN_VALUE' 'TRN Value' 15 ' ' ' ' ' ' ' ' ' ',
    7 'APR_STA' 'Approve' 7 ' ' ' ' ' ' 'X' 'X'.

*ADD9001


  CALL METHOD LREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
  EXPORTING
*    I_BUFFER_ACTIVE               =
*    I_BYPASSING_BUFFER            =
*    I_CONSISTENCY_CHECK           =
*    I_STRUCTURE_NAME              =
*    IS_VARIANT                    =
*    I_SAVE                        =
*    I_DEFAULT                     = 'X'
     IS_LAYOUT                     = GS_LAYOUT_TC2
*    IS_PRINT                      =
*    IT_SPECIAL_GROUPS             =
*    IT_TOOLBAR_EXCLUDING          =
*    IT_HYPERLINK                  =
*    IT_ALV_GRAPHICS               =
*    IT_EXCEPT_QINFO               =
*    IR_SALV_ADAPTER               =
    CHANGING
      IT_OUTTAB                     = GT_HSTA
      IT_FIELDCATALOG               = GT_FCAT_TC3
*    IT_SORT                       =
*    IT_FILTER                     =
*  EXCEPTIONS
*    INVALID_PARAMETER_COMBINATION = 1
*    PROGRAM_ERROR                 = 2
*    TOO_MANY_LINES                = 3
*    OTHERS                        = 4
          .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  REFRESH GT_FCAT_TC3.
  CLEAR GS_LAYOUT_TC2.

  CALL METHOD LREF_ALV->REGISTER_EDIT_EVENT
    EXPORTING
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
    EXCEPTIONS
      ERROR      = 1
      OTHERS     = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

*CALL METHOD LREF_ALV->REFRESH_TABLE_DISPLAY
**  EXPORTING
**    IS_STABLE      =
**    I_SOFT_REFRESH =
**  EXCEPTIONS
**    FINISHED       = 1
**    OTHERS         = 2
*        .
*IF SY-SUBRC <> 0.
** Implement suitable error handling here
*ENDIF.
*
**CALL METHOD ALV_GRID1->REFRESH_TABLE_DISPLAY.

ENDFORM.                    " APPROVAL_REPORT
*&---------------------------------------------------------------------*
*&      Form  FILL_APPROVAL_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_APPROVAL_REPORT .

  CLEAR: LV_WHERE.
  REFRESH: GT_APR.
  IF SO_TRN IS INITIAL AND IP_CNM IS INITIAL AND SO_CDATE IS INITIAL.

    MESSAGE 'Please Enter Tripsheet No or Date' TYPE 'E' .


*    SELECT TRIP_NO
*           STATUS
*           VENDOR_NAME
*           FROM_LOC
*           TO_LOC
*           TRUCK_TYPE
*           TRUCK_DES
*           FILLING_TYPE
*           FILING_DES
*           FREIGHT_CHARGE
*           LODING_CHARGE
*           UNLOAD_CHARGE
*           HALT_CHARGE
*           LR_CHARGE
*           NO_OF_DAYS
*           VECHILE_NUMBER
*           CRDATE
*           CRTIME
*           CREATED_BY
*           TRN_VALUE
*           APR_STA
*           FROM  ZFREIGHT_HEADER
*           INTO TABLE GT_HSTA WHERE APR_STA <> 'X' .

  ELSE.

    IF SO_TRN IS NOT INITIAL AND IP_CNM IS NOT INITIAL AND SO_CDATE IS NOT INITIAL.

      LV_WHERE = 'TRIP_NO IN SO_TRN AND FROM_LOC EQ IP_CNM AND CRDATE IN SO_CDATE'.

    ELSEIF SO_TRN IS NOT INITIAL AND IP_CNM IS INITIAL AND SO_CDATE IS INITIAL.

      LV_WHERE = 'TRIP_NO IN SO_TRN'.

    ELSEIF SO_TRN IS INITIAL AND IP_CNM IS NOT INITIAL AND SO_CDATE IS INITIAL.

      LV_WHERE = 'FROM_LOC EQ IP_CNM'.

    ELSEIF SO_TRN IS INITIAL AND IP_CNM IS INITIAL AND SO_CDATE IS NOT INITIAL.

      LV_WHERE = 'CRDATE IN SO_CDATE'.

    ELSEIF SO_TRN IS INITIAL AND IP_CNM IS NOT INITIAL AND SO_CDATE IS NOT INITIAL.

      LV_WHERE = 'FROM_LOC EQ IP_CNM AND CRDATE IN SO_CDATE'.

    ELSEIF SO_TRN IS NOT INITIAL AND IP_CNM IS INITIAL AND SO_CDATE IS NOT INITIAL.

      LV_WHERE = 'TRIP_NO IN SO_TRN AND CRDATE IN SO_CDATE'.

    ELSEIF SO_TRN IS NOT INITIAL AND IP_CNM IS NOT INITIAL AND SO_CDATE IS INITIAL.

      LV_WHERE = 'TRIP_NO IN SO_TRN AND FROM_LOC EQ IP_CNM'.

    ENDIF.


    SELECT MANDT
           TRIP_NO
           STATUS
           VENDOR_CODE
           VENDOR_NAME
           FROM_CODE
           FROM_LOC
           CITY_ID
           TO_LOC
           TRUCK_TYPE
           TRUCK_DES
           FILLING_TYPE
           FILING_DES
           FREIGHT_CHARGE
           LODING_CHARGE
           UNLOAD_CHARGE
           HALT_CHARGE
           LR_CHARGE
           NO_OF_DAYS
           VECHILE_NUMBER
           CRDATE
           CRTIME
           CREATED_BY
           TRN_VALUE
           APR_STA
           REMARKS
           FROM  ZFREIGHT_HEADER
           INTO TABLE GT_HSTA
           WHERE (LV_WHERE) AND APR_STA <> 'X' .

  ENDIF.


ENDFORM.                    " FILL_APPROVAL_REPORT
*&---------------------------------------------------------------------*
*&      Module  SH_9000_IP_CNM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SH_9000_IP_CNM INPUT.

  PERFORM COMPANY_NAME_SEARCH_HELP.

ENDMODULE.                 " SH_9000_IP_CNM  INPUT
*&---------------------------------------------------------------------*
*&      Form  COMPANY_NAME_SEARCH_HELP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM COMPANY_NAME_SEARCH_HELP .

  SELECT FROM_LOC
         FROM ZFREIGHT_HEADER
         INTO TABLE GT_CNM .

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'NAME1'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            =   'IP_CNM'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Company Name'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = GT_CNM
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'IP_CNM'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.


ENDFORM.                    " COMPANY_NAME_SEARCH_HELP
*&---------------------------------------------------------------------*
*&      Form  WHEN_APPROVAL_SUBMIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM WHEN_APPROVAL_SUBMIT .


  CALL METHOD LREF_ALV->CHECK_CHANGED_DATA
    IMPORTING
      E_VALID   = CHECKED
*  CHANGING
*    C_REFRESH = 'X'
      .


ENDFORM.                    " WHEN_APPROVAL_SUBMIT

*&---------------------------------------------------------------------*
*&      Form  DB_UPDATION_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DB_UPDATION_STATUS .

*  CLEAR: LV_ACTION.
*  LV_ACTION = 'X'.

  CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
    EXPORTING
      ACTION             = LV_ACTION
*     WA_ZFREIGHT_HEADER =
    TABLES "  IT_ZFREIGHT_ITEM         =
*     IT_ZFREIGHT_TRAN   =
      IT_ZFREIGHT_HEADER = GT_HSTA
    EXCEPTIONS
      DB_UPDATE_SUCCESS  = 1
      DB_UPDATE_FAIL     = 2
      OTHERS             = 3.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.




ENDFORM.                    " DB_UPDATION_STATUS
*&---------------------------------------------------------------------*
*&      Form  PRINT_INITIALIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PRINT_INITIALIZATION.
  REFRESH: GT_SFHEAD,
           GT_SFITEM.

  CLEAR: LV_CCODE.

ENDFORM.                    " PRINT_INITIALIZATION

*&---------------------------------------------------------------------*
*&      Form  PRINT_TABLES_FILL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PRINT_TABLES_FILL .

  CLEAR : LV_PER.
  SELECT MANDT
                TRIP_NO
                STATUS
                VENDOR_CODE
                VENDOR_NAME
                FROM_CODE
                FROM_LOC
                CITY_ID
                TO_LOC
                TRUCK_TYPE
                TRUCK_DES
                FILLING_TYPE
                FILING_DES
                FREIGHT_CHARGE
                LODING_CHARGE
                UNLOAD_CHARGE
                HALT_CHARGE
                LR_CHARGE
                NO_OF_DAYS
                VECHILE_NUMBER
                CRDATE
                CRTIME
                CREATED_BY
                TRN_VALUE
                APR_STA
                REMARKS
                UP TO 1 ROWS
                FROM ZFREIGHT_HEADER CLIENT SPECIFIED
                INTO GS_SFHEAD
                WHERE TRIP_NO EQ LV_EDI ORDER BY PRIMARY KEY.   "" IP_TRN.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
*
  SELECT VENDOR_CODE UP TO 1 ROWS FROM ZFREIGHT_HEADER INTO LV_VEN WHERE TRIP_NO = LV_EDI  ORDER BY PRIMARY KEY.  ""IP_TRN .
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
  IF LV_VEN IS NOT INITIAL .
    SELECT LIFNR PERCENTAGE FROM ZTRIP_APPROVAL INTO TABLE IT_APP WHERE LIFNR EQ LV_VEN .
  ENDIF.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = GS_SFHEAD-VENDOR_CODE
    IMPORTING
      OUTPUT = LV_VEN1.

  SELECT SINGLE PERCENTAGE FROM ZTRIP_APPROVAL INTO LV_PER WHERE LIFNR = LV_VEN1 .

  IF GS_SFHEAD IS NOT INITIAL.
*
    " IF IP_TRN IS NOT INITIAL AND IP_CCD IS NOT INITIAL.
    IF LV_EDI IS NOT INITIAL AND IP_CCD IS NOT INITIAL.
      SELECT MANDT
             TRIP_NO
             INVOICE_NO
             CUSTOMER_NAME
             INVOICE_DATE
             INVOICE_AMOUNT
             WEIGHT
             COMPANY_CODE
             LOCATION
             LR_NO
*           REMARKS
             FROM  ZFREIGHT_ITEM CLIENT SPECIFIED
             INTO TABLE GT_SFITEM
             WHERE TRIP_NO EQ LV_EDI AND "IP_TRN AND
             COMPANY_CODE EQ IP_CCD.

    ELSE.

      SELECT MANDT
     TRIP_NO
     INVOICE_NO
     CUSTOMER_NAME
     INVOICE_DATE
     INVOICE_AMOUNT
     WEIGHT
     COMPANY_CODE
     LOCATION
     LR_NO
*           REMARKS
     FROM  ZFREIGHT_ITEM CLIENT SPECIFIED
     INTO TABLE GT_SFITEM
     WHERE TRIP_NO EQ LV_EDI. "IP_TRN . "AND
      "COMPANY_CODE IN IP_CCD.
    ENDIF.
*
    LOOP AT GT_SFITEM INTO WA_SFITEM .
      TOT_INV = TOT_INV + WA_SFITEM-INVOICE_AMOUNT .
    ENDLOOP.
*
*
*
    IF LV_PER IS NOT INITIAL.
      LV_TOT = TOT_INV / LV_PER .
    ENDIF.
    SELECT CHARGE_LOC
         CHARGE_TYPE
         VENDOR_CODE
         NO_OF_DAYS
         TOTAT_AMOUNT
         FROM ZFREIGHT_TRAN
         INTO TABLE IT_ZFREIGHT_TRAN
         WHERE TRIP_NO EQ LV_EDI. "IP_TRN.

    LOOP AT IT_ZFREIGHT_TRAN INTO WA_ZFREIGHT_TRAN .
      TOT_INV1 = TOT_INV1 + WA_ZFREIGHT_TRAN-TOTAT_AMOUNT .
    ENDLOOP.
*
    TOT_INV1 = TOT_INV1 + GS_SFHEAD-FREIGHT_CHARGE + GS_SFHEAD-LODING_CHARGE + GS_SFHEAD-UNLOAD_CHARGE + GS_SFHEAD-HALT_CHARGE + GS_SFHEAD-LR_CHARGE .

    IF LV_PER IS NOT INITIAL.
      IF TOT_INV1 > LV_TOT AND GS_SFHEAD-APR_STA <> 'X' .
        MESSAGE 'Kindly get Approval' TYPE 'E' .
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.                    " PRINT_TABLES_FILL
*&---------------------------------------------------------------------*
*&      Form  PRINT_SMARTFORM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PRINT_SMARTFORM .

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      FORMNAME           = FORMNAME
*     VARIANT            = ' '
*     DIRECT_CALL        = ' '
    IMPORTING
      FM_NAME            = FM_NAME
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  CALL FUNCTION FM_NAME " Function module name - Dev:  '/1BCDWB/SF00000478'
    EXPORTING
*   ARCHIVE_INDEX              =
*   ARCHIVE_INDEX_TAB          =
*   ARCHIVE_PARAMETERS         =
*   CONTROL_PARAMETERS         =
*   MAIL_APPL_OBJ              =
*   MAIL_RECIPIENT             =
*   MAIL_SENDER                =
*   OUTPUT_OPTIONS             =
*   USER_SETTINGS              = 'X'
*      HEADER                     = GS_SFHEAD
      IP_CCD                     = IP_CCD
      IP_TRN                     = LV_EDI . "IP_TRN
* IMPORTING
*   DOCUMENT_OUTPUT_INFO       =
*   JOB_OUTPUT_INFO            =
*   JOB_OUTPUT_OPTIONS         =
  "   TABLES
*      ITEM                       = GT_SFITEM
* EXCEPTIONS
*   FORMATTING_ERROR           = 1
*   INTERNAL_ERROR             = 2
*   SEND_ERROR                 = 3
*   USER_CANCELED              = 4
*   OTHERS                     = 5
  .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.


*  CALL FUNCTION FM_NAME
*    EXPORTING
**   ARCHIVE_INDEX              =
**   ARCHIVE_INDEX_TAB          =
**   ARCHIVE_PARAMETERS         =
**   CONTROL_PARAMETERS         =
**   MAIL_APPL_OBJ              =
**   MAIL_RECIPIENT             =
**   MAIL_SENDER                =
**   OUTPUT_OPTIONS             =
**   USER_SETTINGS              = 'X'
*      HEADER                     = GS_SFHEAD
** IMPORTING
**   DOCUMENT_OUTPUT_INFO       =
**   JOB_OUTPUT_INFO            =
**   JOB_OUTPUT_OPTIONS         =
*    TABLES
*      ITEM                       = GT_SFITEM
** EXCEPTIONS
**   FORMATTING_ERROR           = 1
**   INTERNAL_ERROR             = 2
**   SEND_ERROR                 = 3
**   USER_CANCELED              = 4
**   OTHERS                     = 5
*            .
*  IF SY-SUBRC <> 0.
** Implement suitable error handling here
*  ENDIF.






ENDFORM.                    " PRINT_SMARTFORM
*&---------------------------------------------------------------------*
*&      Module  SH_9000_IP_CCD  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SH_9000_IP_CCD INPUT.

  " PERFORM SEARCH_HELP_COMPANY_CODE.

ENDMODULE.                 " SH_9000_IP_CCD  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_COMPANY_CODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_COMPANY_CODE .

  SELECT FROM_LOC
           FROM ZFREIGHT_HEADER
           INTO TABLE GT_CNM  .

  TYPES : BEGIN OF GS_COM ,
           COMPANY_CODE TYPE ZFREIGHT_ITEM-COMPANY_CODE ,
         END OF GS_COM .
  DATA : GT_COM TYPE TABLE OF GS_COM .


  SELECT COMPANY_CODE
          FROM ZFREIGHT_ITEM INTO TABLE GT_COM FOR ALL ENTRIES IN GT_TRN WHERE TRIP_NO = GT_TRN-TRIP_NO .


  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'COMPANY_CODE'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            =   'IP_CCD'
*   STEPL                  = 0
  WINDOW_TITLE           = 'COMPANY_CODE'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = GT_COM
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'IP_CCD'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.



ENDFORM.                    " SEARCH_HELP_COMPANY_CODE
*&---------------------------------------------------------------------*
*&      Module  CHECK  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CHECK OUTPUT.
*  IF RB_EDT = 'X' .
*    LOOP AT SCREEN.
*      IF SCREEN-GROUP1 = 'G1' .
*        SCREEN-INPUT = '0'.
*        " SCREEN-INVISIBLE = '1'.
*      ENDIF.
*      MODIFY SCREEN.
*    ENDLOOP.
*  ENDIF.



*  BREAK-POINT.
*        LOOP AT GT_TC1 INTO GS_TC1 WHERE SEL EQ 'X'.
*
*      ENDLOOP.


*     IF RB_EDT = 'X' .
*       LOOP AT GT_TC1 INTO GS_TC1  .
*         IF GS_TC1-INVOICE_NO IS NOT INITIAL.
*           SCREEN-INPUT = '0'.
*          ENDIF.
*           MODIFY GT_TC1 FROM GS_TC1.
*       ENDLOOP.
*      ENDIF.

*        LOOP AT SCREEN.
*          IF SCREEN-GROUP1 = 'GRT' .
*            SCREEN-INPUT = '0'.
*            SCREEN-INVISIBLE = '1'.
*          ENDIF.
*         MODIFY SCREEN.
*      ENDLOOP.
*    ENDIF.


ENDMODULE.                 " CHECK  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_STO_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_STO_9002 .

  RANGES: INVOICE_NO FOR GS_TC1-INVOICE_NO.

  SELECT TRIP_NO
         FROM ZFREIGHT_HEADER
         INTO TABLE GT_DOC
         WHERE STATUS EQ 'ZSTO'.

  IF GT_DOC IS NOT INITIAL.

    SELECT INVOICE_NO
           FROM ZFREIGHT_ITEM
           INTO TABLE GT_PRINV
           FOR ALL ENTRIES IN GT_DOC
           WHERE TRIP_NO EQ GT_DOC-TRIP_NO.

  ENDIF.



  LOOP AT GT_PRINV INTO GS_PRINV.

    INVOICE_NO-SIGN = 'I'.
    INVOICE_NO-OPTION = 'EQ'.
    INVOICE_NO-LOW = GS_PRINV-INVOICE_NO.

    APPEND INVOICE_NO.
  ENDLOOP.

  IF GT_TC1 IS NOT INITIAL.

    LOOP AT GT_TC1 INTO GS_TC1.

      INVOICE_NO-SIGN = 'I'.
      INVOICE_NO-OPTION = 'EQ'.
      INVOICE_NO-LOW = GS_TC1-INVOICE_NO.

      APPEND INVOICE_NO.
    ENDLOOP.

  ENDIF.

  IF INVOICE_NO IS INITIAL.

    SELECT MBLNR
           FROM MSEG
           INTO TABLE GT_SHSTOI
           WHERE BWART EQ '351'.

  ELSEIF INVOICE_NO IS NOT INITIAL.


    SELECT MBLNR
           FROM MSEG
           INTO TABLE GT_SHSTOI
           WHERE MBLNR NOT IN INVOICE_NO
           AND BWART EQ '351'. "-INVOICE_NO.

    IF SY-SUBRC EQ 0.

      SELECT MBLNR
             FROM MKPF
             INTO TABLE GT_SHSTO
             FOR ALL ENTRIES IN GT_SHSTOI
             WHERE MBLNR EQ GT_SHSTOI-MBLNR.


    ENDIF.

  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'MBLNR'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            = 'GS_TC1-INVOICE_NO'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Material Doc'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = GT_SHSTO
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'GS_TC1-INVOICE_NO'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.



ENDFORM.                    " SEARCH_HELP_STO_9002
*&---------------------------------------------------------------------*
*&      Form  FILL_TABLE_CONTROL_VALUES_STO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_TABLE_CONTROL_VALUES_STO .

  CLEAR: GS_MSEG,
         GS_T001W,
         GS_MARA,
         GS_TC1,
         LV_WEIGHT,
         LV_AMOUNT,
         LV_TABIX,
         LV_SEL_LINE,
         LV_MOD,
         FNAM,
         FVAL,
         INPUT,
         OUTPUT.

  GET CURSOR LINE LV_SEL_LINE.

  LV_TABIX = TC_1-TOP_LINE + ( LV_SEL_LINE - 1 ).

  READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
  IF SY-SUBRC EQ 0.

    LV_MOD = 'X'.

  ELSE.

    CLEAR LV_MOD.

  ENDIF.


* IF RB_CTR = 'X' AND RB_INV = 'X'.
* IF RB_CTR = 'X'.
* IF GS_TC1-CUSTOMER_NAME IS INITIAL AND GS_TC1-INVOICE_AMOUNT IS INITIAL AND GS_TC1-WEIGHT IS INITIAL AND GS_TC1-COMPANY_CODE IS INITIAL.
* IF FNAM EQ 'GS_TC1-INVOICE_NO'.
* SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.

  GET CURSOR FIELD FNAM VALUE FVAL.

  IF FNAM EQ 'GS_TC1-INVOICE_NO'.


    INPUT = FVAL.

    CALL 'CONVERSION_EXIT_ALPHA_INPUT'  ID 'INPUT'  FIELD INPUT
                                        ID 'OUTPUT' FIELD OUTPUT.

    SELECT TRIP_NO
                  INVOICE_NO
                  UP TO 1 ROWS FROM ZFREIGHT_ITEM
                  INTO GS_CHKINV
                  WHERE INVOICE_NO EQ OUTPUT ORDER BY PRIMARY KEY.
    ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation


    IF GS_CHKINV IS NOT INITIAL.

      MESSAGE I002 WITH GS_CHKINV-TRIP_NO.

    ELSE.

      READ TABLE GT_TC1 INTO GS_TC1 WITH KEY INVOICE_NO = OUTPUT.

      IF SY-SUBRC EQ 0.

        MESSAGE I001.

      ELSE.

        GS_TC1-INVOICE_NO = OUTPUT.


        SELECT MBLNR
                      BWART
                      MATNR
                      SHKZG
                      DMBTR
                      MENGE
                      BUKRS
                      UMWRK
                      UP TO 1 ROWS FROM MSEG
                      INTO GS_MSEG
                      WHERE MBLNR EQ GS_TC1-INVOICE_NO AND
                      SHKZG EQ 'H' AND
                      BWART EQ '351' ORDER BY PRIMARY KEY.
        ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

        IF GS_MSEG IS NOT INITIAL.

          SELECT SINGLE MATNR
                        BRGEW
                        GEWEI
                        FROM MARA
                        INTO GS_MARA
                        WHERE MATNR EQ GS_MSEG-MATNR.


          SELECT SINGLE WERKS
                        NAME1
                        ORT01
                        FROM T001W
                        INTO GS_T001W
                        WHERE WERKS EQ GS_MSEG-UMWRK.

        ENDIF.


*    CLEAR LV_WEIGHT.
*        LOOP AT GT_VBRP INTO GS_VBRP.
*
        LV_WEIGHT = GS_MSEG-MENGE *  GS_MARA-BRGEW. "  Gross Weight addition by Invoice line item
*
*
*        ENDLOOP.

*    CLEAR LV_AMOUNT.
        LV_AMOUNT = GS_MSEG-DMBTR.


        IF GS_MSEG IS NOT INITIAL AND GS_MARA IS NOT INITIAL AND GS_T001W IS NOT INITIAL.

*       TRIP_NO
          GS_TC1-INVOICE_NO = GS_MSEG-MBLNR.
          GS_TC1-CUSTOMER_NAME = GS_T001W-NAME1.
          GS_TC1-INVOICE_AMOUNT = LV_AMOUNT.
          GS_TC1-WEIGHT = LV_WEIGHT.
          GS_TC1-COMPANY_CODE = GS_MSEG-BUKRS.
          GS_TC1-LOCATION = GS_T001W-ORT01.
          SORT GT_LRREM BY LNO.
          READ TABLE GT_LRREM INTO GS_LRREM WITH KEY LNO = LV_TABIX BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            GS_TC1-LR_NO = GS_LRREM-LR_NO.

          ENDIF.
          LV_TOTWT = LV_TOTWT + LV_WEIGHT.

*        IF GS_TC1-LR_NO IS INITIAL AND GS_TC1-REMARKS IS INITIAL.

          IF LV_MOD = 'X'.

            MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1.
            CLEAR:GS_LRREM, GS_TC1.
            SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

          ELSE.

            APPEND GS_TC1 TO GT_TC1.
            CLEAR:GS_LRREM, GS_TC1.
            SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

          ENDIF.

        ENDIF.

      ENDIF.
    ENDIF.
  ELSEIF FNAM EQ 'GS_TC1-LR_NO'.

    SORT GT_LRREM BY LNO.
    READ TABLE GT_LRREM INTO GS_LRREM WITH KEY LNO = LV_TABIX BINARY SEARCH.
    IF SY-SUBRC EQ 0.

      GS_TC1-LR_NO = GS_LRREM-LR_NO.
*      GS_TC1-REMARKS = GS_LRREM-REMARKS.
      MODIFY GT_TC1 INDEX LV_TABIX FROM GS_TC1 TRANSPORTING LR_NO." REMARKS.
      CLEAR:GS_LRREM, GS_TC1.

    ENDIF.


  ENDIF.




ENDFORM.                    " FILL_TABLE_CONTROL_VALUES_STO
*&---------------------------------------------------------------------*
*&      Form  FILL_HEADER_STO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_HEADER_STO .





ENDFORM.                    " FILL_HEADER_STO
*&---------------------------------------------------------------------*
*&      Form  FILL_HEADER_TO_DELETE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_HEADER_TO_DELETE .

  CLEAR: GS_DELHEAD.

  SELECT MANDT
                TRIP_NO
                STATUS
                VENDOR_CODE
                VENDOR_NAME
                FROM_CODE
                FROM_LOC
                CITY_ID
                TO_LOC
                TRUCK_TYPE
                TRUCK_DES
                FILLING_TYPE
                FILING_DES
                FREIGHT_CHARGE
                LODING_CHARGE
                UNLOAD_CHARGE
                HALT_CHARGE
                LR_CHARGE
                NO_OF_DAYS
                VECHILE_NUMBER
                CRDATE
                CRTIME
                CREATED_BY
                TRN_VALUE
                APR_STA
                REMARKS
                UP TO 1 ROWS
                FROM ZFREIGHT_HEADER CLIENT SPECIFIED
                INTO GS_DELHEAD
                WHERE TRIP_NO EQ IP_TRN ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation


ENDFORM.                    " FILL_HEADER_TO_DELETE
*&---------------------------------------------------------------------*
*&      Form  FILL_ITEM_TO_DELETE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_ITEM_TO_DELETE .

  REFRESH: GT_DELITEM.

  SELECT MANDT
         TRIP_NO
         INVOICE_NO
         CUSTOMER_NAME
         INVOICE_DATE
         INVOICE_AMOUNT
         WEIGHT
         COMPANY_CODE
         LOCATION
         LR_NO
         FROM ZFREIGHT_ITEM CLIENT SPECIFIED
         INTO TABLE GT_DELITEM
         WHERE TRIP_NO EQ IP_TRN.


ENDFORM.                    " FILL_ITEM_TO_DELETE
*&---------------------------------------------------------------------*
*&      Form  FILL_TRANS_TO_DELETE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_TRANS_TO_DELETE .

  REFRESH: GT_DELTRAN.

  SELECT MANDT
         TRIP_NO
         LINE_ITEM
         CHARGE_LOC
         CHARGE_TYPE
         VENDOR_CODE
         NO_OF_DAYS
         TOTAT_AMOUNT
         FROM ZFREIGHT_TRAN CLIENT SPECIFIED
         INTO TABLE GT_DELTRAN
         WHERE TRIP_NO EQ IP_TRN.

ENDFORM.                    " FILL_TRANS_TO_DELETE
*&---------------------------------------------------------------------*
*&      Form  ENTER_IN_TABLE_CONTROL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ENTER_IN_TABLE_CONTROL .
  IF RB_CTR = 'X' OR RB_EDT = 'X'.

    "   IF RB_INV = 'X'.

    CLEAR LV_NOLTC1.
    DESCRIBE TABLE GT_TC1 LINES LV_NOLTC1.


    LOOP AT GT_TC1 INTO WA_TC1.
    ENDLOOP.

    IF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 GE 3.

      TC_1-LINES = LV_NOLTC1 + 1.

      READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
      IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.

        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.

      ELSE.


        SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.

      ENDIF.


    ELSEIF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 LT 3.

      READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
      IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.
        SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.
      ELSE.
        SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.
      ENDIF.


    ENDIF.

    CLEAR FNAM.
    GET CURSOR FIELD FNAM.

    IF FNAM EQ 'GS_TC1-INVOICE_NO' OR FNAM EQ 'GS_TC1-LOCATION'
      OR FNAM EQ 'GS_TC1-LR_NO' OR FNAM EQ 'GS_TC1-REMARKS' . " OR FNAM EQ 'GS_TC1-.

      PERFORM FILL_TABLE_CONTROL_VALUES.
      PERFORM FILL_HEADER.

    ELSEIF FNAM EQ 'IP_TRCODE' OR FNAM EQ 'IP_TRANS' OR FNAM EQ 'IP_FLOC'  OR FNAM
      EQ 'IP_TLOC' OR FNAM EQ 'IP_FILL'  OR FNAM EQ 'IP_TCAP' OR FNAM EQ 'IP_NOD' . "OR FNAM '.

      PERFORM FILL_HEADER.

    ENDIF.

*    ELSEIF RB_STO = 'X'.
*
*      CLEAR LV_NOLTC1.
*      DESCRIBE TABLE GT_TC1 LINES LV_NOLTC1.
*
*      IF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 GE 3.
*
*        TC_1-LINES = LV_NOLTC1 + 1.
*
*        READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
*        IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.
*          SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.
*        ELSE.
*          SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.
*        ENDIF.
*
*      ELSEIF GT_TC1 IS NOT INITIAL AND LV_NOLTC1 LT 3.
*
*        READ TABLE GT_TC1 INTO GS_TC1 INDEX LV_TABIX.
*        IF SY-SUBRC EQ 0 AND GS_TC1-CUSTOMER_NAME IS NOT INITIAL.
*          SET CURSOR FIELD 'GS_TC1-LR_NO' LINE LV_TABIX.
*        ELSE.
*          SET CURSOR FIELD 'GS_TC1-INVOICE_NO' LINE LV_TABIX.
*        ENDIF.
*
*
*      ENDIF.
*
*      CLEAR FNAM.
*      GET CURSOR FIELD FNAM.
*
*      IF FNAM EQ 'GS_TC1-INVOICE_NO' OR FNAM EQ 'GS_TC1-LOCATION'
*        OR FNAM EQ 'GS_TC1-LR_NO' OR FNAM EQ 'GS_TC1-REMARKS'.
*
*        PERFORM FILL_TABLE_CONTROL_VALUES_STO.
*        PERFORM FILL_HEADER.
*
*      ELSEIF FNAM EQ 'IP_TRANS' OR FNAM EQ 'IP_FLOC'  OR FNAM
*        EQ 'IP_TLOC' OR FNAM EQ 'IP_FILL'  OR FNAM EQ 'IP_TCAP'.
*
*        PERFORM FILL_HEADER.
*
*      ENDIF.
*
*    ENDIF.


  ENDIF.

ENDFORM.                    " ENTER_IN_TABLE_CONTROL

*&---------------------------------------------------------------------*
*&      Form  EDIT_IN_CONTAINER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EDIT_IN_CONTAINER .


  TYPES : BEGIN OF GS_MAX,
           TRIP_NO TYPE ZFREIGHT_HEADER-TRIP_NO,
           LINE_ITEM TYPE ZFREIGHT_TRAN-LINE_ITEM,
          END OF GS_MAX .
  DATA : GT_MAX TYPE TABLE OF GS_MAX,
         WA_MAX TYPE GS_MAX.

  DATA : LV_MAX TYPE ZFREIGHT_TRAN-LINE_ITEM .


  REFRESH: IND,
           ROW.


  IF IP_LOC IS NOT INITIAL AND
     IP_CT IS NOT INITIAL AND
     IP_DAY IS NOT INITIAL AND
     IP_CA  IS NOT INITIAL.

    IF IP_TRN IS NOT INITIAL.
      SELECT COUNT( * )  "SINGLE LINE_ITEM
                      FROM  ZFREIGHT_TRAN
                      INTO  LV_TRALIN
                      WHERE TRIP_NO EQ IP_TRN ."AND
      "CHARGE_LOC EQ IP_LOC AND
      "CHARGE_TYPE EQ IP_CT AND
      " NO_OF_DAYS EQ IP_DAY AND
      "TOTAT_AMOUNT EQ IP_CA.



      SELECT TRIP_NO MAX( LINE_ITEM )
                      FROM  ZFREIGHT_TRAN
                      INTO  TABLE GT_MAX GROUP BY TRIP_NO .

      LOOP AT GT_MAX INTO WA_MAX WHERE TRIP_NO EQ IP_TRN .
        LV_MAX = WA_MAX-LINE_ITEM.
      ENDLOOP.




      GS_CKTRA-MANDT = SY-MANDT.
      GS_CKTRA-TRIP_NO = IP_TRN.
      " GS_CKTRA-LINE_ITEM = LV_TABTRA + 1 .
      " GS_CKTRA-LINE_ITEM = LV_TRALIN + 1 . "line commented on 15/5
      GS_CKTRA-LINE_ITEM = LV_MAX + 1 .
      GS_CKTRA-CHARGE_LOC = IP_LOC.
      GS_CKTRA-CHARGE_TYPE = IP_CT.
      GS_CKTRA-NO_OF_DAYS = IP_DAY.
      GS_CKTRA-TOTAT_AMOUNT = IP_CA.
      GS_CKTRA-VENDOR_CODE = IP_LOCA.

*    UPDATE ZFREIGHT_TRAN SET MANDT = SY-MANDT
*                             TRIP_NO = IP_TRN
*                             LINE_ITEM = LV_TABTRA
*                             CHARGE_LOC = IP_LOC
*                             CHARGE_TYPE = IP_CT
*                             NO_OF_DAYS = IP_DAY
*                             TOTAT_AMOUNT = IP_CA
*                             WHERE trip_no = IP_TRN and
*                             LINE_ITEM = LV_TABTRA.



      "    UPDATE ZFREIGHT_TRAN FROM GS_CKTRA.
      MODIFY ZFREIGHT_TRAN FROM GS_CKTRA.

      "INSERT ZFREIGHT_TRAN FROM GS_CKTRA.
      "ENDIF.
      CLEAR: IP_LOC,
             IP_CT,
             IP_LOCA,
             IP_DAY,
             IP_CA,
             IP_LOCA,
             IP_LOCA1,
             GS_CKTRA.

      PERFORM FILL_EDIT_ADFR_INV.

    ENDIF.

  ELSEIF IP_LOC IS NOT INITIAL AND IP_CT IS INITIAL .

    MESSAGE 'Charge type Mandatory' TYPE 'E' .


  ELSEIF IP_LOC IS NOT INITIAL AND IP_CT IS NOT INITIAL  AND IP_CA IS INITIAL .

    MESSAGE 'Net Amount Mandatory' TYPE 'E' .


  ELSE.

    IF GT_TC2 IS NOT INITIAL .

      CALL METHOD LREF_ALV->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IND
          ET_ROW_NO     = ROW.

      LOOP AT ROW INTO WA_ROW.

        LV_SROW = WA_ROW-ROW_ID.

      ENDLOOP.



      READ TABLE GT_TC2 INTO GS_TC2 INDEX LV_SROW.
      IF SY-SUBRC EQ 0.

        CLEAR: LV_TABTRA,
               LV_TRALIN,
               LV_MAX ,
               WA_MAX,
               GT_MAX .

        IP_LOC = GS_TC2-CHARGE_LOC.
        IP_CT  = GS_TC2-CHARGE_TYPE.
        IP_DAY = GS_TC2-NO_OF_DAYS.
        IP_CA = GS_TC2-TOTAT_AMOUNT.

        SELECT COUNT( * )  "SINGLE LINE_ITEM
                  FROM  ZFREIGHT_TRAN
                  INTO  LV_TRALIN
                  WHERE TRIP_NO EQ IP_TRN .


        SELECT TRIP_NO MAX( LINE_ITEM )
                         FROM  ZFREIGHT_TRAN
                         INTO  TABLE GT_MAX GROUP BY TRIP_NO .

        LOOP AT GT_MAX INTO WA_MAX WHERE TRIP_NO EQ IP_TRN .
          LV_MAX = WA_MAX-LINE_ITEM.
        ENDLOOP.

        "added on 7/4
        GS_CKTRA-MANDT = SY-MANDT.
        GS_CKTRA-TRIP_NO = IP_TRN.
        "GS_CKTRA-LINE_ITEM = LV_TABTRA.
        "GS_CKTRA-LINE_ITEM = LV_TRALIN + 1 .
        GS_CKTRA-LINE_ITEM = LV_MAX + 1 .
        GS_CKTRA-CHARGE_LOC = IP_LOC.
        GS_CKTRA-CHARGE_TYPE = IP_CT.
        "GS_CKTRA-NO_OF_DAYS = IP_DAY.
        GS_CKTRA-TOTAT_AMOUNT = IP_CA.
        "ended on 7/4
        GS_CKTRA-VENDOR_CODE = IP_LOCA.

        SELECT LINE_ITEM
                      UP TO 1 ROWS FROM  ZFREIGHT_TRAN
                      INTO  LV_TRALIN
                      WHERE TRIP_NO EQ IP_TRN AND
                            CHARGE_LOC EQ IP_LOC AND
                            CHARGE_TYPE EQ IP_CT AND
                           " NO_OF_DAYS EQ IP_DAY AND
                            TOTAT_AMOUNT EQ IP_CA ORDER BY PRIMARY KEY.
        ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

        LV_TABTRA = LV_TRALIN .

        MODIFY ZFREIGHT_TRAN FROM GS_CKTRA.
        "INSERT ZFREIGHT_TRAN FROM GS_CKTRA.

        CLEAR: IP_LOC,
            IP_CT,
            IP_LOCA,
            IP_DAY,
            IP_CA,
            IP_LOCA1.
      ENDIF.

    ENDIF.

    IF GT_TC2 IS INITIAL .
      MESSAGE 'Press Add Button' TYPE 'E' .
    ENDIF.

  ENDIF.


  "MESSAGE 'Add one Row' type 'E' .

ENDFORM.                    " EDIT_IN_CONTAINER
*&---------------------------------------------------------------------*
*&      Form  DELETE_IN_CONTAINER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELETE_IN_CONTAINER .

  CLEAR: GS_CKTRA,
         LV_TABTRA,
         LV_TRALIN.

  CLEAR : LV_SROW.


  REFRESH: GT_CKTRA.

  IF GT_TC2 IS NOT INITIAL .


    CALL METHOD LREF_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IND
        ET_ROW_NO     = ROW.

    LOOP AT ROW INTO WA_ROW.

      LV_SROW = WA_ROW-ROW_ID.

    ENDLOOP.

    READ TABLE GT_TC2 INTO GS_TC2 INDEX LV_SROW.
    IF SY-SUBRC EQ 0.
      SELECT LINE_ITEM
                      UP TO 1 ROWS FROM  ZFREIGHT_TRAN
                      INTO  LV_TRALIN
                            WHERE TRIP_NO EQ IP_TRN AND
                            CHARGE_LOC EQ GS_TC2-CHARGE_LOC AND
                            CHARGE_TYPE EQ GS_TC2-CHARGE_TYPE AND
                           " NO_OF_DAYS EQ GS_TC2-NO_OF_DAYS AND
                           TOTAT_AMOUNT EQ GS_TC2-TOTAT_AMOUNT ORDER BY PRIMARY KEY.
      ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

      DELETE FROM ZFREIGHT_TRAN WHERE LINE_ITEM = LV_TRALIN.

      DELETE GT_TC2 INDEX LV_SROW.

      CALL METHOD LREF_ALV->REFRESH_TABLE_DISPLAY.

    ENDIF.
*
*    "DELETE GT_TC2 INDEX LV_SROW.
*
*    LOOP AT GT_TC2 INTO GS_TC2.
*
*      SELECT SINGLE LINE_ITEM
*                    FROM  ZFREIGHT_TRAN
*                    INTO  LV_TRALIN
*                    WHERE TRIP_NO EQ IP_TRN AND
*                          CHARGE_LOC EQ GS_TC2-CHARGE_LOC AND
*                          CHARGE_TYPE EQ GS_TC2-CHARGE_TYPE AND
*                          NO_OF_DAYS EQ GS_TC2-NO_OF_DAYS AND
*                          TOTAT_AMOUNT EQ GS_TC2-TOTAT_AMOUNT.
*      IF SY-SUBRC EQ 0.
*
*        LV_TABTRA = LV_TRALIN.
*
*      ENDIF.
*
*      GS_CKTRA-MANDT = SY-MANDT.
*      GS_CKTRA-TRIP_NO = IP_TRN.
*      GS_CKTRA-LINE_ITEM = LV_TABTRA.
*      GS_CKTRA-CHARGE_LOC = GS_TC2-CHARGE_LOC.
*      GS_CKTRA-CHARGE_TYPE = GS_TC2-CHARGE_TYPE.
*      GS_CKTRA-NO_OF_DAYS = GS_TC2-NO_OF_DAYS.
*      GS_CKTRA-TOTAT_AMOUNT = GS_TC2-TOTAT_AMOUNT.
*
*      APPEND GS_CKTRA TO GT_CKTRA.
*
*      CLEAR: GS_CKTRA.
*
*    ENDLOOP.
*
*    DELETE ZFREIGHT_TRAN FROM TABLE GT_CKTRA.
*    " UPDATE ZFREIGHT_TRAN FROM TABLE GT_CKTRA.
*    "   MODIFY ZFREIGHT_TRAN FROM TABLE GT_CKTRA.
*    PERFORM FILL_EDIT_ADFR_INV.
*
*  ENDIF.





  ELSE.
    MESSAGE 'No Entries selected to Delete' TYPE 'E' .
  ENDIF.
  "DELETE LREF INDEX control-current_line .
  "read table i_ysrtmm1 index control-current_line.


  "REFRESH GT_TC2.

ENDFORM.                    " DELETE_IN_CONTAINER
*&---------------------------------------------------------------------*
*&      Module  CT_SH_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CT_SH_9002 INPUT.

  PERFORM SEARCH_HELP_CHARGETYPE_9002.

ENDMODULE.                 " CT_SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_CHARGETYPE_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_CHARGETYPE_9002 .

  SELECT
    FTYPE
    FDES
     FROM ZFREIGHT_TYPE INTO TABLE IT_FTYPE .


  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'FDES'    "'NAME1_GP'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            = 'IP_CT'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Transporter Name'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = IT_FTYPE
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'IP_CT' . "'IP_TRANS'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.


ENDFORM.                    " SEARCH_HELP_CHARGETYPE_9002
*&---------------------------------------------------------------------*
*&      Module  CL_SH_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CL_SH_9002 INPUT.

  PERFORM SEARCH_HELP_CHARGELOC_9002.

ENDMODULE.                 " CL_SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_CHARGELOC_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_CHARGELOC_9002 .

  SELECT
   "  TRIP_NO
     LOCATION
        FROM ZFREIGHT_ITEM INTO TABLE IT_FLOC WHERE TRIP_NO EQ IP_TRN .


  APPEND IP_FLOC TO IT_FLOC.

  SELECT FROM_CODE UP TO 1 ROWS INTO L_PLANT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

  SELECT MAPPING_PLANT INTO LM_PLANT UP TO 1 ROWS FROM ZTRIP_PLANT WHERE PLANT = L_PLANT  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

  SELECT SINGLE NAME1 INTO LM_NAME FROM T001W WHERE WERKS = LM_PLANT .

  APPEND LM_NAME TO IT_FLOC.

SORT IT_FLOC BY LOCATION. " Added by <IT-CAR Tool> during Code Remediation
  DELETE ADJACENT DUPLICATES FROM IT_FLOC COMPARING LOCATION.
  CLEAR : GS_TC1-INVOICE_NO.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'LOCATION'    "'NAME1_GP'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            = 'IP_LOC'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Charging Location'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = IT_FLOC
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'IP_LOC' . "'IP_TRANS'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.

ENDFORM.                    " SEARCH_HELP_CHARGELOC_9002
*&---------------------------------------------------------------------*
*&      Module  TLOC_SH_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE TLOC_SH_9002 INPUT.

  PERFORM SEARCH_HELP_CITY_9002.

ENDMODULE.                 " TLOC_SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_CITY_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_CITY_9002 .

  SELECT AREA
       FROM ZFREIGHT_CITY
       INTO TABLE IT_TOCITY .

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
  RETFIELD               = 'CITY'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
  DYNPROFIELD            = 'IP_TLOC'
*   STEPL                  = 0
  WINDOW_TITLE           = 'Transporter Name'
*   VALUE                  = ' '
  VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  TABLES
  VALUE_TAB              = IT_TOCITY
*   FIELD_TAB              =
     RETURN_TAB             = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
        .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RETURN INTO WA_RETURN INDEX 1." WITH KEY FIELDVAL.

  IF SY-SUBRC = 0.

    GS_DYFIELDS-FIELDNAME  = 'IP_TLOC'.

    GS_DYFIELDS-FIELDVALUE = WA_RETURN-FIELDVAL .  "wa_ekpo-ebelp.
    APPEND GS_DYFIELDS TO IT_DYFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME                     = SY-REPID
        DYNUMB                     = '9002'
      TABLES
        DYNPFIELDS                 = IT_DYFIELDS
* EXCEPTIONS
*   INVALID_ABAPWORKAREA       = 1
*   INVALID_DYNPROFIELD        = 2
*   INVALID_DYNPRONAME         = 3
*   INVALID_DYNPRONUMMER       = 4
*   INVALID_REQUEST            = 5
*   NO_FIELDDESCRIPTION        = 6
*   UNDEFIND_ERROR             = 7
*   OTHERS                     = 8
              .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.

ENDFORM.                    " SEARCH_HELP_CITY_9002
*&---------------------------------------------------------------------*
*&      Module  FLOC_SH_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE FLOC_SH_9002 INPUT.

  PERFORM SEARCH_HELP_FROM_LOC_9002.

ENDMODULE.                 " FLOC_SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_FROM_LOC_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_FROM_LOC_9002 .


  SELECT WERKS
         NAME1
         FROM T001W
         INTO TABLE IT1_T001W .

  DATA: RETURN TYPE TABLE OF DDSHRETVAL WITH HEADER LINE.

  DATA: T_VALUES  TYPE STANDARD TABLE OF TY1_T001W.
  DATA: T_RETURN  TYPE STANDARD TABLE OF DDSHRETVAL.
  DATA: T_MAPPING TYPE STANDARD TABLE OF DSELC.

  DATA: S_VALUES  TYPE TY1_T001W.
  DATA: S_RETURN  TYPE DDSHRETVAL.
  DATA: S_MAPPING TYPE DSELC.

  S_MAPPING-FLDNAME     = 'F0001'.
  S_MAPPING-DYFLDNAME   = 'IP_FLOC'.
  APPEND S_MAPPING TO T_MAPPING.
  CLEAR S_MAPPING.

*   s_mapping-fldname     = 'F0002'.
*   s_mapping-dyfldname   = 'IP_TRANS'.
*   APPEND s_mapping TO t_mapping.
*   CLEAR s_mapping.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'NAME1_GP'
      DYNPPROG        = SY-CPROG
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = 'IP_FLOC'
                                                                      " window_title    = ‘Selection of Material with Description’
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT1_T001W
      RETURN_TAB      = T_RETURN
      DYNPFLD_MAPPING = T_MAPPING
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  IF SY-SUBRC <> 0.
** Implement suitable error handling here
  ENDIF.

ENDFORM.                    " SEARCH_HELP_FROM_LOC_9002
*&---------------------------------------------------------------------*
*&      Module  STATUS_1111  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
"MODULE STATUS_1111 OUTPUT.
*  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR 'xxx'.


*  DATA: W_LINES TYPE I.
*  TYPES PICT_LINE(256) TYPE C.
*  DATA :
*  CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
*  EDITOR TYPE REF TO CL_GUI_TEXTEDIT,
*  PICTURE TYPE REF TO CL_GUI_PICTURE,
*  PICT_TAB TYPE TABLE OF PICT_LINE,
*  URL(255) TYPE C.
*  DATA: GRAPHIC_URL(255).
*
*  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
*          LINE(255) TYPE X,
*        END OF GRAPHIC_TABLE.
*  DATA: L_GRAPHIC_CONV TYPE I.
*  DATA: L_GRAPHIC_OFFS TYPE I.
*  DATA: GRAPHIC_SIZE TYPE I.
*  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
*  .
*
*  CALL METHOD CL_GUI_CFW=>FLUSH.
*
*  CREATE OBJECT:
*  CONTAINER EXPORTING CONTAINER_NAME = 'PICTURE_CONTAINER',
*  PICTURE EXPORTING PARENT = CONTAINER.
*
*  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
*    EXPORTING
*      P_OBJECT       = 'GRAPHICS'
*      P_NAME         = 'TRIP'
*      P_ID           = 'BMAP'
*      P_BTYPE        = 'BCOL'
*    RECEIVING
*      P_BMP          = L_GRAPHIC_XSTR
**  EXCEPTIONS
**    NOT_FOUND      = 1
**    INTERNAL_ERROR = 2
**    others         = 3
*          .
*  IF SY-SUBRC <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
*  L_GRAPHIC_CONV = GRAPHIC_SIZE.
*  L_GRAPHIC_OFFS = 0.
*
*  WHILE L_GRAPHIC_CONV > 255.
*    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
*    APPEND GRAPHIC_TABLE.
*    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
*    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
*  ENDWHILE.
*  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
*
*  APPEND GRAPHIC_TABLE.
*
*  CALL FUNCTION 'DP_CREATE_URL'
*    EXPORTING
*      TYPE     = 'IMAGE'
*      SUBTYPE  = 'X-UNKNOWN'
*      SIZE     = GRAPHIC_SIZE
*      LIFETIME = 'T'
*    TABLES
*      DATA     = GRAPHIC_TABLE
*    CHANGING
*      URL      = URL.
*
*  CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
*    EXPORTING
*      URL = URL.
*  CALL METHOD PICTURE->SET_DISPLAY_MODE
*    EXPORTING
*      DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

"ENDMODULE.                 " STATUS_1111  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  SET_PICTURE_MAIN_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_PICTURE_MAIN_PAGE .

  DATA: W_LINES TYPE I.
  TYPES PICT_LINE(256) TYPE C.
  DATA :
  CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
  EDITOR TYPE REF TO CL_GUI_TEXTEDIT,
  PICTURE TYPE REF TO CL_GUI_PICTURE,
  PICT_TAB TYPE TABLE OF PICT_LINE,
  URL(255) TYPE C.
  DATA: GRAPHIC_URL(255).
  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.
  DATA: GRAPHIC_SIZE TYPE I.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  .
  CALL METHOD CL_GUI_CFW=>FLUSH.
  CREATE OBJECT:
  CONTAINER EXPORTING CONTAINER_NAME = 'CC_IMG',
  PICTURE EXPORTING PARENT = CONTAINER.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT       = 'GRAPHICS'
      P_NAME         = 'TRIP LOGO' " Picture Name in CAPS
      P_ID           = 'BMAP'
      P_BTYPE        = 'BCOL'
    RECEIVING
      P_BMP          = L_GRAPHIC_XSTR
    EXCEPTIONS
      NOT_FOUND      = 1
      INTERNAL_ERROR = 2
      OTHERS         = 3.
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.
  CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
    EXPORTING
      URL = URL.
  CALL METHOD PICTURE->SET_DISPLAY_MODE
    EXPORTING
      DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.



ENDFORM.                    " SET_PICTURE_MAIN_PAGE
*&---------------------------------------------------------------------*
*&      Form  EDIT_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EDIT_AUTHORIZATION .

  DATA : EDIT_AUT TYPE T001W-WERKS.

  SELECT FROM_CODE UP TO 1 ROWS  INTO EDIT_AUT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
  AUTHORITY-CHECK OBJECT 'ZTRIP'
             ID 'ACTVT' FIELD '02'.
  IF SY-SUBRC = 0.
    AUTHORITY-CHECK OBJECT 'ZTRIP'
         ID 'WERKS' FIELD EDIT_AUT.
    IF SY-SUBRC <> 0.
      MESSAGE 'Authorization Required' TYPE 'E'.
    ENDIF.
  ELSE.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.

ENDFORM.                    " EDIT_AUTHORIZATION
*&---------------------------------------------------------------------*
*&      Form  DELETE_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELETE_AUTHORIZATION .

  DATA : EDIT_AUT TYPE T001W-WERKS.

  SELECT FROM_CODE  UP TO 1 ROWS INTO EDIT_AUT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
  AUTHORITY-CHECK OBJECT 'ZTRIP'
             ID 'ACTVT' FIELD '06'.
  IF SY-SUBRC = 0.
    AUTHORITY-CHECK OBJECT 'ZTRIP'
         ID 'WERKS' FIELD EDIT_AUT.
    IF SY-SUBRC <> 0.
      MESSAGE 'Authorization Required' TYPE 'E'.
    ENDIF.
  ELSE.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.


ENDFORM.                    " DELETE_AUTHORIZATION
*&---------------------------------------------------------------------*
*&      Module  LOCA_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE LOCA_9002 INPUT.

  PERFORM SEARCH_HELP_LOC_TRANPORT_9002.

ENDMODULE.                 " LOCA_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_LOC_TRANPORT_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_LOC_TRANPORT_9002 .

  SELECT LIFNR
       NAME1
       FROM LFA1
       INTO TABLE LT_LFA1
       WHERE KTOKK EQ 'YBTR' AND LOEVM <> 'X' .

  DATA: RETURN TYPE TABLE OF DDSHRETVAL WITH HEADER LINE.

  DATA: T1_VALUES  TYPE STANDARD TABLE OF TY_LFA1.
  DATA: T1_RETURN  TYPE STANDARD TABLE OF DDSHRETVAL.
  DATA: T1_MAPPING TYPE STANDARD TABLE OF DSELC.

  DATA: S1_VALUES  TYPE TY_LFA1.
  DATA: S1_RETURN  TYPE DDSHRETVAL.
  DATA: S1_MAPPING TYPE DSELC.

  S1_MAPPING-FLDNAME     = 'F0001'.
  S1_MAPPING-DYFLDNAME   = 'IP_LOCA'.
  APPEND S1_MAPPING TO T1_MAPPING.
  CLEAR S1_MAPPING.

  S1_MAPPING-FLDNAME     = 'F0002'.
  S1_MAPPING-DYFLDNAME   = 'IP_LOCA1'.
  APPEND S1_MAPPING TO T1_MAPPING.
  CLEAR S1_MAPPING.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'NAME1_GP'
      DYNPPROG        = SY-CPROG
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = 'IP_LOCA'
                                                                      " window_title    = ‘Selection of Material with Description’
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = LT_LFA1
      RETURN_TAB      = T1_RETURN
      DYNPFLD_MAPPING = T1_MAPPING
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  IF SY-SUBRC <> 0.
** Implement suitable error handling here
  ENDIF.

ENDFORM.                    " SEARCH_HELP_LOC_TRANPORT_9002
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  TRIP_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TRIP_REPORT .

  TABLES: ZFREIGHT_ITEM,
          ZFREIGHT_TRAN,
          VBRK,
          VBRP,
          MSEG,
          MARA.

  TYPE-POOLS:SLIS.

  TYPES:BEGIN OF TY_ZFRE_HED,
    TRIP_NO TYPE ZTRIP,
    VENDOR_CODE TYPE LIFNR,
    VENDOR_NAME TYPE NAME1_GP,
    FROM_LOC TYPE NAME1,
    FREIGHT_CHARGE TYPE NETWR,
    LODING_CHARGE TYPE NETWR,
    UNLOAD_CHARGE TYPE NETWR,
    HALT_CHARGE TYPE NETWR,
    LR_CHARGE TYPE NETWR,
    VECHILE_NUMBER TYPE ZVECHILE,
    CRDATE TYPE ZCDATE,
    LOCAL_VENDOR TYPE ZFREIGHT_HEADER-LOCAL_VENDOR,
    LO_VENDORNAME TYPE ZFREIGHT_HEADER-LO_VENDORNAME,
    LOCAL_CHARGE TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,
    END OF TY_ZFRE_HED.


  TYPES:BEGIN OF TY_ZFRE_ITM,
    TRIP_NO TYPE ZTRIP,
    INVOICE_NO TYPE VBELN_VF,
    CUSTOMER_NAME TYPE NAME1_GP,
    INVOICE_DATE TYPE FKDAT,
    WEIGHT TYPE BRGEW_15,
    COMPANY_CODE TYPE BUKRS,
    LOCATION TYPE NAME1_GP,
    LR_NO TYPE ZLR_NO,
    STATUS TYPE ZSTA,
    END OF TY_ZFRE_ITM.

  TYPES:BEGIN OF TY_ZFRE_TRA,
    TRIP_NO TYPE ZTRIP,
    TOTAT_AMOUNT TYPE NETWR,
    END OF TY_ZFRE_TRA.

  TYPES:BEGIN OF TY_VBRK,
    VBELN TYPE VBELN_VF,
    NETWR TYPE NETWR,
    END OF TY_VBRK.

  TYPES:BEGIN OF TY_VBRP,
    VBELN TYPE VBELN_VF,
    POSNR TYPE POSNR_VF,
    BRGEW TYPE BRGEW_15,
    NETWR TYPE NETWR,
    FKIMG TYPE FKIMG,
    MATNR TYPE MATNR,
    ARKTX TYPE ARKTX,
    END OF TY_VBRP.

  TYPES:BEGIN OF TY_MSEG,
    MBLNR TYPE MBLNR,
    MATNR TYPE MATNR,
    DMBTR TYPE DMBTR,
    MENGE TYPE MENGE_D,
    ERFMG TYPE ERFMG,
    END OF TY_MSEG.

  TYPES:BEGIN OF TY_MARA,
    MATNR TYPE MATNR,
    BRGEW TYPE BRGEW,
    END OF TY_MARA.

  TYPES:BEGIN OF TY_FINAL,
    COMPANY_CODE TYPE BUKRS,     "Company Code
    CRDATE TYPE ZCDATE,          "Trip sheet creation date
    TRIP_NO TYPE ZTRIP,          "Freight Entry No
    VENDOR_CODE TYPE LIFNR,      "Account Number of Vendor or Creditor
    VENDOR_NAME TYPE NAME1_GP,   "Name 1
    LR_NO TYPE ZLR_NO,           "Lorry No
    CRDATE1 TYPE ZCDATE,         "Trip sheet creation date
    VECHILE_NUMBER TYPE ZVECHILE,"Vechile No
    STATUS(15) TYPE C,            "Trip sheet type
    INVOICE_NO TYPE VBELN_VF,    "Billing Document
    POSNR TYPE POSNR_VF,         "Billing item
    BRGEW1 TYPE BRGEW_15,        "GROSS WEIGHT IN MATERIAL
    FKIMG TYPE FKIMG,            "Actual Invoiced Quantity
    MATNR TYPE MATNR ,           "Material Number
    ARKTX TYPE ARKTX ,           "Material Description
    INVOICE_DATE TYPE FKDAT,     "Billing date for billing index and printout
    CUSTOMER_NAME TYPE NAME1_GP, "Name 1
    FROM_LOC TYPE NAME1,         "Name
    LOCATION TYPE NAME1_GP,      "Name 1
    NETWR TYPE NETWR,            "Net Value in Document Currency
    BRGEW TYPE BRGEW_15,         "Gross weight
    FRECHA TYPE NETWR,           "Net Value in FREIGHT CHARGES
    LOACHA TYPE NETWR,           "Net Value in LOADING CHARGES
    INLCHA TYPE NETWR,           "Net Value in INLOADING CHARGES
    LRCHA TYPE NETWR,            "Net Value in LR CHARGES
    HALCHA TYPE NETWR,           "Net Value in HALTING CHARGES
    TOLCHA TYPE NETWR,           "NET VALUE IN TOLL CHARGES
    INSCHA TYPE NETWR,           "NET VALUE IN INSURENCE CHARGE
    PENCHA TYPE NETWR,           "NET VALUE IN PENALTY CHARGE
    LOCCHA TYPE NETWR,           "Net Value in LOCAL TRANSPORT
    LOCAL_VENDOR TYPE ZFREIGHT_HEADER-LOCAL_VENDOR,
    LO_VENDORNAME TYPE ZFREIGHT_HEADER-LO_VENDORNAME,
    LOCAL_CHARGE TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,
    TOT_FRE TYPE NETWR,
    END OF TY_FINAL.

  DATA: TOTQUN TYPE ZFREIGHT_ITEM-WEIGHT,
        TRA_TOT TYPE ZFREIGHT_ITEM-WEIGHT,
        OFRECHA TYPE NETWR,
        OHALCHA TYPE NETWR,
        OLOACHA TYPE NETWR,
        OINLCHA TYPE NETWR,
        OLRCHA  TYPE NETWR,
        OTOLCHA TYPE NETWR,
        OINSCHA TYPE NETWR,
        OPENCHA TYPE NETWR,
        OLOCCHA TYPE NETWR,
        OFRECHA1 TYPE NETWR,
        OHALCHA1 TYPE NETWR,
        OLOACHA1 TYPE NETWR,
        OINLCHA1 TYPE NETWR,
        OLRCHA1  TYPE NETWR,
        OTOLCHA1 TYPE NETWR,
        OINSCHA1 TYPE NETWR,
        OPENCHA1 TYPE NETWR,
        OLOCCHA1 TYPE NETWR.

  DATA : FREIGHT1 TYPE NETWR,
         HALTING1 TYPE NETWR,
         LOADING1 TYPE NETWR,
         INLOADING1 TYPE NETWR,
         LRCHARGES1 TYPE NETWR,
         TOLLCHARGE1 TYPE NETWR,
         INSURENCE1 TYPE NETWR,
         PENALTY1 TYPE NETWR,
         LOCALTRAN1 TYPE NETWR,
         FREIGHT2 TYPE NETWR,
         HALTING2 TYPE NETWR,
         LOADING2 TYPE NETWR,
         INLOADING2 TYPE NETWR,
         LRCHARGES2 TYPE NETWR,
         TOLLCHARGE2 TYPE NETWR,
         INSURENCE2 TYPE NETWR,
         PENALTY2 TYPE NETWR,
         LOCALTRAN2 TYPE NETWR.

  DATA: FRE_TOT TYPE F,
        LOD_TOT TYPE F,
        INL_TOT TYPE F,
        LRC_TOT TYPE F,
        HAL_TOT TYPE F,
        TOL_TOT TYPE F,
        PEN_TOT TYPE F,
        LOC_TOT TYPE F,
        INS_TOT TYPE F,
        FRE_TOT1 TYPE F,
        LOD_TOT1 TYPE F,
        INL_TOT1 TYPE F,
        LRC_TOT1 TYPE F,
        HAL_TOT1 TYPE F,
        TOL_TOT1 TYPE F,
        PEN_TOT1 TYPE F,
        LOC_TOT1 TYPE F,
        INS_TOT1 TYPE F.

  DATA: IT_HED TYPE STANDARD TABLE OF TY_ZFRE_HED,
        WA_HED TYPE TY_ZFRE_HED,
        IT_ITM TYPE STANDARD TABLE OF TY_ZFRE_ITM,
        WA_ITM TYPE TY_ZFRE_ITM,
        WA1_ITM TYPE TY_ZFRE_ITM,
        IT_TRA TYPE STANDARD TABLE OF ZFREIGHT_TRAN,
        WA_TRA TYPE ZFREIGHT_TRAN,
        WA1_TRA TYPE ZFREIGHT_TRAN,
        IT_VBRK TYPE STANDARD TABLE OF TY_VBRK,
        WA_VBRK TYPE TY_VBRK,
        IT_VBRP TYPE STANDARD TABLE OF TY_VBRP,
        WA_VBRP TYPE TY_VBRP,
        IT_MSEG TYPE STANDARD TABLE OF TY_MSEG,
        WA_MSEG TYPE TY_MSEG,
        IT_MARA TYPE STANDARD TABLE OF TY_MARA,
        WA_MARA TYPE TY_MARA,
        IT_FIN TYPE STANDARD TABLE OF TY_FINAL,
        WA_FIN TYPE TY_FINAL,
        IT_FINAL TYPE STANDARD TABLE OF TY_FINAL,
        WA_FINAL TYPE TY_FINAL.

  DATA: V_REPID LIKE SY-REPID.

  DATA: IT_FIELDCAT TYPE STANDARD TABLE OF SLIS_FIELDCAT_ALV,
        WA_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

  DATA : LAYOUT TYPE SLIS_LAYOUT_ALV.

  DATA: FDATI TYPE SY-DATUM,  "From Date
        TDATI TYPE SY-DATUM,  "TO Date
        FDATO(10) TYPE C,
        TDATO(10) TYPE C,
        FIDAT(30) TYPE C.     "CONCATENATE From Date and To Date

  DATA: F_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,   "Trip Number From
        T_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,   "Trip Number To
        C_TRNO(35) TYPE C.                     "CONCATENATE  Trip Number From And Trip Number To

  DATA: IT_HEADER TYPE SLIS_T_LISTHEADER, "lIST hEADER fOR ALV REPORT
        WA_HEADER TYPE SLIS_LISTHEADER.

  DATA : SO_LIFNR1 TYPE TABLE OF LFA1.

* CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*            EXPORTING
*              INPUT  = SO_LIFNR
*            IMPORTING
*              OUTPUT = SO_LIFNR1.
  "BREAK-POINT.
  SELECT  TRIP_NO
        VENDOR_CODE
        VENDOR_NAME
        FROM_LOC
        FREIGHT_CHARGE
        LODING_CHARGE
        UNLOAD_CHARGE
        HALT_CHARGE
        LR_CHARGE
        VECHILE_NUMBER
        CRDATE
        LOCAL_VENDOR
        LO_VENDORNAME
        LOCAL_CHARGE FROM ZFREIGHT_HEADER INTO TABLE IT_HED WHERE TRIP_NO IN SO_TRN AND CRDATE IN SO_CDATE AND ( VENDOR_CODE IN SO_LIFNR OR LOCAL_VENDOR IN SO_LIFNR ) .

  IF NOT IT_HED IS INITIAL.
    SELECT  TRIP_NO
            INVOICE_NO
            CUSTOMER_NAME
            INVOICE_DATE
            WEIGHT
            COMPANY_CODE
            LOCATION
            LR_NO
            STATUS FROM ZFREIGHT_ITEM INTO TABLE IT_ITM
                   FOR ALL ENTRIES IN IT_HED WHERE TRIP_NO EQ IT_HED-TRIP_NO .
    SELECT * FROM ZFREIGHT_TRAN INTO TABLE IT_TRA WHERE TRIP_NO IN SO_TRN.
    SELECT VBELN
           NETWR FROM VBRK INTO TABLE IT_VBRK FOR ALL ENTRIES IN IT_ITM WHERE VBELN EQ IT_ITM-INVOICE_NO.

    SELECT VBELN
           POSNR
           BRGEW
           NETWR
           FKIMG
           MATNR
           ARKTX FROM VBRP INTO TABLE IT_VBRP FOR ALL ENTRIES IN IT_ITM WHERE VBELN EQ IT_ITM-INVOICE_NO AND FKLMG <> 0 .
    SELECT MBLNR
           MATNR
           DMBTR
           MENGE
           ERFMG FROM MSEG INTO TABLE IT_MSEG FOR ALL ENTRIES IN IT_ITM WHERE MBLNR EQ IT_ITM-INVOICE_NO
                                                                     AND SHKZG EQ 'H' AND BWART EQ '351'.
    IF NOT IT_MSEG  IS INITIAL .
      SELECT MATNR
        BRGEW FROM MARA INTO TABLE IT_MARA FOR ALL ENTRIES IN IT_MSEG WHERE MATNR EQ IT_MSEG-MATNR.
    ENDIF.

  ELSE.
    MESSAGE 'Trip Sheet Number Dosenot Exist' TYPE 'I'.
  ENDIF.

  MOVE: SO_CDATE-LOW TO FDATI,
        SO_CDATE-HIGH TO TDATI.

  MOVE: SO_TRN-LOW TO F_TRNO,
        SO_TRN-HIGH TO T_TRNO.

  LOOP AT IT_HED INTO WA_HED.
    LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA_HED-TRIP_NO.
      READ TABLE IT_HED INTO WA_HED WITH KEY TRIP_NO = WA_ITM-TRIP_NO.
      READ TABLE IT_TRA INTO WA_TRA WITH KEY TRIP_NO = WA_ITM-TRIP_NO.
      READ TABLE IT_VBRK INTO WA_VBRK WITH KEY VBELN = WA_ITM-INVOICE_NO.
      READ TABLE IT_MSEG INTO WA_MSEG WITH KEY MBLNR = WA_ITM-INVOICE_NO.
      READ TABLE IT_VBRP INTO WA_VBRP WITH KEY VBELN = WA_ITM-INVOICE_NO.
      MOVE:
      WA_ITM-COMPANY_CODE TO WA_FINAL-COMPANY_CODE,
      WA_HED-CRDATE  TO WA_FINAL-CRDATE,
      WA_HED-TRIP_NO  TO WA_FINAL-TRIP_NO,
      WA_HED-VENDOR_CODE TO WA_FINAL-VENDOR_CODE,
      WA_HED-VENDOR_NAME TO WA_FINAL-VENDOR_NAME,
      WA_ITM-LR_NO TO WA_FINAL-LR_NO,
      WA_HED-CRDATE TO WA_FINAL-CRDATE1,
      WA_HED-VECHILE_NUMBER TO WA_FINAL-VECHILE_NUMBER,
         WA_HED-LOCAL_VENDOR TO WA_FINAL-LOCAL_VENDOR,
    WA_HED-LO_VENDORNAME TO WA_FINAL-LO_VENDORNAME,
    WA_HED-LOCAL_CHARGE TO WA_FINAL-LOCAL_CHARGE.
      IF WA_ITM-STATUS = 'ZINV' .
        WA_FINAL-STATUS = 'Sales Invoice'.
      ELSEIF WA_ITM-STATUS = 'ZSTO'.
        WA_FINAL-STATUS = 'Stock Transfer'.
      ELSE.
        MOVE:WA_ITM-STATUS TO WA_FINAL-STATUS.
      ENDIF.
      MOVE:
       WA_ITM-INVOICE_NO TO WA_FINAL-INVOICE_NO,
       WA_ITM-INVOICE_DATE TO WA_FINAL-INVOICE_DATE,
       WA_ITM-CUSTOMER_NAME TO WA_FINAL-CUSTOMER_NAME,
       WA_HED-FROM_LOC TO WA_FINAL-FROM_LOC,
       WA_ITM-LOCATION TO WA_FINAL-LOCATION.
      IF WA_ITM-INVOICE_NO = WA_VBRK-VBELN.
        MOVE:WA_VBRK-NETWR TO WA_FINAL-NETWR.
      ELSEIF WA_ITM-INVOICE_NO = WA_MSEG-MBLNR.
        MOVE:WA_MSEG-DMBTR TO WA_FINAL-NETWR. "#EC CI_FLDEXT_OK[2610650]    "Added by SPLABAP during code remediation
      ENDIF.
      MOVE: WA_ITM-WEIGHT TO WA_FINAL-BRGEW.

      LOOP AT IT_TRA INTO WA_TRA WHERE TRIP_NO = WA_HED-TRIP_NO.

        IF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'FREIGHT CHARGES'.
          OFRECHA = OFRECHA +  WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOADING CHARGES'.
          OLOACHA = OLOACHA + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'UNLOADING CHARGES'.
          OINLCHA = OINLCHA + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LR CHARGES'.
          OLRCHA = OLRCHA + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'HALTING CHARGES'.
          OHALCHA = OHALCHA + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'TOLL CHARGES'.
          OTOLCHA = OTOLCHA  + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'INSURANCE'.
          OINSCHA = OINSCHA + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'PENALTY'.
          OPENCHA = OPENCHA + WA_TRA-TOTAT_AMOUNT.

        ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOCAL TRANSPORT'.
          OLOCCHA = OLOCCHA + WA_TRA-TOTAT_AMOUNT.
        ENDIF.
      ENDLOOP.

      LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA_HED-TRIP_NO.
        TOTQUN = TOTQUN + WA_ITM-WEIGHT.
      ENDLOOP.

      IF TOTQUN <> 0.
        IF WA_FINAL-BRGEW <> 0 .
          FRE_TOT = ( WA_HED-FREIGHT_CHARGE + OFRECHA ) / TOTQUN.
          FREIGHT1 = FRE_TOT * WA_FINAL-BRGEW .

          FRE_TOT = ( WA_HED-LODING_CHARGE + OLOACHA ) / TOTQUN.
          LOADING1 = FRE_TOT * WA_FINAL-BRGEW.

          FRE_TOT = ( WA_HED-UNLOAD_CHARGE + OINLCHA ) / TOTQUN.
          INLOADING1 = FRE_TOT * WA_FINAL-BRGEW.

          HAL_TOT = ( WA_HED-HALT_CHARGE + OHALCHA ) / TOTQUN.
          HALTING1 = HAL_TOT * WA_FINAL-BRGEW.

          LRC_TOT = ( WA_HED-LR_CHARGE + OLRCHA ) / TOTQUN.
          LRCHARGES1 = LRC_TOT * WA_FINAL-BRGEW.

          TOL_TOT = OTOLCHA / TOTQUN .
          TOLLCHARGE1 = TOL_TOT * WA_FINAL-BRGEW.

          INS_TOT = OINSCHA / TOTQUN .
          INSURENCE1 = INS_TOT * WA_FINAL-BRGEW.

          PEN_TOT = OPENCHA / TOTQUN .
          PENALTY1 = PEN_TOT * WA_FINAL-BRGEW.

          LOCALTRAN1 = OLOCCHA / TOTQUN .
          LOCALTRAN1 = LOCALTRAN1 * WA_FINAL-BRGEW.
        ENDIF.
      ENDIF.

      LOOP AT IT_TRA INTO WA1_TRA WHERE TRIP_NO EQ WA_FINAL-TRIP_NO.

        IF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'FREIGHT CHARGES'.
          OFRECHA1 = OFRECHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'LOADING CHARGES'.
          OLOACHA1 = OLOACHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'UNLOADING CHARGES'.
          OINLCHA1 = OINLCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'LR CHARGES'.
          OLRCHA1 = OLRCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'HALTING CHARGES'.
          OHALCHA1 = OHALCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'TOLL CHARGES'.
          OTOLCHA1 = OTOLCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'INSURANCE'.
          OINSCHA1 = OINSCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'PENALTY'.
          OPENCHA1 = OPENCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ELSEIF WA_FINAL-LOCATION = WA1_TRA-CHARGE_LOC AND WA1_TRA-CHARGE_TYPE EQ 'LOCAL TRANSPORT'.
          OLOCCHA1 = OLOCCHA1 + WA1_TRA-TOTAT_AMOUNT.

        ENDIF.
      ENDLOOP.

      LOOP AT IT_ITM INTO WA1_ITM WHERE TRIP_NO EQ WA_ITM-TRIP_NO AND LOCATION EQ WA_FINAL-LOCATION.
        TRA_TOT = TRA_TOT +  WA1_ITM-WEIGHT.
      ENDLOOP.

      IF  TRA_TOT <> 0.
        FRE_TOT1 =  OFRECHA1 / TRA_TOT.
        FREIGHT2 =  FRE_TOT1 * WA_FINAL-BRGEW.

        HAL_TOT1 = OHALCHA1 / TRA_TOT.
        HALTING2 = HAL_TOT1 * WA_FINAL-BRGEW .

        LOD_TOT1 = OLOACHA1  / TRA_TOT.
        LOADING2 = LOD_TOT1 * WA_FINAL-BRGEW.

        INL_TOT1 = OINLCHA1 / TRA_TOT.
        INLOADING2 = INL_TOT1 * WA_FINAL-BRGEW.

        LRC_TOT1 = OLRCHA1 / TRA_TOT.
        LRCHARGES2 = LRC_TOT1 * WA_FINAL-BRGEW.

        INS_TOT1 = OINSCHA1 / TRA_TOT.
        INSURENCE2 = INS_TOT1 * WA_FINAL-BRGEW.

        LOC_TOT1 = OLOCCHA1 / TRA_TOT.
        LOCALTRAN2 = LOC_TOT1 * WA_FINAL-BRGEW.

        PEN_TOT1 = OPENCHA1 / TRA_TOT.
        PENALTY2 = PEN_TOT1 * WA_FINAL-BRGEW.

        TOL_TOT1 = OTOLCHA1 / TRA_TOT.
        TOLLCHARGE2 = TOL_TOT1 * WA_FINAL-BRGEW.

      ENDIF.

      WA_FINAL-FRECHA = FREIGHT1 + FREIGHT2 .
      WA_FINAL-HALCHA = HALTING1 + HALTING2 .
      WA_FINAL-LOACHA = LOADING1 + LOADING2 .
      WA_FINAL-INLCHA = INLOADING1 + INLOADING2.
      WA_FINAL-LRCHA = LRCHARGES1 + LRCHARGES2 .
      WA_FINAL-TOLCHA = TOLLCHARGE1 + TOLLCHARGE2 .
      WA_FINAL-INSCHA = INSURENCE1 + INSURENCE2 .
      WA_FINAL-PENCHA = PENALTY1 + PENALTY2 .
      WA_FINAL-LOCCHA = LOCALTRAN1 + LOCALTRAN2. "added on 28/7

      WA_FINAL-TOT_FRE = WA_FINAL-FRECHA + WA_FINAL-HALCHA + WA_FINAL-LOACHA + WA_FINAL-INLCHA
                         + WA_FINAL-LRCHA + WA_FINAL-TOLCHA + WA_FINAL-INSCHA + WA_FINAL-PENCHA +
                         WA_FINAL-LOCAL_CHARGE .


      APPEND:WA_FINAL TO IT_FINAL.
      CLEAR: WA_FINAL , TOTQUN , TRA_TOT,
          OFRECHA ,OHALCHA ,OLOACHA ,OINLCHA ,OLRCHA  ,OTOLCHA ,OINSCHA ,OPENCHA ,OLOCCHA ,
          OFRECHA1 ,OHALCHA1 ,OLOACHA1 ,OINLCHA1 ,OLRCHA1  ,OTOLCHA1 ,OINSCHA1 ,OPENCHA1 ,OLOCCHA1 ,
          FREIGHT1 ,HALTING1 ,LOADING1 ,INLOADING1 ,LRCHARGES1 ,TOLLCHARGE1 ,INSURENCE1 ,PENALTY1 ,LOCALTRAN1 ,
          FREIGHT2 ,HALTING2 ,LOADING2 ,INLOADING2 ,LRCHARGES2 ,TOLLCHARGE2 ,INSURENCE2 ,PENALTY2 ,LOCALTRAN2 ,
          FRE_TOT ,LOD_TOT , INL_TOT , LRC_TOT , HAL_TOT , TOL_TOT ,PEN_TOT , LOC_TOT ,INS_TOT ,
          FRE_TOT1, LOD_TOT1, INL_TOT1, LRC_TOT1, HAL_TOT1, TOL_TOT1, PEN_TOT1, LOC_TOT1, INS_TOT1.

    ENDLOOP.
  ENDLOOP.


  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '0'.
  WA_FIELDCAT-FIELDNAME = 'COMPANY_CODE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Comp Code'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '1'.
  WA_FIELDCAT-FIELDNAME = 'CRDATE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Trip Sheet Date'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '2'.
  WA_FIELDCAT-FIELDNAME = 'TRIP_NO'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Trip Sheet Number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '3'.
  WA_FIELDCAT-FIELDNAME = 'VENDOR_CODE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vendor Code'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '4'.
  WA_FIELDCAT-FIELDNAME = 'VENDOR_NAME'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vendor Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '5'.
  WA_FIELDCAT-FIELDNAME = 'LR_NO'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'LR number '.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '6'.
  WA_FIELDCAT-FIELDNAME = 'CRDATE1'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'LR Date'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '7'.
  WA_FIELDCAT-FIELDNAME = 'VECHILE_NUMBER'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vechicle number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '8'.
  WA_FIELDCAT-FIELDNAME = 'STATUS'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Category'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '9'.
  WA_FIELDCAT-FIELDNAME = 'INVOICE_NO'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Sales Invoice Number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '10'.
  WA_FIELDCAT-FIELDNAME = 'INVOICE_DATE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Invoice Date'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '11'.
  WA_FIELDCAT-FIELDNAME = 'CUSTOMER_NAME'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Customer Name/Branch Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '12'.
  WA_FIELDCAT-FIELDNAME = 'FROM_LOC'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'From Location'. " change  18/6
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '13'.
  WA_FIELDCAT-FIELDNAME = 'LOCATION'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'To Location'. "Change 18/6
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '14'.
  WA_FIELDCAT-FIELDNAME = 'NETWR'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Sale value before Tax'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '15'.
  WA_FIELDCAT-FIELDNAME = 'BRGEW'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'TotalKG/Liter'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.  "added on 28/7
  WA_FIELDCAT-COL_POS = '16'.
  WA_FIELDCAT-FIELDNAME = 'TOT_FRE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Total Freight'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '17'.
  WA_FIELDCAT-FIELDNAME = 'FRECHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Base Freight Charge'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '18'.
  WA_FIELDCAT-FIELDNAME = 'LOACHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Loading'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '19'.
  WA_FIELDCAT-FIELDNAME = 'INLCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Unloading'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '20'.
  WA_FIELDCAT-FIELDNAME = 'LRCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'LR charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '21'.
  WA_FIELDCAT-FIELDNAME = 'HALCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Halting Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '22'.
  WA_FIELDCAT-FIELDNAME = 'TOLCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Toll Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '23'.
  WA_FIELDCAT-FIELDNAME = 'INSCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Insurence'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '24'.
  WA_FIELDCAT-FIELDNAME = 'PENCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Penality Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.


  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '25'.
  WA_FIELDCAT-FIELDNAME = 'LOCCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Additional Local Transport Charge'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '26'.
  WA_FIELDCAT-FIELDNAME = 'LOCAL_VENDOR'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Local Transport Code'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '27'.
  WA_FIELDCAT-FIELDNAME = 'LO_VENDORNAME'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Local Transport Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '28'.
  WA_FIELDCAT-FIELDNAME = 'LOCAL_CHARGE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Local Transport Charge'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  LAYOUT-ZEBRA = 'X'.
  CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
    EXPORTING
      DATE_INTERNAL            = FDATI
    IMPORTING
      DATE_EXTERNAL            = FDATO
    EXCEPTIONS
      DATE_INTERNAL_IS_INVALID = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
    EXPORTING
      DATE_INTERNAL            = TDATI
    IMPORTING
      DATE_EXTERNAL            = TDATO
    EXCEPTIONS
      DATE_INTERNAL_IS_INVALID = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
 EXPORTING
*   I_INTERFACE_CHECK                 = ' '
*   I_BYPASSING_BUFFER                = ' '
*   I_BUFFER_ACTIVE                   = ' '
    I_CALLBACK_PROGRAM                = SY-REPID
*   I_CALLBACK_PF_STATUS_SET          = ' '
*   I_CALLBACK_USER_COMMAND           = ' '
    I_CALLBACK_TOP_OF_PAGE            = 'TOP_OF_PAGE'
*   I_CALLBACK_HTML_TOP_OF_PAGE       = ''
*   I_CALLBACK_HTML_END_OF_LIST       = ' '
*   I_STRUCTURE_NAME                  =
*   I_BACKGROUND_ID                   = ' '
*   I_GRID_TITLE                      =
*   I_GRID_SETTINGS                   =
    IS_LAYOUT                         = LAYOUT
    IT_FIELDCAT                       = IT_FIELDCAT
*   IT_EXCLUDING                      =
*   IT_SPECIAL_GROUPS                 =
*   IT_SORT                           =
*   IT_FILTER                         =
*   IS_SEL_HIDE                       =
*   I_DEFAULT                         = 'X'
*    I_SAVE                            = 'X'
*   IS_VARIANT                        =
*   IT_EVENTS                         =
*   IT_EVENT_EXIT                     =
*   IS_PRINT                          =
*   IS_REPREP_ID                      =
*   I_SCREEN_START_COLUMN             = 0
*   I_SCREEN_START_LINE               = 0
*   I_SCREEN_END_COLUMN               = 0
*   I_SCREEN_END_LINE                 = 0
*   I_HTML_HEIGHT_TOP                 = 0
*   I_HTML_HEIGHT_END                 = 0
*   IT_ALV_GRAPHICS                   =
*   IT_HYPERLINK                      =
*   IT_ADD_FIELDCAT                   =
*   IT_EXCEPT_QINFO                   =
*   IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*   E_EXIT_CAUSED_BY_CALLER           =
*   ES_EXIT_CAUSED_BY_USER            =
  TABLES
    T_OUTTAB                          = IT_FINAL
* EXCEPTIONS
*   PROGRAM_ERROR                     = 1
*   OTHERS                            = 2
          .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.                    "TRIP_REPORT

*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOP_OF_PAGE .

  DATA: F_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,
        T_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,
        C_TRNO(35) TYPE C.

  DATA:   FDATI TYPE SY-DATUM,
          TDATI TYPE SY-DATUM,
          FDATO(10) TYPE C,
          TDATO(10) TYPE C,
          FIDAT(30) TYPE C.

  DATA: IT_HEADER TYPE SLIS_T_LISTHEADER,
        WA_HEADER TYPE SLIS_LISTHEADER.
*        IT_EVENT TYPE SLIS_T_EVENT,
*        WA_EVENT TYPE SLIS_EVENT.
*        T_LINE LIKE WA_HEADER-INFO,
*        LD_LINES TYPE I,
*        LD_LINESC(10) TYPE C.


  F_TRNO = SO_TRN-LOW.
  T_TRNO = SO_TRN-HIGH.
  FDATO  = SO_CDATE-LOW.
  TDATO  = SO_CDATE-HIGH.


  WA_HEADER-TYP = 'H'.
  WA_HEADER-KEY = ' '.
  WA_HEADER-INFO = 'Freight Trip Charges Report'.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  CONCATENATE ' From:' F_TRNO ' TO: ' T_TRNO INTO C_TRNO.
  WA_HEADER-TYP = 'S'.
  WA_HEADER-KEY = 'Trip Sheet No'.
  IF F_TRNO IS NOT INITIAL AND T_TRNO IS NOT INITIAL.
    WA_HEADER-INFO = C_TRNO.
  ELSE.
    IF F_TRNO IS NOT INITIAL.
      WA_HEADER-INFO = F_TRNO.
    ELSEIF T_TRNO IS NOT INITIAL.
      WA_HEADER-INFO = T_TRNO.
    ENDIF.
  ENDIF.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  CONCATENATE 'From:' FDATO ' TO:' TDATO INTO FIDAT.
  WA_HEADER-TYP = 'S'.
  WA_HEADER-KEY = 'Trip Sheet Date '.
  IF FDATO <> '00.00.0000' AND TDATO <> '00.00.0000'.
    WA_HEADER-INFO = FIDAT.
  ELSE.
    IF FDATO <> '00.00.0000'.
      WA_HEADER-INFO = FDATO.
    ELSEIF TDATO <> '00.00.0000'.
      WA_HEADER-INFO = TDATO.
    ELSE.
      WA_HEADER-INFO ='Not Declared'.
    ENDIF.
  ENDIF.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_HEADER.
*      I_LOGO             = 'ZSHEENLAC'.
*     I_END_OF_LIST_GRID =
*     I_ALV_FORM         =

ENDFORM.                    "TOP_OF_PAGE


" TRIP_REPORT
*&---------------------------------------------------------------------*
*&      Form  TRIP_CON_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TRIP_CON_REPORT .

  TYPE-POOLS:SLIS.

  TYPES:BEGIN OF TY_ZFRE_HED,
    TRIP_NO TYPE ZTRIP,
    VENDOR_CODE TYPE LIFNR,
    VENDOR_NAME TYPE NAME1_GP,
    FROM_LOC TYPE NAME1,
    FREIGHT_CHARGE TYPE NETWR,
    LODING_CHARGE TYPE NETWR,
    UNLOAD_CHARGE TYPE NETWR,
    HALT_CHARGE TYPE NETWR,
    LR_CHARGE TYPE NETWR,
    VECHILE_NUMBER TYPE ZVECHILE,
    CRDATE TYPE ZCDATE,
    LOCAL_VENDOR TYPE ZFREIGHT_HEADER-LOCAL_VENDOR,
    LO_VENDORNAME TYPE ZFREIGHT_HEADER-LO_VENDORNAME,
    LOCAL_CHARGE TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,
    END OF TY_ZFRE_HED.

  TYPES:BEGIN OF TY1_ZFRE_HED,
  TRIP_NO TYPE ZTRIP,
  VENDOR_CODE TYPE LIFNR,
  VENDOR_NAME TYPE NAME1_GP,
  FROM_LOC TYPE NAME1,
  FREIGHT_CHARGE TYPE NETWR,
  LODING_CHARGE TYPE NETWR,
  UNLOAD_CHARGE TYPE NETWR,
  HALT_CHARGE TYPE NETWR,
  LR_CHARGE TYPE NETWR,
  TOLL_CHARGE TYPE NETWR,
  PENALTY_CHARGE TYPE NETWR,
  LOCAL_CHARGE TYPE NETWR,
  INSURANCE_CAHRGE TYPE NETWR,
  VECHILE_NUMBER TYPE ZVECHILE,
  CRDATE TYPE ZCDATE,
  LOCAL_VENDOR TYPE ZFREIGHT_HEADER-LOCAL_VENDOR,
    LO_VENDORNAME TYPE ZFREIGHT_HEADER-LO_VENDORNAME,
    LOCAL_CHARGE1 TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,
  END OF TY1_ZFRE_HED.


  TYPES:BEGIN OF TY_ZFRE_ITM,
    TRIP_NO TYPE ZTRIP,
    INVOICE_NO TYPE VBELN_VF,
    CUSTOMER_NAME TYPE NAME1_GP,
    INVOICE_DATE TYPE FKDAT,
    WEIGHT TYPE BRGEW_15,
    COMPANY_CODE TYPE BUKRS,
    LOCATION TYPE NAME1_GP,
    LR_NO TYPE ZLR_NO,
    STATUS TYPE ZSTA,
    END OF TY_ZFRE_ITM.

  TYPES:BEGIN OF TY_ZFRE_TRA,
    TRIP_NO TYPE ZTRIP,
    TOTAT_AMOUNT TYPE NETWR,
    END OF TY_ZFRE_TRA.

  TYPES:BEGIN OF TY_VBRK,
    VBELN TYPE VBELN_VF,
    NETWR TYPE NETWR,
    END OF TY_VBRK.

  TYPES:BEGIN OF TY_VBRP,
    VBELN TYPE VBELN_VF,
    POSNR TYPE POSNR_VF,
    BRGEW TYPE BRGEW_15,
    NETWR TYPE NETWR,
    FKIMG TYPE FKIMG,
    MATNR TYPE MATNR,
    WERKS TYPE WERKS_D,
    ARKTX TYPE ARKTX,
    VKBUR TYPE VKBUR,
    END OF TY_VBRP.

  TYPES:BEGIN OF TY_MSEG,
    MBLNR TYPE MBLNR,
    MATNR TYPE MATNR,
    WERKS TYPE WERKS_D,
    DMBTR TYPE DMBTR,
    MENGE TYPE MENGE_D,
    ERFMG TYPE ERFMG,
    END OF TY_MSEG.

  TYPES:BEGIN OF TY_MARA,
    MATNR TYPE MATNR,
    BRGEW TYPE BRGEW,
    END OF TY_MARA.

  TYPES:BEGIN OF TY_T001W,
     WERKS TYPE WERKS_D,
     NAME1 TYPE NAME1,
     END OF TY_T001W.

  TYPES:BEGIN OF TY_FINAL,
    COMPANY_CODE TYPE BUKRS,     "Company Code
    CRDATE TYPE ZCDATE,          "Trip sheet creation date
    TRIP_NO TYPE ZTRIP,          "Freight Entry No
    VENDOR_CODE TYPE LIFNR,      "Account Number of Vendor or Creditor
    VENDOR_NAME TYPE NAME1_GP,   "Name 1
    LR_NO TYPE ZLR_NO,           "Lorry No
    CRDATE1 TYPE ZCDATE,         "Trip sheet creation date
    VECHILE_NUMBER TYPE ZVECHILE,"Vechile No
    STATUS(15) TYPE C,            "Trip sheet type
    INVOICE_NO TYPE VBELN_VF,    "Billing Document
    INVOICE_DATE TYPE FKDAT,     "Billing date for billing index and printout
    POSNR TYPE POSNR_VF,         "Billing item
    BRGEW1 TYPE BRGEW_15,        "GROSS WEIGHT IN MATERIAL
    FKIMG TYPE FKIMG,            "Actual Invoiced Quantity
    MATNR TYPE MATNR ,           "Material Number
    WERKS TYPE WERKS_D,
    ARKTX TYPE ARKTX ,           "Material Description
    CUSTOMER_NAME TYPE NAME1_GP, "Name 1
    FROM_LOC TYPE NAME1,         "Name
    LOCATION TYPE NAME1_GP,      "Name 1
    NETWR TYPE NETWR,            "Net Value in Document Currency
    BRGEW TYPE BRGEW_15,         "Gross weight
    FRECHA TYPE NETWR,           "Net Value in FREIGHT CHARGES
    LOACHA TYPE NETWR,           "Net Value in LOADING CHARGES
    INLCHA TYPE NETWR,           "Net Value in INLOADING CHARGES
    LRCHA TYPE NETWR,            "Net Value in LR CHARGES
    HALCHA TYPE NETWR,           "Net Value in HALTING CHARGES
    TOLCHA TYPE NETWR,           "NET VALUE IN TOLL CHARGES
    INSCHA TYPE NETWR,           "NET VALUE IN INSURENCE CHARGE
    PENCHA TYPE NETWR,           "NET VALUE IN PENALTY CHARGE
    LOCCHA TYPE NETWR,           "Net Value in LOCAL TRANSPORT
    LOCAL_VENDOR TYPE ZFREIGHT_HEADER-LOCAL_VENDOR,
    LO_VENDORNAME TYPE ZFREIGHT_HEADER-LO_VENDORNAME,
    LOCAL_CHARGE TYPE ZFREIGHT_HEADER-LOCAL_CHARGE,
    LOCNEWCHA TYPE NETWR,
    TOT_FREI TYPE NETWR,
    END OF TY_FINAL.

  DATA: TOTQUN TYPE ZFREIGHT_ITEM-WEIGHT,
        TRA_TOT TYPE ZFREIGHT_ITEM-WEIGHT,
        OFRECHA TYPE NETWR,
        OHALCHA TYPE NETWR,
        OLOACHA TYPE NETWR,
        OINLCHA TYPE NETWR,
        OLRCHA  TYPE NETWR,
        OTOLCHA TYPE NETWR,
        OINSCHA TYPE NETWR,
        OPENCHA TYPE NETWR,
        OLOCCHA TYPE NETWR,
        OFRECHA1 TYPE NETWR,
        OHALCHA1 TYPE NETWR,
        OLOACHA1 TYPE NETWR,
        OINLCHA1 TYPE NETWR,
        OLRCHA1  TYPE NETWR,
        OTOLCHA1 TYPE NETWR,
        OINSCHA1 TYPE NETWR,
        OPENCHA1 TYPE NETWR,
        OLOCCHA1 TYPE NETWR.

  DATA : FREIGHT1 TYPE NETWR,
         HALTING1 TYPE NETWR,
         LOADING1 TYPE NETWR,
         INLOADING1 TYPE NETWR,
         LRCHARGES1 TYPE NETWR,
         TOLLCHARGE1 TYPE NETWR,
         INSURENCE1 TYPE NETWR,
         PENALTY1 TYPE NETWR,
         LOCALTRAN1 TYPE NETWR,
         LOCALTRANNEW1 TYPE NETWR,
         FREIGHT2 TYPE NETWR,
         HALTING2 TYPE NETWR,
         LOADING2 TYPE NETWR,
         INLOADING2 TYPE NETWR,
         LRCHARGES2 TYPE NETWR,
         TOLLCHARGE2 TYPE NETWR,
         INSURENCE2 TYPE NETWR,
         PENALTY2 TYPE NETWR,
         LOCALTRAN2 TYPE NETWR,
         LOCALTRANNEW2 TYPE NETWR.

  DATA: FRE_TOT TYPE F,
        LOD_TOT TYPE F,
        INL_TOT TYPE F,
        LRC_TOT TYPE F,
        HAL_TOT TYPE F,
        TOL_TOT TYPE F,
        PEN_TOT TYPE F,
        LOC_TOT TYPE F,
        INS_TOT TYPE F,
        LOC_TRN TYPE F,  "added on 28/7
        FRE_TOT1 TYPE F,
        LOD_TOT1 TYPE F,
        INL_TOT1 TYPE F,
        LRC_TOT1 TYPE F,
        HAL_TOT1 TYPE F,
        TOL_TOT1 TYPE F,
        PEN_TOT1 TYPE F,
        LOC_TOT1 TYPE F,
        INS_TOT1 TYPE F,
        LOC_TRN1 TYPE F.  "added on 28/7

  DATA: IT_HED TYPE STANDARD TABLE OF TY_ZFRE_HED,
        WA_HED TYPE TY_ZFRE_HED,
        IT1_HED TYPE STANDARD TABLE OF TY1_ZFRE_HED,
        WA1_HED TYPE TY1_ZFRE_HED,
        IT_ITM TYPE STANDARD TABLE OF TY_ZFRE_ITM,
        WA_ITM TYPE TY_ZFRE_ITM,
        WA1_ITM TYPE TY_ZFRE_ITM,
        WA2_ITM TYPE TY_ZFRE_ITM,
        IT_TRA TYPE STANDARD TABLE OF ZFREIGHT_TRAN,
        WA_TRA TYPE ZFREIGHT_TRAN,
        IT_VBRK TYPE STANDARD TABLE OF TY_VBRK,
        WA_VBRK TYPE TY_VBRK,
        IT_VBRP TYPE STANDARD TABLE OF TY_VBRP,
        WA_VBRP TYPE TY_VBRP,
        IT_MSEG TYPE STANDARD TABLE OF TY_MSEG,
        WA_MSEG TYPE TY_MSEG,
        IT_MARA TYPE STANDARD TABLE OF TY_MARA,
        WA_MARA TYPE TY_MARA,
        IT_T001W TYPE STANDARD TABLE OF TY_T001W,
        WA_T001W TYPE TY_T001W,
        IT1_T001W TYPE STANDARD TABLE OF TY_T001W,
        WA1_T001W TYPE TY_T001W,
        IT_FIN TYPE STANDARD TABLE OF TY_FINAL,
        WA_FIN TYPE TY_FINAL,
        IT_FINAL TYPE STANDARD TABLE OF TY_FINAL,
        WA_FINAL TYPE TY_FINAL,
        IT1_FINAL TYPE STANDARD TABLE OF TY_FINAL,
        WA1_FINAL TYPE TY_FINAL,
        IT_MAKT TYPE STANDARD TABLE OF MAKT,
        WA_MAKT TYPE MAKT.

  DATA: V_REPID LIKE SY-REPID.

  DATA: IT_FIELDCAT TYPE STANDARD TABLE OF SLIS_FIELDCAT_ALV,
        WA_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

  DATA : LAYOUT TYPE SLIS_LAYOUT_ALV.

  DATA: FDATI TYPE SY-DATUM,  "From Date
        TDATI TYPE SY-DATUM,  "TO Date
        FDATO(10) TYPE C,
        TDATO(10) TYPE C,
        FIDAT(30) TYPE C.     "CONCATENATE From Date and To Date

  DATA: F_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,   "Trip Number From
        T_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,   "Trip Number To
        C_TRNO(35) TYPE C.                     "CONCATENATE  Trip Number From And Trip Number To

  DATA: IT_HEADER TYPE SLIS_T_LISTHEADER, "lIST hEADER fOR ALV REPORT
        WA_HEADER TYPE SLIS_LISTHEADER.
  "BREAK-POINT."26/6

  DATA : WA_LIFNR TYPE LFA1-LIFNR.

  DATA : LV_LIFNR TYPE LFA1-LIFNR.

*LOOP AT SO_LIFNR INTO WA_LIFNR.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*            EXPORTING
*              INPUT  = WA_LIFNR
*            IMPORTING
*              OUTPUT = LV_LIFNR.

  " SHIFT SO-LIFNR LEFT DELETING LEADING '0'.

  "ENDLOOP.

  TYPES : BEGIN OF GS_LFA1,
           LIFNR TYPE LFA1-LIFNR,
           NAME1 TYPE LFA1-NAME1,
          END OF GS_LFA1.
  DATA : GT_LFA1 TYPE TABLE OF GS_LFA1,
         WA_LFA1 TYPE GS_LFA1.

  SELECT LIFNR NAME1 INTO TABLE GT_LFA1 FROM LFA1 WHERE LIFNR IN SO_LIFNR.

  SELECT  TRIP_NO
          VENDOR_CODE
          VENDOR_NAME
          FROM_LOC
          FREIGHT_CHARGE
          LODING_CHARGE
          UNLOAD_CHARGE
          HALT_CHARGE
          LR_CHARGE
          VECHILE_NUMBER
          CRDATE
    LOCAL_VENDOR
    LO_VENDORNAME
    LOCAL_CHARGE FROM ZFREIGHT_HEADER INTO TABLE IT_HED WHERE
TRIP_NO IN SO_TRN AND CRDATE IN SO_CDATE AND ( VENDOR_CODE IN SO_LIFNR OR LOCAL_VENDOR IN SO_LIFNR ) ..

*SELECT  TRIP_NO
*          VENDOR_CODE
*          VENDOR_NAME
*          FROM_LOC
*          FREIGHT_CHARGE
*          LODING_CHARGE
*          UNLOAD_CHARGE
*          HALT_CHARGE
*          LR_CHARGE
*          VECHILE_NUMBER
*          CRDATE
*    LOCAL_VENDOR
*    LO_VENDORNAME
*    LOCAL_CHARGE FROM ZFREIGHT_HEADER INTO TABLE IT_HED
*  FOR ALL ENTRIES IN gt_lfa1 WHERE LOCAL_VENDOR EQ GT_LFA1-LIFNR AND
*    TRIP_NO IN SO_TRN AND CRDATE IN SO_CDATE . " AND VENDOR_CODE IN SO_LIFNR.


  IF NOT IT_HED IS INITIAL.
    SELECT  TRIP_NO
            INVOICE_NO
            CUSTOMER_NAME
            INVOICE_DATE
            WEIGHT
            COMPANY_CODE
            LOCATION
            LR_NO
            STATUS FROM ZFREIGHT_ITEM INTO TABLE IT_ITM
                   FOR ALL ENTRIES IN IT_HED WHERE TRIP_NO EQ IT_HED-TRIP_NO ."AND COMPANY_CODE EQ P_CCOD. "modified 24/05/18 removed company code
    SELECT * FROM ZFREIGHT_TRAN INTO TABLE IT_TRA WHERE TRIP_NO IN SO_TRN.
    SELECT VBELN
           NETWR FROM VBRK INTO TABLE IT_VBRK FOR ALL ENTRIES IN IT_ITM WHERE VBELN EQ IT_ITM-INVOICE_NO.
*    BREAK-POINT.

    SELECT VBELN
           POSNR
           BRGEW
           NETWR
           FKIMG
           MATNR
           WERKS
           ARKTX
           VKBUR FROM VBRP INTO TABLE IT_VBRP FOR ALL ENTRIES IN IT_ITM WHERE VBELN EQ IT_ITM-INVOICE_NO AND FKLMG <> 0 .
    SELECT MBLNR
           MATNR
           WERKS
           DMBTR
           MENGE
           ERFMG FROM MSEG INTO TABLE IT_MSEG FOR ALL ENTRIES IN IT_ITM WHERE MBLNR EQ IT_ITM-INVOICE_NO
                                                                     AND SHKZG EQ 'H' AND BWART EQ '351'.
    SELECT MATNR
           BRGEW FROM MARA INTO TABLE IT_MARA FOR ALL ENTRIES IN IT_MSEG WHERE MATNR EQ IT_MSEG-MATNR.

    SELECT * FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_MSEG WHERE MATNR EQ IT_MSEG-MATNR.
    IF IT_VBRP IS NOT INITIAL.
      SELECT WERKS NAME1 FROM T001W INTO TABLE IT_T001W FOR ALL ENTRIES IN IT_VBRP WHERE WERKS EQ IT_VBRP-VKBUR.
    ENDIF.
    IF IT_MSEG IS NOT INITIAL.
      SELECT WERKS NAME1 FROM T001W INTO TABLE IT1_T001W FOR ALL ENTRIES IN IT_MSEG WHERE WERKS EQ IT_MSEG-WERKS.
    ENDIF.
    APPEND LINES OF IT1_T001W TO IT_T001W.

  ELSE.
    MESSAGE 'Trip Sheet Number Dosenot Exist' TYPE 'I'.
  ENDIF.

  LOOP AT IT_HED INTO WA_HED.
    LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA_HED-TRIP_NO.
      LOOP AT IT_VBRP INTO WA_VBRP WHERE VBELN EQ WA_ITM-INVOICE_NO.
        LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA_HED-TRIP_NO.
          TOTQUN = TOTQUN + WA_ITM-WEIGHT.
        ENDLOOP.
        READ TABLE IT_ITM INTO WA_ITM WITH KEY INVOICE_NO = WA_VBRP-VBELN.
        READ TABLE IT_HED INTO WA_HED WITH KEY TRIP_NO = WA_ITM-TRIP_NO.
        READ TABLE IT_TRA INTO WA_TRA WITH KEY TRIP_NO = WA_ITM-TRIP_NO.
        READ TABLE IT_VBRK INTO WA_VBRK WITH KEY VBELN = WA_ITM-INVOICE_NO.
        READ TABLE IT_MSEG INTO WA_MSEG WITH KEY MBLNR = WA_ITM-INVOICE_NO.
        READ TABLE IT_T001W INTO WA_T001W WITH KEY WERKS = WA_VBRP-VKBUR.
        MOVE:
        WA_ITM-COMPANY_CODE TO WA_FINAL-COMPANY_CODE,
        WA_HED-CRDATE  TO WA_FINAL-CRDATE,
        WA_HED-TRIP_NO  TO WA_FINAL-TRIP_NO,
        WA_HED-VENDOR_CODE TO WA_FINAL-VENDOR_CODE,
        WA_HED-VENDOR_NAME TO WA_FINAL-VENDOR_NAME,
        WA_ITM-LR_NO TO WA_FINAL-LR_NO,
        WA_HED-CRDATE TO WA_FINAL-CRDATE1,
        WA_HED-VECHILE_NUMBER TO WA_FINAL-VECHILE_NUMBER,
        WA_HED-LOCAL_VENDOR TO WA_FINAL-LOCAL_VENDOR ,
        WA_HED-LO_VENDORNAME TO WA_FINAL-LO_VENDORNAME .
        IF WA_ITM-STATUS = 'ZINV' .
          WA_FINAL-STATUS = 'Sales Invoice'.
        ELSEIF WA_ITM-STATUS = 'ZSTO'.
          WA_FINAL-STATUS = 'Stock Transfer'.
        ELSE.
          MOVE:WA_ITM-STATUS TO WA_FINAL-STATUS.
        ENDIF.
        MOVE:
        WA_ITM-INVOICE_NO TO WA_FINAL-INVOICE_NO,
        WA_VBRP-MATNR TO WA_FINAL-MATNR,
        "WA_VBRP-WERKS TO WA_FINAL-WERKS,
        WA_VBRP-VKBUR TO WA_FINAL-WERKS,
        WA_VBRP-ARKTX TO WA_FINAL-ARKTX,
        WA_VBRP-FKIMG TO WA_FINAL-FKIMG,
        WA_ITM-INVOICE_DATE TO WA_FINAL-INVOICE_DATE,
        WA_ITM-CUSTOMER_NAME TO WA_FINAL-CUSTOMER_NAME,
        "WA_HED-FROM_LOC TO WA_FINAL-FROM_LOC,
        WA_T001W-NAME1 TO WA_FINAL-FROM_LOC,
        WA_ITM-LOCATION TO WA_FINAL-LOCATION.
        IF WA_VBRP-VBELN = WA_ITM-INVOICE_NO..
          MOVE:WA_VBRP-NETWR TO WA_FINAL-NETWR.
          MOVE:WA_VBRP-BRGEW TO WA_FINAL-BRGEW .
        ELSE.
          WA_MSEG-MBLNR = WA_ITM-INVOICE_NO.
          MOVE:WA_MSEG-DMBTR TO WA_FINAL-NETWR. "#EC CI_FLDEXT_OK[2610650]    "Added by SPLABAP during code remediation
          WA_FINAL-BRGEW = WA_MSEG-MENGE * WA_MARA-BRGEW.
        ENDIF.

        WA_FINAL-LOCNEWCHA = WA_FINAL-LOCAL_CHARGE / WA_FINAL-BRGEW .
        LOOP AT IT_TRA INTO WA_TRA WHERE TRIP_NO = WA_HED-TRIP_NO.
          IF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'FREIGHT CHARGES'.
            OFRECHA = OFRECHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOADING CHARGES'.
            OLOACHA = OLOACHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'UNLOADING CHARGES'.
            OINLCHA = OINLCHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LR CHARGES'.
            OLRCHA = OLRCHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'HALTING CHARGES'.
            OHALCHA = OHALCHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'TOLL CHARGES'.
            OTOLCHA = OTOLCHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'INSURANCE'.
            OINSCHA = OINSCHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'PENALTY'.
            OPENCHA = OPENCHA + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOCAL TRANSPORT'.
            OLOCCHA = OLOCCHA + WA_TRA-TOTAT_AMOUNT.
          ENDIF.
        ENDLOOP.


        IF TOTQUN <> 0.
          FRE_TOT = ( WA_HED-FREIGHT_CHARGE + OFRECHA ) / TOTQUN  .
          FREIGHT1 = FRE_TOT * WA_FINAL-BRGEW .

          HAL_TOT = ( WA_HED-HALT_CHARGE + OHALCHA ) / TOTQUN.
          HALTING1 = HAL_TOT * WA_FINAL-BRGEW.

          LOD_TOT = ( WA_HED-LODING_CHARGE + OLOACHA ) / TOTQUN.
          LOADING1 = LOD_TOT * WA_FINAL-BRGEW.

          INL_TOT = ( WA_HED-UNLOAD_CHARGE + OINLCHA ) / TOTQUN.
          INLOADING1 = INL_TOT * WA_FINAL-BRGEW.

          LRC_TOT = ( WA_HED-LR_CHARGE  + OLRCHA ) / TOTQUN.
          LRCHARGES1 = LRC_TOT * WA_FINAL-BRGEW.

          LOC_TRN =  WA_HED-LODING_CHARGE / TOTQUN . "added on 28/7
          LOCALTRANNEW1 = LOC_TRN * WA_FINAL-BRGEW .

          TOL_TOT = OTOLCHA / TOTQUN.
          TOLLCHARGE1 = TOL_TOT * WA_FINAL-BRGEW.

          INS_TOT = OINSCHA / TOTQUN.
          INSURENCE1 = INS_TOT * WA_FINAL-BRGEW.

          PEN_TOT = OPENCHA / TOTQUN.
          PENALTY1 = PEN_TOT * WA_FINAL-BRGEW.

          LOC_TOT = OLOCCHA / TOTQUN.
          LOCALTRAN1 = LOC_TOT * WA_FINAL-BRGEW.

        ENDIF.
        LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA_FINAL-TRIP_NO AND LOCATION EQ WA_FINAL-LOCATION.
          TRA_TOT = TRA_TOT +  WA_ITM-WEIGHT.
        ENDLOOP.

        LOOP AT IT_TRA INTO WA_TRA WHERE TRIP_NO EQ WA_FINAL-TRIP_NO.

          IF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'FREIGHT CHARGES'.
            OFRECHA1 = OFRECHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOADING CHARGES'.
            OLOACHA1 = OLOACHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'UNLOADING CHARGES'.
            OINLCHA1 = OINLCHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LR CHARGES'.
            OLRCHA1 = OLRCHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'HALTING CHARGES'.
            OHALCHA1 = OHALCHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'TOLL CHARGES'.
            OTOLCHA1 = OTOLCHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'INSURANCE'.
            OINSCHA1 = OINSCHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'PENALTY'.
            OPENCHA1 = OPENCHA1 + WA_TRA-TOTAT_AMOUNT.

          ELSEIF WA_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOCAL TRANSPORT'.
            OLOCCHA1 = OLOCCHA1 + WA_TRA-TOTAT_AMOUNT.

          ENDIF.
        ENDLOOP.

        IF  TRA_TOT <> 0.
          IF WA_FINAL-BRGEW <> 0.
            FRE_TOT1 =  OFRECHA1  / TRA_TOT.
            FREIGHT2 =  FRE_TOT1  * WA1_FINAL-BRGEW.

            LOD_TOT1 = OLOACHA1 / TRA_TOT.
            LOADING2 = LOD_TOT1 * WA1_FINAL-BRGEW .

            INL_TOT1 = OINLCHA1  / TRA_TOT.
            INLOADING2 =  INL_TOT1 * WA1_FINAL-BRGEW.

            LRC_TOT1 =  OLRCHA1 / TRA_TOT.
            LRCHARGES2 =  LRC_TOT1 * WA1_FINAL-BRGEW.

            HAL_TOT1 =  OHALCHA1 / TRA_TOT.
            HALTING2 =   HAL_TOT1 * WA1_FINAL-BRGEW.

            TOL_TOT1 = OTOLCHA1   / TRA_TOT.
            TOLLCHARGE2 =  TOL_TOT1 * WA1_FINAL-BRGEW.

            INS_TOT1 =  OINSCHA1   / TRA_TOT.
            INSURENCE2 =  INS_TOT1 * WA1_FINAL-BRGEW.

            PEN_TOT1 = OPENCHA1 / TRA_TOT.
            PENALTY2 =  PEN_TOT1 * WA1_FINAL-BRGEW.

            LOC_TOT1 = OLOCCHA1  / TRA_TOT.
            LOCALTRAN2 =  LOC_TOT1 * WA1_FINAL-BRGEW.

            WA_FINAL-FRECHA = FREIGHT1 + FREIGHT2.
            WA_FINAL-HALCHA = HALTING1 + HALTING2.
            WA_FINAL-INLCHA = INLOADING1 + INLOADING2.
            WA_FINAL-LOACHA = LOADING1 + LOADING2.
            WA_FINAL-LRCHA = LRCHARGES1 + LRCHARGES2.
            WA_FINAL-TOLCHA = TOLLCHARGE1 + TOLLCHARGE2.
            WA_FINAL-INSCHA = INSURENCE1 + INSURENCE2.
            WA_FINAL-PENCHA = PENALTY1 + PENALTY2.
            WA_FINAL-LOCCHA = LOCALTRAN1 + LOCALTRAN2.

            WA_FINAL-TOT_FREI = WA_FINAL-FRECHA + WA_FINAL-HALCHA + WA_FINAL-INLCHA +
                                   WA_FINAL-LOACHA + WA_FINAL-LRCHA +  WA_FINAL-TOLCHA  +
                                   WA_FINAL-INSCHA + WA_FINAL-PENCHA + WA_FINAL-LOCCHA +
                                   WA_FINAL-LOCNEWCHA .

          ENDIF.
        ENDIF.
        APPEND: WA_FINAL TO IT_FINAL.
        CLEAR: WA_FINAL , TRA_TOT , TOTQUN,
               OFRECHA, OLOACHA , OINLCHA , OLRCHA , OHALCHA , OTOLCHA , OINSCHA , OPENCHA , OLOCCHA,
               OFRECHA1, OLOACHA1 , OINLCHA1 , OLRCHA1 , OHALCHA1 , OTOLCHA1 , OINSCHA1 , OPENCHA1 , OLOCCHA1,        " ZFREIGHT_TRAN TABLE FIELDS VALUE SUM               " ZFREIGHT_TRAN TABLE FIELDS VALUE SUM
               FREIGHT1, HALTING1, LOADING1, INLOADING1, LRCHARGES1, TOLLCHARGE1, INSURENCE1, PENALTY1, LOCALTRAN1,   " FINAL MOVE VALUES AND FREIGHT_ITEM TABLE TOTAL WEIGHT
               FREIGHT2, HALTING2, LOADING2, INLOADING2, LRCHARGES2, TOLLCHARGE2, INSURENCE2, PENALTY2, LOCALTRAN2,   " LOCAL VARIABLE DECLARE FOR CALCULATING FUNCTION
               FRE_TOT ,LOD_TOT , INL_TOT , LRC_TOT , HAL_TOT , TOL_TOT ,PEN_TOT , LOC_TOT ,INS_TOT ,
               FRE_TOT1,LOD_TOT1, INL_TOT1, LRC_TOT1, HAL_TOT1, TOL_TOT1, PEN_TOT1, LOC_TOT1, INS_TOT1.
      ENDLOOP.
      IF WA_VBRP-VBELN <> WA_ITM-INVOICE_NO .
        LOOP AT IT_MSEG INTO WA_MSEG WHERE MBLNR EQ WA_ITM-INVOICE_NO.
          LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA_HED-TRIP_NO.
            TOTQUN = TOTQUN + WA_ITM-WEIGHT.
          ENDLOOP.
          READ TABLE IT_ITM INTO WA_ITM WITH KEY INVOICE_NO = WA_MSEG-MBLNR.
          READ TABLE IT_HED INTO WA_HED WITH KEY TRIP_NO = WA_ITM-TRIP_NO.
          READ TABLE IT_TRA INTO WA_TRA WITH KEY TRIP_NO = WA_ITM-TRIP_NO.
          READ TABLE IT_MARA INTO WA_MARA WITH KEY MATNR = WA_MSEG-MATNR.
          READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_MSEG-MATNR.
          READ TABLE IT_T001W INTO WA_T001W WITH KEY WERKS = WA_MSEG-WERKS.
          MOVE:
          WA_ITM-COMPANY_CODE TO WA1_FINAL-COMPANY_CODE,
          WA_HED-CRDATE  TO WA1_FINAL-CRDATE,
          WA_HED-TRIP_NO  TO WA1_FINAL-TRIP_NO,
          WA_HED-VENDOR_CODE TO WA1_FINAL-VENDOR_CODE,
          WA_HED-VENDOR_NAME TO WA1_FINAL-VENDOR_NAME,
          WA_ITM-LR_NO TO WA1_FINAL-LR_NO,
          WA_HED-CRDATE TO WA1_FINAL-CRDATE1,
          WA_HED-VECHILE_NUMBER TO WA1_FINAL-VECHILE_NUMBER.
          IF WA_ITM-STATUS = 'ZINV' .
            WA1_FINAL-STATUS = 'Sales Invoice'.
          ELSEIF WA_ITM-STATUS = 'ZSTO'.
            WA1_FINAL-STATUS = 'Stock Transfer'.
          ELSE.
            MOVE:WA_ITM-STATUS TO WA1_FINAL-STATUS.
          ENDIF.
          MOVE:
          WA_ITM-INVOICE_NO TO WA1_FINAL-INVOICE_NO,
          WA_MSEG-MATNR TO WA1_FINAL-MATNR,
          WA_MSEG-WERKS TO WA1_FINAL-WERKS,
          WA_MAKT-MAKTX TO WA1_FINAL-ARKTX,
          WA_MSEG-MENGE TO WA1_FINAL-FKIMG,
          WA_ITM-INVOICE_DATE TO WA1_FINAL-INVOICE_DATE,
          WA_ITM-CUSTOMER_NAME TO WA1_FINAL-CUSTOMER_NAME,
          "WA_HED-FROM_LOC TO WA1_FINAL-FROM_LOC,
          WA_T001W-NAME1 TO WA1_FINAL-FROM_LOC,
          WA_ITM-LOCATION TO WA1_FINAL-LOCATION.
          IF WA_MSEG-MBLNR = WA_ITM-INVOICE_NO.
            MOVE: WA_MSEG-DMBTR TO WA1_FINAL-NETWR. "#EC CI_FLDEXT_OK[2610650]    "Added by SPLABAP during code remediation
            WA1_FINAL-BRGEW = WA_MSEG-MENGE * WA_MARA-BRGEW.
          ENDIF.

          LOOP AT IT_TRA INTO WA_TRA WHERE TRIP_NO = WA_HED-TRIP_NO.
            IF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'FREIGHT CHARGES'.
              OFRECHA = OFRECHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOADING CHARGES'.
              OLOACHA = OLOACHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'UNLOADING CHARGES'.
              OINLCHA = OINLCHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LR CHARGES'.
              OLRCHA = OLRCHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'HALTING CHARGES'.
              OHALCHA = OHALCHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'TOLL CHARGES'.
              OTOLCHA = OTOLCHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'INSURANCE'.
              OINSCHA = OINSCHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'PENALTY'.
              OPENCHA = OPENCHA + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA_HED-FROM_LOC = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOCAL TRANSPORT'.
              OLOCCHA = OLOCCHA + WA_TRA-TOTAT_AMOUNT.
            ENDIF.
          ENDLOOP.


          IF TOTQUN <> 0.
            FRE_TOT = ( WA_HED-FREIGHT_CHARGE + OFRECHA ) / TOTQUN  .
            FREIGHT1 = FRE_TOT * WA1_FINAL-BRGEW .

            HAL_TOT = ( WA_HED-HALT_CHARGE + OHALCHA ) / TOTQUN.
            HALTING1 = HAL_TOT * WA1_FINAL-BRGEW.

            LOD_TOT = ( WA_HED-LODING_CHARGE + OLOACHA ) / TOTQUN.
            LOADING1 = LOD_TOT * WA1_FINAL-BRGEW.

            INL_TOT = ( WA_HED-UNLOAD_CHARGE + OINLCHA ) / TOTQUN.
            INLOADING1 = INL_TOT * WA1_FINAL-BRGEW.

            LRC_TOT = ( WA_HED-LR_CHARGE  + OLRCHA ) / TOTQUN.
            LRCHARGES1 = LRC_TOT * WA1_FINAL-BRGEW.

            TOL_TOT = OTOLCHA / TOTQUN.
            TOLLCHARGE1 = TOL_TOT * WA1_FINAL-BRGEW.

            INS_TOT = OINSCHA / TOTQUN.
            INSURENCE1 = INS_TOT * WA1_FINAL-BRGEW.

            PEN_TOT = OPENCHA / TOTQUN.
            PENALTY1 = PEN_TOT * WA1_FINAL-BRGEW.

            LOC_TOT = OLOCCHA / TOTQUN.
            LOCALTRAN1 = LOC_TOT * WA1_FINAL-BRGEW.

            LOC_TRN  = WA_HED-LOCAL_CHARGE / TOTQUN . "added on 28/7
            LOCALTRANNEW1 = LOC_TRN * WA1_FINAL-BRGEW .


          ENDIF.
          LOOP AT IT_ITM INTO WA_ITM WHERE TRIP_NO EQ WA1_FINAL-TRIP_NO AND LOCATION EQ WA1_FINAL-LOCATION.
            TRA_TOT = TRA_TOT +  WA_ITM-WEIGHT.
          ENDLOOP.

          LOOP AT IT_TRA INTO WA_TRA WHERE TRIP_NO EQ WA1_FINAL-TRIP_NO.

            IF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'FREIGHT CHARGES'.
              OFRECHA1 = OFRECHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOADING CHARGES'.
              OLOACHA1 = OLOACHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'UNLOADING CHARGES'.
              OINLCHA1 = OINLCHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LR CHARGES'.
              OLRCHA1 = OLRCHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'HALTING CHARGES'.
              OHALCHA1 = OHALCHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'TOLL CHARGES'.
              OTOLCHA1 = OTOLCHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'INSURANCE'.
              OINSCHA1 = OINSCHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'PENALTY'.
              OPENCHA1 = OPENCHA1 + WA_TRA-TOTAT_AMOUNT.

            ELSEIF WA1_FINAL-LOCATION = WA_TRA-CHARGE_LOC AND WA_TRA-CHARGE_TYPE EQ 'LOCAL TRANSPORT'.
              OLOCCHA1 = OLOCCHA1 + WA_TRA-TOTAT_AMOUNT.

            ENDIF.
          ENDLOOP.

          IF  TRA_TOT <> 0.
            IF WA1_FINAL-BRGEW <> 0.
              FRE_TOT1 =  OFRECHA1  / TRA_TOT.
              FREIGHT2 =  FRE_TOT1  * WA1_FINAL-BRGEW.

              LOD_TOT1 = OLOACHA1 / TRA_TOT.
              LOADING2 = LOD_TOT1 * WA1_FINAL-BRGEW .

              INL_TOT1 = OINLCHA1  / TRA_TOT.
              INLOADING2 =  INL_TOT1 * WA1_FINAL-BRGEW.

              LRC_TOT1 =  OLRCHA1 / TRA_TOT.
              LRCHARGES2 =  LRC_TOT1 * WA1_FINAL-BRGEW.

              HAL_TOT1 =  OHALCHA1 / TRA_TOT.
              HALTING2 =   HAL_TOT1 * WA1_FINAL-BRGEW.

              TOL_TOT1 = OTOLCHA1   / TRA_TOT.
              TOLLCHARGE2 =  TOL_TOT1 * WA1_FINAL-BRGEW.

              INS_TOT1 =  OINSCHA1   / TRA_TOT.
              INSURENCE2 =  INS_TOT1 * WA1_FINAL-BRGEW.

              PEN_TOT1 = OPENCHA1 / TRA_TOT.
              PENALTY2 =  PEN_TOT1 * WA1_FINAL-BRGEW.

              LOC_TOT1 = OLOCCHA1  / TRA_TOT.
              LOCALTRAN2 =  LOC_TOT1 * WA1_FINAL-BRGEW.

              WA1_FINAL-FRECHA = FREIGHT1 + FREIGHT2.
              WA1_FINAL-HALCHA = HALTING1 + HALTING2.
              WA1_FINAL-INLCHA = INLOADING1 + INLOADING2.
              WA1_FINAL-LOACHA = LOADING1 + LOADING2.
              WA1_FINAL-LRCHA = LRCHARGES1 + LRCHARGES2.
              WA1_FINAL-TOLCHA = TOLLCHARGE1 + TOLLCHARGE2.
              WA1_FINAL-INSCHA = INSURENCE1 + INSURENCE2.
              WA1_FINAL-PENCHA = PENALTY1 + PENALTY2.
              WA1_FINAL-LOCCHA = LOCALTRAN1 + LOCALTRAN2.

              WA1_FINAL-LOCNEWCHA = LOCALTRANNEW1 + LOCALTRANNEW2 .

              WA1_FINAL-TOT_FREI = WA1_FINAL-FRECHA + WA1_FINAL-HALCHA + WA1_FINAL-INLCHA +
                                   WA1_FINAL-LOACHA + WA1_FINAL-LRCHA +  WA1_FINAL-TOLCHA  +
                                   WA1_FINAL-INSCHA + WA1_FINAL-PENCHA + WA1_FINAL-LOCCHA +
                                   WA1_FINAL-LOCNEWCHA .

              " WA1_FINAL-LOCNEWCHA = LOCALTRANNEW1 + LOCALTRANNEW2.
            ENDIF.
          ENDIF.
          APPEND: WA1_FINAL TO IT1_FINAL.
          CLEAR: WA1_FINAL , TRA_TOT , TOTQUN,
                 OFRECHA, OLOACHA , OINLCHA , OLRCHA , OHALCHA , OTOLCHA , OINSCHA , OPENCHA , OLOCCHA,
                 OFRECHA1, OLOACHA1 , OINLCHA1 , OLRCHA1 , OHALCHA1 , OTOLCHA1 , OINSCHA1 , OPENCHA1 , OLOCCHA1,               " ZFREIGHT_TRAN TABLE FIELDS VALUE SUM               " ZFREIGHT_TRAN TABLE FIELDS VALUE SUM
                 FREIGHT1, HALTING1, LOADING1, INLOADING1, LRCHARGES1, TOLLCHARGE1, INSURENCE1, PENALTY1, LOCALTRAN1,                         " FINAL MOVE VALUES AND FREIGHT_ITEM TABLE TOTAL WEIGHT
                 FREIGHT2, HALTING2, LOADING2, INLOADING2, LRCHARGES2, TOLLCHARGE2, INSURENCE2, PENALTY2, LOCALTRAN2,
                 LOCALTRANNEW1,LOCALTRANNEW2," LOCAL VARIABLE DECLARE FOR CALCULATING FUNCTION
                 FRE_TOT ,LOD_TOT , INL_TOT , LRC_TOT , HAL_TOT , TOL_TOT ,PEN_TOT , LOC_TOT ,INS_TOT ,
                 FRE_TOT1,LOD_TOT1, INL_TOT1, LRC_TOT1, HAL_TOT1, TOL_TOT1, PEN_TOT1, LOC_TOT1, INS_TOT1.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDLOOP.
  APPEND LINES OF IT1_FINAL TO IT_FINAL.



  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '0'.
  WA_FIELDCAT-FIELDNAME = 'COMPANY_CODE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Comp Code'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '1'.
  WA_FIELDCAT-FIELDNAME = 'CRDATE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Trip Sheet Date'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '2'.
  WA_FIELDCAT-FIELDNAME = 'TRIP_NO'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Trip Sheet Number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '3'.
  WA_FIELDCAT-FIELDNAME = 'VENDOR_CODE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vendor Code'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '4'.
  WA_FIELDCAT-FIELDNAME = 'VENDOR_NAME'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vendor Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '5'.
  WA_FIELDCAT-FIELDNAME = 'LR_NO'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'LR number '.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '6'.
  WA_FIELDCAT-FIELDNAME = 'CRDATE1'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'LR Date'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '7'.
  WA_FIELDCAT-FIELDNAME = 'VECHILE_NUMBER'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vechicle number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '8'.
  WA_FIELDCAT-FIELDNAME = 'STATUS'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Category'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '9'.
  WA_FIELDCAT-FIELDNAME = 'INVOICE_NO'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Sales Invoice Number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  "CHANGE 18/06  REPLACE 13TH POSITION TO 10 POSITION
  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '10'.
  WA_FIELDCAT-FIELDNAME = 'INVOICE_DATE'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Invoice Date'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '11'.
  WA_FIELDCAT-FIELDNAME = 'MATNR'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Material Number'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '12'.
  WA_FIELDCAT-FIELDNAME = 'ARKTX'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Material Description'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '13'.
  WA_FIELDCAT-FIELDNAME = 'FKIMG'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Quantity'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '14'.
  WA_FIELDCAT-FIELDNAME = 'CUSTOMER_NAME'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Customer Name/Branch Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '15'.
  WA_FIELDCAT-FIELDNAME = 'WERKS'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Plant Code'. "change 18/6
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '16'.
  WA_FIELDCAT-FIELDNAME = 'FROM_LOC'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'From Location'. "change 18/6
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '17'.
  WA_FIELDCAT-FIELDNAME = 'LOCATION'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'To Location'. "Change 18/06
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '18'.
  WA_FIELDCAT-FIELDNAME = 'NETWR'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Sale value before Tax'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '19'.
  WA_FIELDCAT-FIELDNAME = 'BRGEW'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'TotalKG/Liter'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.   "added on 28/7
  WA_FIELDCAT-COL_POS = '20'.
  WA_FIELDCAT-FIELDNAME = 'TOT_FREI'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Total Freight'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '21'.
  WA_FIELDCAT-FIELDNAME = 'FRECHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Base Freight Charge'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '22'.
  WA_FIELDCAT-FIELDNAME = 'LOACHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Loading'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '23'.
  WA_FIELDCAT-FIELDNAME = 'INLCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'UnLoading'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '24'.
  WA_FIELDCAT-FIELDNAME = 'LRCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'LR Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '25'.
  WA_FIELDCAT-FIELDNAME = 'HALCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Halting Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '26'.
  WA_FIELDCAT-FIELDNAME = 'TOLCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Toll Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '27'.
  WA_FIELDCAT-FIELDNAME = 'INSCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Insurence'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '28'.
  WA_FIELDCAT-FIELDNAME = 'PENCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Penality Charges'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '29'.
  WA_FIELDCAT-FIELDNAME = 'LOCCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Additional Local Transport Charge'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '30'.
  WA_FIELDCAT-FIELDNAME = 'LOCAL_VENDOR'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Local Transport Code'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '31'.
  WA_FIELDCAT-FIELDNAME = 'LO_VENDORNAME'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Local Transport Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '32'.
  WA_FIELDCAT-FIELDNAME = 'LOCNEWCHA'.
  WA_FIELDCAT-TABNAME = WA_FINAL .  "#EC CI_FLDEXT_OK[2215424]    "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Local Transport Charge'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.



  LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  LAYOUT-ZEBRA = 'X'.
  CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
    EXPORTING
      DATE_INTERNAL            = FDATI
    IMPORTING
      DATE_EXTERNAL            = FDATO
    EXCEPTIONS
      DATE_INTERNAL_IS_INVALID = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
    EXPORTING
      DATE_INTERNAL            = TDATI
    IMPORTING
      DATE_EXTERNAL            = TDATO
    EXCEPTIONS
      DATE_INTERNAL_IS_INVALID = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
 EXPORTING
*   I_INTERFACE_CHECK                 = ' '
*   I_BYPASSING_BUFFER                = ' '
*   I_BUFFER_ACTIVE                   = ' '
    I_CALLBACK_PROGRAM                = SY-REPID
*   I_CALLBACK_PF_STATUS_SET          = ' '
*   I_CALLBACK_USER_COMMAND           = ' '
    I_CALLBACK_TOP_OF_PAGE            = 'TOP_OF_PAGE1'
*   I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*   I_CALLBACK_HTML_END_OF_LIST       = ' '
*   I_STRUCTURE_NAME                  =
*   I_BACKGROUND_ID                   = ' '
*   I_GRID_TITLE                      =
*   I_GRID_SETTINGS                   =
    IS_LAYOUT                         = LAYOUT
    IT_FIELDCAT                       = IT_FIELDCAT
*   IT_EXCLUDING                      =
*   IT_SPECIAL_GROUPS                 =
*   IT_SORT                           =
*   IT_FILTER                         =
*   IS_SEL_HIDE                       =
*   I_DEFAULT                         = 'X'
*   I_SAVE                            = 'X'
*   IS_VARIANT                        =
*   IT_EVENTS                         =
*   IT_EVENT_EXIT                     =
*   IS_PRINT                          =
*   IS_REPREP_ID                      =
*   I_SCREEN_START_COLUMN             = 0
*   I_SCREEN_START_LINE               = 0
*   I_SCREEN_END_COLUMN               = 0
*   I_SCREEN_END_LINE                 = 0
*   I_HTML_HEIGHT_TOP                 = 0
*   I_HTML_HEIGHT_END                 = 0
*   IT_ALV_GRAPHICS                   =
*   IT_HYPERLINK                      =
*   IT_ADD_FIELDCAT                   =
*   IT_EXCEPT_QINFO                   =
*   IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*   E_EXIT_CAUSED_BY_CALLER           =
*   ES_EXIT_CAUSED_BY_USER            =
  TABLES
    T_OUTTAB                          = IT_FINAL
* EXCEPTIONS
*   PROGRAM_ERROR                     = 1
*   OTHERS                            = 2
          .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.



ENDFORM.                    "TRIP_CON_REPORT


*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOP_OF_PAGE1 .

  DATA: F_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,
        T_TRNO TYPE ZFREIGHT_HEADER-TRIP_NO,
        C_TRNO(35) TYPE C.

  DATA: FDATI TYPE SY-DATUM,
        TDATI TYPE SY-DATUM,
        FDATO(10) TYPE C,
        TDATO(10) TYPE C,
        FIDAT(30) TYPE C.

  DATA: IT_HEADER TYPE SLIS_T_LISTHEADER,
        WA_HEADER TYPE SLIS_LISTHEADER.
*        IT_EVENT TYPE SLIS_T_EVENT,
*        WA_EVENT TYPE SLIS_EVENT.
*        T_LINE LIKE WA_HEADER-INFO,
*        LD_LINES TYPE I,
*        LD_LINESC(10) TYPE C.


  F_TRNO = SO_TRN-LOW.
  T_TRNO = SO_TRN-HIGH.
  FDATO  = SO_CDATE-LOW.
  TDATO  = SO_CDATE-HIGH.


  WA_HEADER-TYP = 'H'.
  WA_HEADER-KEY = ' '.
  WA_HEADER-INFO = 'Freight Trip Charges Details Report'.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  CONCATENATE ' From:' F_TRNO ' TO: ' T_TRNO INTO C_TRNO.
  WA_HEADER-TYP = 'S'.
  WA_HEADER-KEY = 'Trip Sheet No'.
  IF F_TRNO IS NOT INITIAL AND T_TRNO IS NOT INITIAL.
    WA_HEADER-INFO = C_TRNO.
  ELSE.
    IF F_TRNO IS NOT INITIAL.
      WA_HEADER-INFO = F_TRNO.
    ELSEIF T_TRNO IS NOT INITIAL.
      WA_HEADER-INFO = T_TRNO.
    ENDIF.
  ENDIF.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  CONCATENATE 'From:' FDATO ' TO:' TDATO INTO FIDAT.
  WA_HEADER-TYP = 'S'.
  WA_HEADER-KEY = 'Trip Sheet Date '.
  IF FDATO <> '00.00.0000' AND TDATO <> '00.00.0000'.
    WA_HEADER-INFO = FIDAT.
  ELSE.
    IF FDATO <> '00.00.0000'.
      WA_HEADER-INFO = FDATO.
    ELSEIF TDATO <> '00.00.0000'.
      WA_HEADER-INFO = TDATO.
    ELSE.
      WA_HEADER-INFO ='Not Declared'.
    ENDIF.
  ENDIF.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_HEADER.
*      I_LOGO             = 'ZSHEENLAC'.
*     I_END_OF_LIST_GRID =
*     I_ALV_FORM         =

ENDFORM.                    "TOP_OF_PAGE1
*&---------------------------------------------------------------------*
*&      Form  CREATE_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_AUTHORIZATION .

  DATA : CREA_AUT TYPE T001W-WERKS.

  SELECT WERKS UP TO 1 ROWS FROM T001W INTO CREA_AUT WHERE NAME1 EQ IP_FLOC ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation


*  SELECT SINGLE FROM_CODE INTO EDIT_AUT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN .
*
  AUTHORITY-CHECK OBJECT 'ZTRIP'
           ID 'WERKS' FIELD CREA_AUT.
  IF SY-SUBRC = 0.
    AUTHORITY-CHECK OBJECT 'ZTRIP'
               ID 'ACTVT' FIELD '01'.
    IF SY-SUBRC <> 0.
      MESSAGE 'Authorization Required' TYPE 'E'.
    ENDIF.
  ELSE.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.


ENDFORM.                    " CREATE_AUTHORIZATION
*&---------------------------------------------------------------------*
*&      Form  REPORT_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REPORT_AUTHORIZATION .

*    DATA : EDIT_AUT TYPE T001W-WERKS.
*
*  SELECT SINGLE FROM_CODE INTO EDIT_AUT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN .
  AUTHORITY-CHECK OBJECT 'ZTRIP'
             ID 'ACTVT' FIELD '03'.
  IF SY-SUBRC <> 0.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.
*      AUTHORITY-CHECK OBJECT 'ZTRIP'
*           ID 'WERKS' FIELD EDIT_AUT.
*    IF SY-SUBRC <> 0.
*      MESSAGE 'Authorization Required' TYPE 'E'.
*    ENDIF.
*  ELSE.


ENDFORM.                    " REPORT_AUTHORIZATION
*&---------------------------------------------------------------------*
*&      Form  APPROVAL_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM APPROVAL_AUTHORIZATION .

  AUTHORITY-CHECK OBJECT 'ZTRIP'
           ID 'ACTVT' FIELD '16'.
  IF SY-SUBRC <> 0.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.

ENDFORM.                    " APPROVAL_AUTHORIZATION
*&---------------------------------------------------------------------*
*&      Module  LOC_SH_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE LOC_SH_9002 INPUT.

  PERFORM SEARCH_HELP_LOCTRANPORTER_9002.

ENDMODULE.                 " LOC_SH_9002  INPUT
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP_LOCTRANPORTER_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP_LOCTRANPORTER_9002 .


  SELECT LIFNR
        NAME1
        FROM LFA1
        INTO TABLE IT_LFA1
        WHERE KTOKK EQ 'YBTR' AND LOEVM <> 'X' .

  DATA: RETURN TYPE TABLE OF DDSHRETVAL WITH HEADER LINE.

  DATA: T_VALUES  TYPE STANDARD TABLE OF TY_LLFA1.
  DATA: T_RETURN  TYPE STANDARD TABLE OF DDSHRETVAL.
  DATA: T_MAPPING TYPE STANDARD TABLE OF DSELC.

  DATA: S_VALUES  TYPE TY_LLFA1.
  DATA: S_RETURN  TYPE DDSHRETVAL.
  DATA: S_MAPPING TYPE DSELC.

  S_MAPPING-FLDNAME     = 'F0001'.
  S_MAPPING-DYFLDNAME   = 'IP_LTRCODE'.
  APPEND S_MAPPING TO T_MAPPING.
  CLEAR S_MAPPING.

  S_MAPPING-FLDNAME     = 'F0002'.
  S_MAPPING-DYFLDNAME   = 'IP_LTRANS'.
  APPEND S_MAPPING TO T_MAPPING.
  CLEAR S_MAPPING.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'NAME1_GP'
      DYNPPROG        = SY-CPROG
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = 'IP_LTRCODE'
                                                                      " window_title    = ‘Selection of Material with Description’
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_LFA1
      RETURN_TAB      = T_RETURN
      DYNPFLD_MAPPING = T_MAPPING
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  IF SY-SUBRC <> 0.
** Implement suitable error handling here
  ENDIF.

ENDFORM.                    " SEARCH_HELP_LOCTRANPORTER_9002
*&---------------------------------------------------------------------*
*&      Form  UDB_UPDATAION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UDB_UPDATAION .

  PERFORM FILL_ZFREIGHT_HEADER.
  PERFORM FILL_ZFREIGHT_ITEM.
  PERFORM FILL_ZFREIGHT_TRAN.

  " LV_ACTION = 'U'.

  CALL FUNCTION 'ZFM_TRIP_SHEET_UPDATE'
    EXPORTING
      ACTION                 = LV_ACTION
      WA_ZFREIGHT_HEADER     = GS_FHEAD
    TABLES
      IT_ZFREIGHT_ITEM       = GT_FITEM
      IT_ZFREIGHT_TRAN       = GT_FTRAN
*     IT_ZFREIGHT_HEADER     =
    EXCEPTIONS
      DB_UPDATE_SUCCESS      = 1
      DB_UPDATE_FAIL         = 2
      DB_INSERT_SUCCESS      = 3
      DB_INSERT_FAIL         = 4
      DB_TRIP_DELETE_SUCCESS = 5
      DB_TRIP_DELETE_FAIL    = 6
      OTHERS                 = 7.
  IF SY-SUBRC <> 0.

    CASE SY-SUBRC.

      WHEN 1.
        MESSAGE I007 WITH GS_FHEAD-TRIP_NO.
        PERFORM REFRESH_9002.
      WHEN 2.

      WHEN 3.

      WHEN 4.
        MESSAGE I003 DISPLAY LIKE 'E'.
        PERFORM REFRESH_9002.

      WHEN OTHERS.
    ENDCASE.
  ENDIF.
ENDFORM.                    " UDB_UPDATAION
*&---------------------------------------------------------------------*
*&      Form  EDIT_AUTHORIZATON
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EDIT_AUTHORIZATON .


 DATA : CREA_AUT TYPE T001W-WERKS.

  SELECT SINGLE WERKS FROM T001W INTO CREA_AUT WHERE NAME1 EQ IP_FLOC.


*  SELECT SINGLE FROM_CODE INTO EDIT_AUT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN .
*
*  AUTHORITY-CHECK OBJECT 'ZTRIP'
*           ID 'WERKS' FIELD CREA_AUT.
*  IF SY-SUBRC = 0.
*    AUTHORITY-CHECK OBJECT 'ZTRIP'
*               ID 'ACTVT' FIELD '01'.
*    IF SY-SUBRC <> 0.
*      MESSAGE 'Authorization Required' TYPE 'E'.
*    ENDIF.
*  ELSE.
*    MESSAGE 'Authorization Required' TYPE 'E'.
*  ENDIF.


  DATA : EDIT_AUT TYPE T001W-WERKS.

  DATA : EDIT1_AUT TYPE T001W-WERKS.

  DATA : EDIT2_AUT TYPE T001W-WERKS.

  SELECT  FROM_CODE UP TO 1 ROWS INTO EDIT1_AUT FROM ZFREIGHT_HEADER WHERE TRIP_NO EQ IP_TRN  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation
  SELECT MAPPING_PLANT INTO EDIT2_AUT UP TO 1 ROWS FROM ZTRIP_PLANT WHERE PLANT EQ EDIT1_AUT  ORDER BY PRIMARY KEY.
  ENDSELECT. " Added by <IT-CAR Tool> during Code Remediation

  AUTHORITY-CHECK OBJECT 'ZTRIP'
             ID 'ACTVT' FIELD '01'.
  IF SY-SUBRC = 0.
    AUTHORITY-CHECK OBJECT 'ZTRIP'
         ID 'WERKS' FIELD EDIT1_AUT.
    IF SY-SUBRC <> 0.
      MESSAGE 'Authorization Required' TYPE 'E'.
    ENDIF.
  ELSE.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'ZTRIP'
             ID 'ACTVT' FIELD '01'.
  IF SY-SUBRC = 0.
    AUTHORITY-CHECK OBJECT 'ZTRIP'
         ID 'WERKS' FIELD EDIT2_AUT.
    IF SY-SUBRC <> 0.
      MESSAGE 'Authorization Required' TYPE 'E'.
    ENDIF.
  ELSE.
    MESSAGE 'Authorization Required' TYPE 'E'.
  ENDIF.


ENDFORM.                    " EDIT_AUTHORIZATON
