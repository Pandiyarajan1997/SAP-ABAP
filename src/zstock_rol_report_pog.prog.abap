* *&---------------------------------------------------------------------*
*& Report  ZSTOCK_ROL_REPORT_POG
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT ZSTOCK_ROL_REPORT_POG.

TABLES : ZWH_BRN.

TYPES : BEGIN OF GS_FINAL1,
        WERKS	TYPE  WERKS_D,
        NAME1 TYPE  NAME1,
        END OF GS_FINAL1.

TYPES : BEGIN OF GS_FINAL2,
        WERKS1 TYPE  WERKS_D,
        NAME1_1  TYPE NAME1,
        END OF GS_FINAL2.

TYPES : BEGIN OF GS_T001,
        BUKRS TYPE T001-BUKRS,
        BUTXT TYPE T001-BUTXT,
        END OF GS_T001.

TYPES : BEGIN OF GS_T001W,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
        VKORG TYPE T001W-VKORG,
        WERKS3 TYPE CHAR8,
        END OF GS_T001W .

TYPES : BEGIN OF GS_MARA,
        MATNR TYPE MARA-MATNR,
        MTART TYPE MARA-MTART,
        MEINS TYPE MARA-MEINS,
        SPART TYPE MARA-SPART,
        END OF GS_MARA .

TYPES : BEGIN OF GS_MARC,
        MATNR TYPE MARC-MATNR,
        WERKS TYPE MARC-WERKS,
        MINBE TYPE MARC-MINBE,
        WERKS2 TYPE CHAR8,
        END OF GS_MARC.

TYPES : BEGIN OF GS_MARD,
        MATNR TYPE MARD-MATNR,
        WERKS TYPE MARD-WERKS,
        LGORT TYPE MARD-LGORT,
        LABST TYPE MARD-LABST,
        END OF GS_MARD .

TYPES : BEGIN OF GS_FINAL ,
        BUKRS TYPE T001-BUKRS,
        BUTXT TYPE T001-BUTXT,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
        VKORG TYPE T001W-VKORG,
        MATNR TYPE MARA-MATNR,
        MATNR1 TYPE MARD-MATNR,
        MTART TYPE MARA-MTART,
        MINBE TYPE MARC-MINBE,
        LABST TYPE MARD-LABST,
        MEINS TYPE MARA-MEINS,
        SPART TYPE MARA-SPART,
        MATNR2 TYPE MARC-MATNR,
        WERKS2 TYPE CHAR8,
        WERKS3 TYPE CHAR8,
        END OF GS_FINAL .

DATA : GT_T001 TYPE TABLE OF GS_T001,
       WA_T001 TYPE GS_T001,
       GT_T001W TYPE TABLE OF GS_T001W,
       WA_T001W TYPE GS_T001W ,
       GT_MARA TYPE TABLE OF GS_MARA,
       WA_MARA TYPE GS_MARA,
       GT_MARD TYPE TABLE OF GS_MARD,
       WA_MARD TYPE GS_MARD,
       GT_MARC TYPE TABLE OF GS_MARC,
       WA_MARC TYPE GS_MARC,
       GT_FINAL TYPE TABLE OF GS_FINAL,
       WA_FINAL TYPE GS_FINAL ,
       IT_FINAL TYPE TABLE OF GS_FINAL,
       WT_FINAL TYPE GS_FINAL .


DATA:     L_STRUCTURE  TYPE REF TO DATA,
          L_TABLE      TYPE REF TO DATA,
          STRUC_DESC   TYPE REF TO CL_ABAP_STRUCTDESCR,
          LT_LAYOUT    TYPE SLIS_LAYOUT_ALV,
          WA_FCAT  TYPE LVC_S_FCAT,
          T_FCAT  TYPE  LVC_T_FCAT,
          LS_FIELDCATALOGUE TYPE SLIS_FIELDCAT_ALV,
          LT_FIELDCATALOGUE TYPE SLIS_T_FIELDCAT_ALV,
          T_HEADER TYPE SLIS_T_LISTHEADER,
          WA_HEADER TYPE SLIS_LISTHEADER.

FIELD-SYMBOLS :
  <IT_TABLE>    TYPE STANDARD TABLE, <FS_FLD>,
  <FS_WA> TYPE ANY,
  <DYN_STR> TYPE ANY,
  <STR_COMP> TYPE ABAP_COMPDESCR.


DATA : GT_FINAL1 TYPE STANDARD TABLE OF GS_FINAL1,
       WA_FINAL1 TYPE GS_FINAL1.

DATA : GT_FINAL2 TYPE STANDARD TABLE OF GS_FINAL2,
       WA_FINAL2 TYPE GS_FINAL2.

DATA : LV_BUKRS TYPE T001-BUKRS,
       LV_WERKS TYPE T001W-WERKS,
       BT_PLANT TYPE T001W-WERKS.

DATA : IT_FIELDCAT  TYPE TABLE OF SLIS_FIELDCAT_ALV,
       WA_FIELDCAT  LIKE LINE OF IT_FIELDCAT,
       IT_SORT TYPE SLIS_T_SORTINFO_ALV,
       WA_SORT LIKE LINE OF IT_SORT .

DATA : ALL TYPE CHAR3,
       TEXT TYPE STRING.


DATA: IT_RETURN LIKE DDSHRETVAL OCCURS 0 WITH HEADER LINE.
DATA: IT_RETURN1 LIKE DDSHRETVAL OCCURS 0 WITH HEADER LINE.

DATA : GV_LINES TYPE STRING.
DATA : GV_POS TYPE I.



SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE  ZTITLE.
PARAMETERS : P_BUKRS TYPE T001-BUKRS OBLIGATORY,
             P_PLANT TYPE WERKS .
SELECT-OPTIONS : BR_PLANT FOR BT_PLANT.
SELECTION-SCREEN SKIP 1.

PARAMETERS : STOCK   RADIOBUTTON GROUP RB1,
             ROL    RADIOBUTTON GROUP RB1,
             STROL  RADIOBUTTON GROUP RB1.
SELECTION-SCREEN END OF BLOCK B1.


INITIALIZATION.

  ZTITLE = 'STOCK VS ROL REPORT'.



AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_PLANT.

  PERFORM SEARCH_HELP.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR BR_PLANT-LOW.
  PERFORM BRANCH_SEARCH_HELP.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR BR_PLANT-HIGH.
  PERFORM BRANCH_SEARCH_HELP_1.
*&---------------------------------------------------------------------*
*&      Form  SEARCH_HELP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEARCH_HELP .


  SELECT  WERKS
          NAME1
          FROM ZWH_BRN INTO TABLE GT_FINAL1 WHERE BUKRS =  P_BUKRS.
  SORT GT_FINAL1 BY WERKS ASCENDING.
  DELETE ADJACENT DUPLICATES FROM GT_FINAL1 COMPARING WERKS.


  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*   DDIC_STRUCTURE         = ' '
      RETFIELD               = 'WERKS'
*   PVALKEY                = ' '
*   DYNPPROG               = ' '
*   DYNPNR                 = ' '
     DYNPROFIELD            = 'P_PLANT'
*   STEPL                  = 0
*   WINDOW_TITLE           =
     VALUE                  = 'TEXT'
     VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
    TABLES
      VALUE_TAB            = GT_FINAL1
*   FIELD_TAB              =    wa_final-werks
     RETURN_TAB            = IT_RETURN
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
            .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  WRITE IT_RETURN-FIELDVAL TO P_PLANT.
*  REFRESH GT_FINAL1.


  SELECT  WERKS1
          NAME1_1
          FROM ZWH_BRN INTO TABLE GT_FINAL2 WHERE WERKS =  P_PLANT.

  LOOP AT GT_FINAL2 INTO WA_FINAL2.
    IF TEXT = ' '.
      WA_FINAL2-WERKS1 = 'ALL'.
      WA_FINAL2-NAME1_1 = 'ALL BRANCH'.
      APPEND WA_FINAL2 TO GT_FINAL2.

      TEXT = 1.
    ENDIF.
  ENDLOOP.
  SORT GT_FINAL2 BY WERKS1 ASCENDING.
  DELETE ADJACENT DUPLICATES FROM GT_FINAL2 COMPARING WERKS1.

ENDFORM.                    " SEARCH_HELP
*&---------------------------------------------------------------------*
*&      Form  BRANCH_SEARCH_HELP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BRANCH_SEARCH_HELP .
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
     EXPORTING
*   DDIC_STRUCTURE         = ' '
       RETFIELD               = 'WERKS1'
*   PVALKEY                = ' '
    DYNPPROG               = SY-CPROG
    DYNPNR                 = SY-DYNNR
    DYNPROFIELD            = 'BR_PLANT'
*   STEPL                  = 0
*   WINDOW_TITLE           =
*   VALUE                  = ' '
      VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
     TABLES
       VALUE_TAB              = GT_FINAL2
*   FIELD_TAB              =
*     RETURN_TAB             = IT_RETURN1
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
             .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.                    " BRANCH_SEARCH_HELP
*&---------------------------------------------------------------------*
*&      Form  BRANCH_SEARCH_HELP_1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BRANCH_SEARCH_HELP_1 .


  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*   DDIC_STRUCTURE         = ' '
      RETFIELD               = 'WERKS1'
*   PVALKEY                = ' '
   DYNPPROG               = SY-CPROG
   DYNPNR                 = SY-DYNNR
   DYNPROFIELD            = 'BR_PLANT'
*   STEPL                  = 0
*   WINDOW_TITLE           =
*   VALUE                  = ' '
     VALUE_ORG              = 'S'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
    TABLES
      VALUE_TAB              = GT_FINAL2.
*   FIELD_TAB              =
*     RETURN_TAB             = IT_RETURN1
*   DYNPFLD_MAPPING        =
* EXCEPTIONS
*   PARAMETER_ERROR        = 1
*   NO_VALUES_FOUND        = 2
*   OTHERS                 = 3
  .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
*
*  WRITE IT_RETURN1-FIELDVAL TO BR_PLANT.
*  REFRESH GT_FINAL1.


ENDFORM.                    " BRANCH_SEARCH_HELP_1

START-OF-SELECTION.

  IF STOCK  = 'X'.

    PERFORM DATA_RETRIEVAL_STOCK.
    PERFORM BUILD_ALV.
    PERFORM TOP-OF-PAGE.


  ELSEIF ROL = 'X'.
    PERFORM DATA_RETRIEVAL_ROL.
    PERFORM BUILD_ALV.
    PERFORM TOP-OF-PAGE.

  ELSEIF STROL  = 'X'.
    PERFORM DATA_RETRIEVAL_STOCK_ROL.
    PERFORM BUILD_ALV.
    PERFORM TOP-OF-PAGE.



  ENDIF.
*&---------------------------------------------------------------------*
*&      Form  DATA_RETRIEVAL_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DATA_RETRIEVAL_STOCK .
  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MATNR'.
  WA_FCAT-SCRTEXT_L = 'Material'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MATNR'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Material'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.

  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MAKTX'.
  WA_FCAT-SCRTEXT_L = 'Description'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MAKTX'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Description'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.

  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MEINS'.
  WA_FCAT-SCRTEXT_L = 'Unit of Measure'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MEINS'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Unit of Measure'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'SPART'.
  WA_FCAT-SCRTEXT_L = 'Division'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'SPART'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Division'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


  IF  BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT
            WERKS1
            NAME1_1 FROM ZWH_BRN INTO TABLE GT_FINAL2 WHERE  WERKS = P_PLANT.

    SELECT WERKS
           NAME1
           VKORG
           FROM T001W INTO TABLE GT_T001W WHERE WERKS = P_PLANT.

    LOOP AT GT_FINAL2 INTO WA_FINAL2.
      WA_T001W-WERKS = WA_FINAL2-WERKS1.
      WA_T001W-NAME1 = WA_FINAL2-NAME1_1.
      APPEND WA_T001W TO GT_T001W.
    ENDLOOP.

  ELSE.

    SELECT WERKS
           NAME1
           VKORG
           FROM T001W INTO TABLE GT_T001W
           WHERE VKORG EQ P_BUKRS AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).
  ENDIF.


  SELECT MATNR
         MTART
         MEINS
         SPART
         FROM MARA INTO TABLE GT_MARA WHERE MTART EQ 'FERT'.

  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT MATNR
           WERKS
           LGORT
           LABST
           FROM MARD INTO TABLE GT_MARD FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR AND LGORT = '0006'.

  ELSE.
    SELECT MATNR
           WERKS
           LGORT
           LABST
           FROM MARD INTO TABLE GT_MARD FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR  AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ) AND LGORT = '0006' .
  ENDIF.



  LOOP AT GT_T001W INTO WA_T001W.

    WA_FCAT-OUTPUTLEN = '18'.
    WA_FCAT-FIELDNAME = WA_T001W-WERKS.
    WA_FCAT-SCRTEXT_L = WA_T001W-NAME1.
    APPEND WA_FCAT TO T_FCAT.

    LS_FIELDCATALOGUE-OUTPUTLEN = '18'.
    LS_FIELDCATALOGUE-FIELDNAME = WA_T001W-WERKS.
    LS_FIELDCATALOGUE-SELTEXT_L = WA_T001W-NAME1.
    APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.
*    ADD 1 TO LV_COUNT.

  ENDLOOP.


  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = T_FCAT
    IMPORTING
      EP_TABLE        = L_TABLE.

  ASSIGN L_TABLE->* TO <IT_TABLE>.
  CREATE DATA L_TABLE LIKE LINE OF <IT_TABLE>.
  ASSIGN L_TABLE->* TO <FS_WA>.



  LOOP AT GT_MARA INTO WA_MARA .
    MOVE-CORRESPONDING WA_MARA TO WA_FINAL.
    APPEND WA_FINAL TO GT_FINAL.
    CLEAR WA_FINAL .
  ENDLOOP.

  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.


    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_T001W INTO WA_T001W.
        LOOP AT GT_MARD INTO WA_MARD WHERE   MATNR = WA_FINAL-MATNR AND  WERKS = WA_T001W-WERKS.
          WA_FINAL-MATNR1 = WA_MARD-MATNR.
          WA_FINAL-WERKS = WA_MARD-WERKS.
          WA_FINAL-LABST = WA_MARD-LABST.

          MODIFY GT_FINAL FROM WA_FINAL  INDEX SY-TABIX  TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation

        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ELSE.

    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_MARD INTO WA_MARD WHERE MATNR = WA_FINAL-MATNR AND ( WERKS  =  P_PLANT OR WERKS IN BR_PLANT ).
        WA_FINAL-MATNR1 = WA_MARD-MATNR.
        WA_FINAL-WERKS = WA_MARD-WERKS.
        WA_FINAL-LABST = WA_MARD-LABST.

        MODIFY GT_FINAL FROM WA_FINAL INDEX SY-TABIX TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation

      ENDLOOP.
    ENDLOOP.
  ENDIF.


  LOOP AT GT_MARA INTO WA_MARA.

    ASSIGN COMPONENT 'MATNR' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATNR
      IMPORTING
        OUTPUT = <FS_FLD>.
    UNASSIGN <FS_FLD>.

    ASSIGN COMPONENT 'MAKTX' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE MAKTX
      INTO <FS_FLD>
      FROM MAKT
      WHERE MATNR = WA_MARA-MATNR
        AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.

    ASSIGN COMPONENT 'MEINS' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE MEINS
      INTO <FS_FLD>
      FROM MARA
      WHERE MATNR = WA_MARA-MATNR.
*          AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.
*
    ASSIGN COMPONENT 'SPART' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE SPART
      INTO <FS_FLD>
      FROM MARA
      WHERE MATNR = WA_MARA-MATNR.
*          AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.

    LOOP AT GT_MARD INTO WA_MARD WHERE MATNR = WA_MARA-MATNR.

      READ TABLE T_FCAT
           INTO WA_FCAT
      WITH KEY FIELDNAME = WA_MARD-WERKS.

      IF SY-SUBRC EQ 0.
        ASSIGN COMPONENT WA_FCAT-FIELDNAME OF STRUCTURE <FS_WA> TO <FS_FLD>.
        <FS_FLD> = WA_MARD-LABST.
        UNASSIGN <FS_FLD>.
      ENDIF.

    ENDLOOP.

    COLLECT <FS_WA> INTO <IT_TABLE>.
    CLEAR: <FS_WA>,WA_MARD,WA_FCAT.
  ENDLOOP.

ENDFORM.                    " DATA_RETRIEVAL_STOCK
*&---------------------------------------------------------------------*
*&      Form  BUILD_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BUILD_ALV .

  LT_LAYOUT-ZEBRA = 'X'.
  LT_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM     = SY-REPID
      I_CALLBACK_TOP_OF_PAGE = 'TOP-OF-PAGE'
      IS_LAYOUT              = LT_LAYOUT
      IT_FIELDCAT            = LT_FIELDCATALOGUE
    TABLES
      T_OUTTAB               = <IT_TABLE>
    EXCEPTIONS
      PROGRAM_ERROR          = 1
      OTHERS                 = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.








ENDFORM.                    " BUILD_ALV
*&---------------------------------------------------------------------*
*&      Form  DATA_RETRIEVAL_ROL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DATA_RETRIEVAL_ROL .


  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MATNR'.
  WA_FCAT-SCRTEXT_L = 'Material'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MATNR'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Material'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.

  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MAKTX'.
  WA_FCAT-SCRTEXT_L = 'Description'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MAKTX'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Description'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.

  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MEINS'.
  WA_FCAT-SCRTEXT_L = 'Unit of Measure'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MEINS'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Unit of Measure'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'SPART'.
  WA_FCAT-SCRTEXT_L = 'Division'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'SPART'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Division'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


  IF  BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT
            WERKS1
            NAME1_1 FROM ZWH_BRN INTO TABLE GT_FINAL2 WHERE  WERKS = P_PLANT.

    SELECT WERKS
           NAME1
           VKORG
           FROM T001W INTO TABLE GT_T001W WHERE WERKS = P_PLANT.

    LOOP AT GT_FINAL2 INTO WA_FINAL2.
      WA_T001W-WERKS = WA_FINAL2-WERKS1.
      WA_T001W-NAME1 = WA_FINAL2-NAME1_1.
      APPEND WA_T001W TO GT_T001W.
    ENDLOOP.

  ELSE.

    SELECT WERKS
           NAME1
           VKORG
           FROM T001W INTO TABLE GT_T001W
           WHERE VKORG EQ P_BUKRS AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).
  ENDIF.


  SELECT MATNR
         MTART
         MEINS
         SPART
         FROM MARA INTO TABLE GT_MARA WHERE MTART EQ 'FERT'.


  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT  MATNR
            WERKS
            MINBE
            FROM MARC INTO TABLE GT_MARC FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR. "AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).

  ELSE.

    SELECT  MATNR
            WERKS
            MINBE
            FROM MARC INTO TABLE GT_MARC FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).
  ENDIF.


  DATA: LV_COUNT TYPE STRING.     "CHAR2 VALUE '1'.
  CLEAR:WA_FCAT,LS_FIELDCATALOGUE.

  LOOP AT GT_T001W INTO WA_T001W.

    WA_FCAT-OUTPUTLEN = '18'.
    WA_FCAT-FIELDNAME = WA_T001W-WERKS.
    WA_FCAT-SCRTEXT_L = WA_T001W-NAME1.
    APPEND WA_FCAT TO T_FCAT.

    LS_FIELDCATALOGUE-OUTPUTLEN = '18'.
    LS_FIELDCATALOGUE-FIELDNAME = WA_T001W-WERKS.
    LS_FIELDCATALOGUE-SELTEXT_L = WA_T001W-NAME1.
    APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.
*    ADD 1 TO LV_COUNT.

  ENDLOOP.


  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = T_FCAT
    IMPORTING
      EP_TABLE        = L_TABLE.

  ASSIGN L_TABLE->* TO <IT_TABLE>.
  CREATE DATA L_TABLE LIKE LINE OF <IT_TABLE>.
  ASSIGN L_TABLE->* TO <FS_WA>.


  LOOP AT GT_MARA INTO WA_MARA .
    MOVE-CORRESPONDING WA_MARA TO WA_FINAL.
    APPEND WA_FINAL TO GT_FINAL.
    CLEAR WA_FINAL .
  ENDLOOP.

  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.


    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_T001W INTO WA_T001W.
        LOOP AT GT_MARC INTO WA_MARC WHERE   MATNR = WA_FINAL-MATNR AND  WERKS = WA_T001W-WERKS.
          WA_FINAL-MATNR1 = WA_MARC-MATNR.
          WA_FINAL-WERKS = WA_MARC-WERKS.
          WA_FINAL-MINBE = WA_MARC-MINBE.

          MODIFY GT_FINAL FROM WA_FINAL  INDEX SY-TABIX  TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation

        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ELSE.

    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_MARC INTO WA_MARC WHERE MATNR = WA_FINAL-MATNR AND ( WERKS  =  P_PLANT OR WERKS IN BR_PLANT ).
        WA_FINAL-MATNR1 = WA_MARC-MATNR.
        WA_FINAL-WERKS = WA_MARC-WERKS.
        WA_FINAL-MINBE = WA_MARC-MINBE.

        MODIFY GT_FINAL FROM WA_FINAL INDEX SY-TABIX TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation

      ENDLOOP.
    ENDLOOP.
  ENDIF.



  LOOP AT GT_MARA INTO WA_MARA.

    ASSIGN COMPONENT 'MATNR' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATNR
      IMPORTING
        OUTPUT = <FS_FLD>.
    UNASSIGN <FS_FLD>.

    ASSIGN COMPONENT 'MAKTX' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE MAKTX
      INTO <FS_FLD>
      FROM MAKT
      WHERE MATNR = WA_MARA-MATNR
        AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.

    ASSIGN COMPONENT 'MEINS' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE MEINS
      INTO <FS_FLD>
      FROM MARA
      WHERE MATNR = WA_MARA-MATNR.
*          AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.
*
    ASSIGN COMPONENT 'SPART' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE SPART
      INTO <FS_FLD>
      FROM MARA
      WHERE MATNR = WA_MARA-MATNR.
*          AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.

    LOOP AT GT_MARC INTO WA_MARC WHERE MATNR = WA_MARA-MATNR.

      READ TABLE T_FCAT
           INTO WA_FCAT
      WITH KEY FIELDNAME = WA_MARC-WERKS.

      IF SY-SUBRC EQ 0.
        ASSIGN COMPONENT WA_FCAT-FIELDNAME OF STRUCTURE <FS_WA> TO <FS_FLD>.
        <FS_FLD> = WA_MARC-MINBE.
        UNASSIGN <FS_FLD>.
      ENDIF.

    ENDLOOP.

    COLLECT <FS_WA> INTO <IT_TABLE>.
    CLEAR: <FS_WA>,WA_MARC,WA_FCAT.
  ENDLOOP.


ENDFORM.                    " DATA_RETRIEVAL_ROL
*&---------------------------------------------------------------------*
*&      Form  DATA_RETRIEVAL_STOCK_ROL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DATA_RETRIEVAL_STOCK_ROL .
  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MATNR'.
  WA_FCAT-SCRTEXT_L = 'Material'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MATNR'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Material'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.

  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MAKTX'.
  WA_FCAT-SCRTEXT_L = 'Description'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MAKTX'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Description'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.

  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'MEINS'.
  WA_FCAT-SCRTEXT_L = 'Unit of Measure'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'MEINS'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Unit of Measure'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


  WA_FCAT-OUTPUTLEN = '18'.
  WA_FCAT-FIELDNAME = 'SPART'.
  WA_FCAT-SCRTEXT_L = 'Division'.
  APPEND WA_FCAT TO T_FCAT.
  LS_FIELDCATALOGUE-FIELDNAME = 'SPART'.
  LS_FIELDCATALOGUE-SELTEXT_L = 'Division'.
  APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


  IF  BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT
            WERKS1
            NAME1_1 FROM ZWH_BRN INTO TABLE GT_FINAL2 WHERE  WERKS = P_PLANT.

    SELECT WERKS
           NAME1
           VKORG
           FROM T001W INTO TABLE GT_T001W WHERE WERKS = P_PLANT.

    LOOP AT GT_FINAL2 INTO WA_FINAL2.
      WA_T001W-WERKS = WA_FINAL2-WERKS1.
      WA_T001W-NAME1 = WA_FINAL2-NAME1_1.
      APPEND WA_T001W TO GT_T001W.
    ENDLOOP.

  ELSE.

    SELECT WERKS
           NAME1
           VKORG
           FROM T001W INTO TABLE GT_T001W
           WHERE VKORG EQ P_BUKRS AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).
  ENDIF.


  SELECT MATNR
         MTART
         MEINS
         SPART
         FROM MARA INTO TABLE GT_MARA WHERE MTART EQ 'FERT'.


  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT MATNR
         WERKS
          LGORT
         LABST
         FROM MARD INTO TABLE GT_MARD FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR AND LGORT = '0006'.

  ELSE.
    SELECT MATNR
           WERKS
           LGORT
           LABST
           FROM MARD INTO TABLE GT_MARD FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR  AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ) AND LGORT = '0006'.
  ENDIF.


  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    SELECT  MATNR
            WERKS
            MINBE
            FROM MARC INTO TABLE GT_MARC FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR. "AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).
    SORT GT_MARC BY WERKS ASCENDING.

  ELSE.

    SELECT  MATNR
            WERKS
            MINBE
            FROM MARC INTO TABLE GT_MARC FOR ALL ENTRIES IN GT_MARA WHERE MATNR = GT_MARA-MATNR AND ( WERKS = P_PLANT OR WERKS IN BR_PLANT ).
    SORT GT_MARC BY WERKS ASCENDING.
  ENDIF.



  LOOP AT GT_MARC INTO WA_MARC.
    CONCATENATE '1' WA_MARC-WERKS INTO  WA_MARC-WERKS2.
    MODIFY GT_MARC FROM WA_MARC TRANSPORTING WERKS2.
  ENDLOOP.


  LOOP AT GT_T001W INTO WA_T001W.
    LOOP AT GT_MARC INTO WA_MARC  WHERE WERKS = WA_T001W-WERKS.
      WA_T001W-WERKS3 = WA_MARC-WERKS2.
      MODIFY  GT_T001W FROM WA_T001W TRANSPORTING WERKS3.
    ENDLOOP.
  ENDLOOP.


  LOOP AT GT_MARA INTO WA_MARA .
    MOVE-CORRESPONDING WA_MARA TO WA_FINAL.
    APPEND WA_FINAL TO GT_FINAL.
    CLEAR WA_FINAL.
  ENDLOOP.



  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.

    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_T001W INTO WA_T001W.
        LOOP AT GT_MARD INTO WA_MARD WHERE   MATNR = WA_FINAL-MATNR AND  WERKS = WA_T001W-WERKS.
          WA_FINAL-MATNR1 = WA_MARD-MATNR.
          WA_FINAL-WERKS = WA_MARD-WERKS.
          WA_FINAL-LABST = WA_MARD-LABST.
          MODIFY GT_FINAL FROM WA_FINAL  INDEX SY-TABIX  TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ELSE.
    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_MARD INTO WA_MARD WHERE MATNR = WA_FINAL-MATNR AND ( WERKS  =  P_PLANT OR WERKS IN BR_PLANT ).
        WA_FINAL-MATNR1 = WA_MARD-MATNR.
        WA_FINAL-WERKS = WA_MARD-WERKS.
        WA_FINAL-LABST = WA_MARD-LABST.
        MODIFY GT_FINAL FROM WA_FINAL INDEX SY-TABIX TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
      ENDLOOP.
    ENDLOOP.
  ENDIF.


  IF BR_PLANT-LOW = 'ALL' OR BR_PLANT-HIGH = 'ALL'.


    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_T001W INTO WA_T001W.
        LOOP AT GT_MARC INTO WA_MARC WHERE   MATNR = WA_FINAL-MATNR AND  WERKS = WA_T001W-WERKS.
          WA_FINAL-MATNR2 = WA_MARC-MATNR.
          WA_FINAL-WERKS2 = WA_MARC-WERKS.
          WA_FINAL-MINBE = WA_MARC-MINBE.

          MODIFY GT_FINAL FROM WA_FINAL  INDEX SY-TABIX  TRANSPORTING WERKS MATNR1 LABST. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation

        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ELSE.

    LOOP AT GT_FINAL INTO WA_FINAL.
      LOOP AT GT_MARC INTO WA_MARC WHERE MATNR = WA_FINAL-MATNR AND ( WERKS  =  P_PLANT OR WERKS IN BR_PLANT ).
        WA_FINAL-MATNR2 = WA_MARC-MATNR.
        WA_FINAL-WERKS2 = WA_MARC-WERKS.
        WA_FINAL-MINBE = WA_MARC-MINBE.
        MODIFY GT_FINAL FROM WA_FINAL INDEX SY-TABIX TRANSPORTING WERKS2 MATNR2 MINBE.

      ENDLOOP.
    ENDLOOP.
  ENDIF.

  LOOP AT GT_T001W INTO WA_T001W.
    WA_FCAT-OUTPUTLEN = '18'.
    WA_FCAT-TABNAME = 'GT_MARD'.
    WA_FCAT-FIELDNAME = WA_T001W-WERKS.
    WA_FCAT-SCRTEXT_L =  WA_T001W-NAME1.
    APPEND WA_FCAT TO T_FCAT.


    LS_FIELDCATALOGUE-OUTPUTLEN = '18'.
    LS_FIELDCATALOGUE-TABNAME = 'GT_MARD'.
    LS_FIELDCATALOGUE-FIELDNAME = WA_T001W-WERKS.
    LS_FIELDCATALOGUE-SELTEXT_L =  WA_T001W-NAME1.
    APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.


    WA_FCAT-OUTPUTLEN = '18'.
    WA_FCAT-TABNAME = 'GT_MARC'.
    LS_FIELDCATALOGUE-TABNAME = 'GT_MARC'.
    WA_FCAT-FIELDNAME = WA_T001W-WERKS3.
    WA_FCAT-SCRTEXT_L =  WA_T001W-NAME1.
    APPEND WA_FCAT TO T_FCAT.


    LS_FIELDCATALOGUE-OUTPUTLEN = '18'.
    LS_FIELDCATALOGUE-TABNAME = 'GT_MARC'.
    LS_FIELDCATALOGUE-FIELDNAME = WA_T001W-WERKS3.
    LS_FIELDCATALOGUE-SELTEXT_L =  WA_T001W-NAME1.
    APPEND LS_FIELDCATALOGUE TO LT_FIELDCATALOGUE.
  ENDLOOP.




  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = T_FCAT
    IMPORTING
      EP_TABLE        = L_TABLE.

  ASSIGN L_TABLE->* TO <IT_TABLE>.
  CREATE DATA L_TABLE LIKE LINE OF <IT_TABLE>.
  ASSIGN L_TABLE->* TO <FS_WA>.



  LOOP AT GT_MARA INTO WA_MARA.

    ASSIGN COMPONENT 'MATNR' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATNR
      IMPORTING
        OUTPUT = <FS_FLD>.
    UNASSIGN <FS_FLD>.

    ASSIGN COMPONENT 'MAKTX' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE MAKTX
      INTO <FS_FLD>
      FROM MAKT
      WHERE MATNR = WA_MARA-MATNR
        AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.

    ASSIGN COMPONENT 'MEINS' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE MEINS
      INTO <FS_FLD>
      FROM MARA
      WHERE MATNR = WA_MARA-MATNR.
*          AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.
*
    ASSIGN COMPONENT 'SPART' OF STRUCTURE <FS_WA> TO <FS_FLD>.
    SELECT SINGLE SPART
      INTO <FS_FLD>
      FROM MARA
      WHERE MATNR = WA_MARA-MATNR.
*          AND SPRAS = SY-LANGU.
    UNASSIGN <FS_FLD>.


    LOOP AT GT_MARD INTO WA_MARD WHERE MATNR = WA_MARA-MATNR.
      READ TABLE T_FCAT
           INTO WA_FCAT
           WITH KEY FIELDNAME =  WA_MARD-WERKS.
      IF SY-SUBRC EQ 0.
        ASSIGN COMPONENT WA_FCAT-FIELDNAME OF STRUCTURE <FS_WA> TO <FS_FLD>.
        <FS_FLD> = WA_MARD-LABST.
        UNASSIGN <FS_FLD>.
      ENDIF.
    ENDLOOP.


    LOOP AT GT_MARC INTO WA_MARC WHERE MATNR = WA_MARA-MATNR.

      READ TABLE T_FCAT
                 INTO WA_FCAT
                 WITH KEY FIELDNAME = WA_MARC-WERKS2.
      IF SY-SUBRC EQ 0.
        ASSIGN COMPONENT WA_FCAT-FIELDNAME OF STRUCTURE <FS_WA> TO <FS_FLD>.
        <FS_FLD> = WA_MARC-MINBE.
        UNASSIGN <FS_FLD>.
      ENDIF.
    ENDLOOP.


    COLLECT <FS_WA> INTO <IT_TABLE>.
    CLEAR: <FS_WA>, WA_MARC,WA_MARD ,WA_FCAT.

  ENDLOOP.



ENDFORM.                    " DATA_RETRIEVAL_STOCK_ROL
*&---------------------------------------------------------------------*
*&      Form  STOCK_ROL_ALV_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM STOCK_ROL_ALV_DISPLAY .

  LT_LAYOUT-ZEBRA = 'X'.
  LT_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      IS_LAYOUT     = LT_LAYOUT
      IT_FIELDCAT   = LT_FIELDCATALOGUE
    TABLES
      T_OUTTAB      = <IT_TABLE>
    EXCEPTIONS
      PROGRAM_ERROR = 1
      OTHERS        = 2.
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


ENDFORM.                    " STOCK_ROL_ALV_DISPLAY
*&---------------------------------------------------------------------*
*&      Form  TOP-OF-PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TOP-OF-PAGE .


  DATA: LS_LIST_TOP_OF_PAGE TYPE SLIS_LISTHEADER,
        LT_LIST_TOP_OF_PAGE TYPE SLIS_T_LISTHEADER.

  DATA: T_LINE LIKE LS_LIST_TOP_OF_PAGE-INFO,
        LD_LINES TYPE I,
        LD_LINESC(10) TYPE C,
        LV_PLANT TYPE STRING.


*
*  LS_LIST_TOP_OF_PAGE-TYP  = 'S'.
*  LS_LIST_TOP_OF_PAGE-info  = 'STOCK REPORT'.
*  APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE.




  CLEAR LS_LIST_TOP_OF_PAGE.
  LS_LIST_TOP_OF_PAGE-TYP  = 'S'.
  LS_LIST_TOP_OF_PAGE-KEY  = 'Plant:'.
  LS_LIST_TOP_OF_PAGE-INFO = P_BUKRS.
  APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE.

  IF  BR_PLANT-HIGH IS NOT INITIAL .
    LS_LIST_TOP_OF_PAGE = 'S' .
    LS_LIST_TOP_OF_PAGE-KEY = 'Branch Code:' .
    CONCATENATE  BR_PLANT-LOW   'TO'     BR_PLANT-HIGH INTO LV_PLANT.
    LS_LIST_TOP_OF_PAGE-INFO = LV_PLANT.
    APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE .
  ELSE.

    LS_LIST_TOP_OF_PAGE = 'S' .
    LS_LIST_TOP_OF_PAGE-KEY = 'Branch Code:' .
    CONCATENATE  BR_PLANT-LOW   BR_PLANT-HIGH INTO LV_PLANT.
    LS_LIST_TOP_OF_PAGE-INFO = LV_PLANT.
    APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE .
  ENDIF.


  LS_LIST_TOP_OF_PAGE = 'S' .
  LS_LIST_TOP_OF_PAGE-KEY = 'Username :' .
  LS_LIST_TOP_OF_PAGE-INFO = SY-UNAME .
  APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE .


  LS_LIST_TOP_OF_PAGE-TYP = 'S'.
  LS_LIST_TOP_OF_PAGE-KEY = 'Date : '.
  CONCATENATE SY-DATUM+6(2) '.'
  SY-DATUM+4(2) '.'
  SY-DATUM(4) INTO LS_LIST_TOP_OF_PAGE-INFO. "todays date
  APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE.
  CLEAR:LS_LIST_TOP_OF_PAGE.

  DESCRIBE TABLE GT_FINAL LINES LD_LINES.
  LS_LIST_TOP_OF_PAGE-TYP = 'S'.
  LS_LIST_TOP_OF_PAGE-KEY = 'Total No of Record:'.
  LS_LIST_TOP_OF_PAGE-INFO = LD_LINES.
  APPEND LS_LIST_TOP_OF_PAGE TO LT_LIST_TOP_OF_PAGE.
  CLEAR:LS_LIST_TOP_OF_PAGE, T_LINE.



  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = LT_LIST_TOP_OF_PAGE
      I_LOGO             = 'ZLOGO'.



ENDFORM.                    " TOP-OF-PAGE
