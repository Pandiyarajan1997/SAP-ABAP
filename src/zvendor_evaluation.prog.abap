*&---------------------------------------------------------------------*
*& Report  Z_VEN_EVA
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT ZVENDOR_EVALUATION.

TABLES:MSEG.

TYPE-POOLS:SLIS.

TYPES:BEGIN OF TY_MSEG,
  MBLNR TYPE MSEG-MBLNR,
  MJAHR TYPE MSEG-MJAHR,
  ZEILE TYPE MSEG-ZEILE, "YEAR
  BWART TYPE MSEG-BWART,
  MATNR TYPE MSEG-MATNR,
  WERKS TYPE MSEG-WERKS,
  LIFNR TYPE MSEG-LIFNR,
  MENGE TYPE MSEG-MENGE,
  EBELN TYPE MSEG-EBELN,
  EBELP TYPE MSEG-EBELP,
  LFBNR TYPE MSEG-LFBNR,
  SMBLN TYPE MSEG-SMBLN,
  BUDAT TYPE MSEG-BUDAT_MKPF,
  END OF TY_MSEG.

DATA: IT_MSEG TYPE TABLE OF TY_MSEG,
      WA_MSEG TYPE TY_MSEG.
DATA: IT_MSEG_TEM TYPE TABLE OF TY_MSEG,
      WA_MSEG_TEM TYPE TY_MSEG.

TYPES:BEGIN OF TY_MSEG1,
  MBLNR TYPE MSEG-MBLNR,
  BWART TYPE MSEG-BWART,
  MJAHR TYPE MSEG-MJAHR,
  ZEILE TYPE MSEG-ZEILE, "year
  MATNR TYPE MSEG-MATNR,
  WERKS TYPE MSEG-WERKS,
  LIFNR TYPE MSEG-LIFNR,
  MENGE TYPE MSEG-MENGE,
  EBELN TYPE MSEG-EBELN,
  EBELP TYPE MSEG-EBELP,
  LFBNR TYPE MSEG-LFBNR,
  SMBLN TYPE MSEG-SMBLN,
  BUDAT TYPE MSEG-BUDAT_MKPF,
  MONTH TYPE INT2,
  YEAR  TYPE MSEG-MJAHR,
  END OF TY_MSEG1.

DATA: IT_MSEG1 TYPE TABLE OF TY_MSEG1,
      WA_MSEG1 TYPE TY_MSEG1.

DATA: IT_MSEG2 TYPE TABLE OF TY_MSEG1,
      WA_MSEG2 TYPE TY_MSEG1.

DATA: IT_MSEG_PORE TYPE TABLE OF TY_MSEG1,
      WA_MSEG_PORE TYPE TY_MSEG1.

DATA: IT_QAMS TYPE TABLE OF TY_MSEG1,
      WA_QAMS TYPE TY_MSEG1.

DATA: IT_MARA TYPE TABLE OF MARA,
      WA_MARA TYPE MARA.

DATA: IT_MAKT TYPE TABLE OF MAKT,
      WA_MAKT TYPE MAKT.

TYPES:BEGIN OF TY_LFA1,
  LIFNR TYPE LFA1-LIFNR,
  LAND1 TYPE LFA1-LAND1,
  NAME1 TYPE LFA1-NAME1,
  KTOKK TYPE LFA1-KTOKK,
  END OF TY_LFA1.

DATA: IT_LFA1 TYPE TABLE OF TY_LFA1,
      WA_LFA1 TYPE TY_LFA1.

TYPES : BEGIN OF TY_EKKO,
  EBELN TYPE EKKO-EBELN,
  BSART TYPE EKKO-BSART,
  END OF TY_EKKO.

DATA: IT_EKKO TYPE TABLE OF TY_EKKO,
      WA_EKKO TYPE TY_EKKO.

TYPES:BEGIN OF TY_EKET,
  EBELN TYPE EKET-EBELN,
  EBELP TYPE EKET-EBELP,
  ETENR TYPE EKET-ETENR,
  EINDT TYPE EKET-EINDT,
  MENGE TYPE EKET-MENGE,
  BEDAT TYPE EKET-BEDAT,
  END OF TY_EKET.

DATA: IT_EKET TYPE TABLE OF TY_EKET,
      WA_EKET TYPE TY_EKET.

TYPES:BEGIN OF TY_EKET1.
        INCLUDE TYPE TY_EKET.
TYPES : MONTH TYPE INT2.
TYPES : YEAR  TYPE MSEG-MJAHR.
TYPES:END OF TY_EKET1.

DATA: IT_EKET1 TYPE TABLE OF TY_EKET1,
      WA_EKET1 TYPE TY_EKET1.


DATA: IT_NUM TYPE TABLE OF TY_EKET,
      WA_NUM TYPE TY_EKET.

DATA: EKET_QUN TYPE EKET-MENGE,
      MSEG_QUN TYPE MSEG-MENGE,
      QALS_QUA TYPE QALS-LMENGE02.

TYPES:BEGIN OF TY_DAT,
        DATE TYPE SY-DATUM,
      END OF TY_DAT.

DATA: IT_DT TYPE TABLE OF TY_DAT,
      WA_DT TYPE TY_DAT.

DATA: IT_MON TYPE TABLE OF T247,
      WA_MON TYPE T247.

DATA: MON_YER TYPE CHAR10.


TYPES:BEGIN OF TY_FINAL,
  MATNR TYPE MSEG-MATNR,
  MAKTX TYPE MAKT-MAKTX,
  LIFNR TYPE LFA1-LIFNR,
  NAME1 TYPE LFA1-NAME1,
  WERKS TYPE MSEG-WERKS,
  BUDAT TYPE MSEG-BUDAT_MKPF,
  MONTH TYPE INT2,
  MON_DES TYPE CHAR10,
  QUANT TYPE MSEG-MENGE,
  QUALI TYPE QALS-LMENGE02,
  KBETR TYPE MSEG-MENGE,   "AMOUNT
  SERVC TYPE INT2,
  TOTAL TYPE INT2,
  YEAR TYPE MSEG-MJAHR, "ONLY TYPE IS DECLARE NOT IMPLEMENT
  COUNT TYPE I,
  END OF TY_FINAL.

DATA: IT_FINAL TYPE TABLE OF TY_FINAL,
      WA_FINAL TYPE TY_FINAL.

DATA: IT_FINAL3 TYPE TABLE OF TY_FINAL,
      WA_FINAL3 TYPE TY_FINAL.

DATA: IT_FINAL1 TYPE TABLE OF TY_FINAL,
      WA_FINAL1 TYPE TY_FINAL.

DATA: IT_FINAL2 TYPE TABLE OF TY_FINAL,
      WA_FINAL2 TYPE TY_FINAL.

DATA: IT_FINAL_AMT TYPE TABLE OF TY_FINAL,
      WA_FINAL_AMT TYPE TY_FINAL.

DATA: IT_FINAL_AMT1 TYPE TABLE OF TY_FINAL,
      WA_FINAL_AMT1 TYPE TY_FINAL.

DATA: IT_PRICE TYPE TABLE OF TY_FINAL,
      WA_PRICE TYPE TY_FINAL.

TYPES:BEGIN OF TY_LESAMT,
  MATNR TYPE MARA-MATNR,
  LIFNR TYPE LFA1-LIFNR,
  WERKS TYPE T001W-WERKS,
  AMUNT TYPE  MSEG-MENGE,
  MONTH TYPE INT2,
  END OF TY_LESAMT.

DATA: IT_LESAMT TYPE TABLE OF TY_LESAMT,
      WA_LESAMT TYPE TY_LESAMT.

DATA: IT_LESAMT_IV TYPE TABLE OF TY_LESAMT,
      WA_LESAMT_IV TYPE TY_LESAMT.

DATA: IT_LESAMT1 TYPE TABLE OF TY_LESAMT,
      WA_LESAMT1 TYPE TY_LESAMT.

DATA: IT_LESAMT1_IV TYPE TABLE OF TY_LESAMT,
      WA_LESAMT1_IV TYPE TY_LESAMT.



TYPES: BEGIN OF TY_QALS,
  PRUEFLOS TYPE QALS-PRUEFLOS,
  WERK TYPE QALS-WERK,
  SELMATNR TYPE QALS-SELMATNR,
  SELLIFNR TYPE QALS-SELLIFNR,
  EBELN TYPE QALS-EBELN,
  EBELP TYPE QALS-EBELP,
  BUDAT TYPE QALS-BUDAT,
  LMENGE02 TYPE QALS-LMENGE02,
  LMENGE04 TYPE QALS-LMENGE04,
  END OF TY_QALS.

DATA: IT_QALS TYPE TABLE OF TY_QALS,
      WA_QALS TYPE TY_QALS.

TYPES:BEGIN OF TY_QALS1.
        INCLUDE TYPE TY_QALS .
TYPES : MONTH TYPE INT2.
TYPES : YEAR TYPE MSEG-MJAHR.
TYPES: END OF TY_QALS1.

DATA: IT_QALS1 TYPE TABLE OF TY_QALS1,
      WA_QALS1 TYPE TY_QALS1.

TYPES:BEGIN OF TY_EKBE,
  EBELN TYPE EKBE-EBELN,
  EBELP TYPE EKBE-EBELP,
  ZEKKN TYPE EKBE-ZEKKN,
  VGABE TYPE EKBE-VGABE,
  GJAHR TYPE EKBE-GJAHR,
  BELNR TYPE EKBE-BELNR,
  BUZEI TYPE EKBE-BUZEI,
  BWART TYPE EKBE-BWART,
  BUDAT TYPE EKBE-BUDAT,
  MENGE TYPE EKBE-MENGE,
  DMBTR TYPE EKBE-DMBTR,
  WAERS TYPE EKBE-WAERS,
  LFBNR TYPE EKBE-LFBNR, "ADDED PR@$@TH ON 14.01.2019
  MATNR TYPE EKBE-MATNR,
  WERKS TYPE EKBE-WERKS,
  END OF TY_EKBE.

DATA: IT_EKBE TYPE TABLE OF TY_EKBE,
      WA_EKBE TYPE TY_EKBE,
      WA_EKBE_TEM TYPE TY_EKBE.

TYPES:BEGIN OF TY_EKBE1,
    EBELN TYPE EKBE-EBELN,
    EBELP TYPE EKBE-EBELP,
    ZEKKN TYPE EKBE-ZEKKN,
    VGABE TYPE EKBE-VGABE,
    GJAHR TYPE EKBE-GJAHR,
    BELNR TYPE EKBE-BELNR,
    BUZEI TYPE EKBE-BUZEI,
    BWART TYPE EKBE-BWART,
    BUDAT TYPE EKBE-BUDAT,
    MENGE TYPE EKBE-MENGE,
    DMBTR TYPE EKBE-DMBTR,
    WAERS TYPE EKBE-WAERS,
    LFBNR TYPE EKBE-LFBNR, "ADDED PR@$@TH ON 14.01.2019
    MATNR TYPE EKBE-MATNR,
    WERKS TYPE EKBE-WERKS,
    MONTH TYPE INT2,
    TOTAL TYPE EKBE-DMBTR,
END OF TY_EKBE1.

DATA: IT_EKBE1 TYPE TABLE OF TY_EKBE1,
      WA_EKBE1 TYPE TY_EKBE1.

DATA: IT_TEM_EKBE TYPE TABLE OF TY_EKBE1,
      WA_TEM_EKBE TYPE TY_EKBE1.

DATA: IT_FIELDCAT TYPE TABLE OF SLIS_FIELDCAT_ALV,
      WA_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

DATA: IT_HEADER TYPE SLIS_T_LISTHEADER,
      WA_HEADER TYPE SLIS_LISTHEADER.

DATA : LAYOUT TYPE SLIS_LAYOUT_ALV.

DATA: MATNR_LOW TYPE MSEG-MATNR,
      MATNR_HIG TYPE MSEG-MATNR,
      MATNR_CON TYPE CHAR50.

DATA: LIFNR_LOW TYPE MSEG-LIFNR,
      LIFNR_HIG TYPE MSEG-LIFNR,
      LIFNR_CON TYPE CHAR50.

DATA: WERKS_LOW TYPE MSEG-WERKS,
      WERKS_HIG TYPE MSEG-WERKS,
      WERKS_CON TYPE CHAR50.

DATA: BUDAT_LOW TYPE MSEG-BUDAT_MKPF,
      BUDAT_HIG TYPE MSEG-BUDAT_MKPF,
      BUDAT_CON TYPE CHAR50.

DATA: BUDAT_LOW_FM TYPE SY-DATUM,
      BUDAT_HIG_FM TYPE SY-DATUM.

DATA: MON TYPE I,
      YER TYPE I.

DATA: DATLOW TYPE SY-DATUM,
      DATHIG TYPE SY-DATUM.

DATA: A017_MON TYPE I,
      A017_YER TYPE I.

DATA: PRICE_PER TYPE MSEG-MENGE.

DATA: TM TYPE I.

DATA: CO TYPE I.

DATA :REPT TYPE I.

TYPES:BEGIN OF TY_NUM,
  NUM TYPE I,
  END OF TY_NUM.


SELECTION-SCREEN:BEGIN OF BLOCK VENEVA WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: S_MATNR FOR MSEG-MATNR.
SELECT-OPTIONS: S_LIFNR FOR MSEG-LIFNR.
SELECT-OPTIONS: S_WERKS FOR MSEG-WERKS.
SELECT-OPTIONS: S_BUDAT FOR MSEG-BUDAT_MKPF.
SELECTION-SCREEN:END OF BLOCK VENEVA.

START-OF-SELECTION.
  PERFORM GET_DATA.
  PERFORM READ_DATA.
  PERFORM FIELDCAT.
  PERFORM ALV_DISPLAY.

END-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA .

  BUDAT_LOW = S_BUDAT-LOW.
  BUDAT_HIG = S_BUDAT-HIGH.

  CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
    EXPORTING
      I_DATE_FROM    = BUDAT_LOW
*     I_KEY_DAY_FROM =
      I_DATE_TO      = BUDAT_HIG
*     I_KEY_DAY_TO   =
*     I_FLG_SEPARATE = ' '
    IMPORTING
*     E_DAYS         =
      E_MONTHS       = MON
*     E_YEARS        =
    .
  IF S_MATNR IS NOT INITIAL OR S_LIFNR IS NOT INITIAL OR S_WERKS IS NOT INITIAL OR S_BUDAT IS NOT INITIAL.

    IF S_BUDAT-LOW IS NOT INITIAL AND S_BUDAT-HIGH IS NOT INITIAL .

      IF MON <= '12' .

        SELECT * FROM T247 INTO TABLE IT_MON WHERE SPRAS ='EN'.

        SELECT * FROM MARA INTO TABLE IT_MARA WHERE MATNR IN S_MATNR AND ( MTART EQ 'ROH' OR MTART EQ 'VERP' ) .

        IF IT_MARA IS NOT INITIAL .

          SELECT * FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_MARA WHERE MATNR EQ IT_MARA-MATNR.

          SELECT  LIFNR
                  LAND1
                  NAME1
                  KTOKK FROM LFA1 INTO TABLE IT_LFA1 WHERE LIFNR IN S_LIFNR AND ( KTOKK = 'YB01' OR KTOKK = 'YBIV' ) .

          IF IT_LFA1 IS NOT INITIAL.

            SELECT  MBLNR
                    MJAHR
                    ZEILE "year
                    BWART
                    MATNR
                    WERKS
                    LIFNR
                    MENGE
                    EBELN
                    EBELP
                    LFBNR
                    SMBLN
                    BUDAT_MKPF FROM MSEG INTO TABLE IT_MSEG FOR ALL ENTRIES IN IT_MARA WHERE MATNR EQ IT_MARA-MATNR AND MATNR IN S_MATNR AND BUDAT_MKPF IN S_BUDAT
                                                                                                        AND LIFNR IN S_LIFNR AND WERKS IN S_WERKS AND MATNR <> ' '
                                                                                           AND LIFNR <> ' '  AND WERKS <> ' ' AND ( BWART = '101' OR BWART = '102' ) .

            SELECT  EBELN
                    BSART FROM EKKO INTO TABLE IT_EKKO FOR ALL ENTRIES IN IT_MSEG WHERE EBELN = IT_MSEG-EBELN AND ( BSART = 'ZNB' OR BSART = 'ZIM' OR BSART = 'ZLP' ) .


            SELECT  EBELN
                    EBELP
                    ETENR
                    EINDT
                    MENGE
                    BEDAT FROM EKET INTO TABLE IT_EKET FOR ALL ENTRIES IN IT_MSEG WHERE EBELN EQ IT_MSEG-EBELN AND EBELP EQ IT_MSEG-EBELP.

            SELECT  PRUEFLOS
                    WERK
                    SELMATNR
                    SELLIFNR
                    EBELN
                    EBELP
                    BUDAT
                    LMENGE02
                    LMENGE04  FROM QALS INTO TABLE IT_QALS FOR ALL ENTRIES IN IT_MSEG WHERE EBELN EQ IT_MSEG-EBELN AND EBELP EQ IT_MSEG-EBELP
                                                                                         AND WERK EQ IT_MSEG-WERKS AND BUDAT EQ IT_MSEG-BUDAT
                                                                                         AND MATNR EQ IT_MSEG-MATNR AND LIFNR EQ IT_MSEG-LIFNR
                                                                                         AND SELMATNR <> ' ' AND SELLIFNR <> ' ' AND WERK <> ' '   .

            SELECT  EBELN
                    EBELP
                    ZEKKN
                    VGABE
                    GJAHR
                    BELNR
                    BUZEI
                    BWART
                    BUDAT
                    MENGE
                    DMBTR
                    WAERS
                    LFBNR
                    MATNR
                    WERKS FROM EKBE INTO TABLE IT_EKBE FOR ALL ENTRIES IN IT_MSEG WHERE EBELN = IT_MSEG-EBELN AND
                                                                                  EBELP = IT_MSEG-EBELP AND
                                                                                  BELNR = IT_MSEG-MBLNR AND
                                                                                  BUZEI = IT_MSEG-ZEILE .
            IF IT_MSEG IS INITIAL .
              MESSAGE 'Please Enter Valid Entry' TYPE 'I' DISPLAY LIKE 'E'.
              SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
            ENDIF.

          ELSE.
            MESSAGE 'Please Enter YB01 Or YBIV Vendor Type Only' TYPE 'I' DISPLAY LIKE 'E'.
            SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
          ENDIF.

        ELSE.
          MESSAGE 'Please Enter ROH Or VERP Material Type Only' TYPE 'I' DISPLAY LIKE 'E'.
          SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
        ENDIF.

      ELSE.
        MESSAGE 'Please Enter Lessthen One Year Date' TYPE 'I' DISPLAY LIKE 'E'.
        SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
      ENDIF.

    ELSE.
      MESSAGE 'Please Enter From & To Date' TYPE 'I' DISPLAY LIKE 'E'.
      SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
    ENDIF.

  ELSE.
    MESSAGE 'Please Enter Atleast Date' TYPE 'I' DISPLAY LIKE 'E'.
    SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
  ENDIF.


ENDFORM.                    " GET_DATA7


*&---------------------------------------------------------------------*
*&      Form  READ_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM READ_DATA.

  APPEND LINES OF IT_MSEG TO IT_MSEG_TEM .

  SORT IT_MSEG_TEM BY EBELN ASCENDING.

  DELETE ADJACENT DUPLICATES FROM IT_MSEG_TEM COMPARING EBELN .

  LOOP AT IT_MSEG_TEM INTO WA_MSEG_TEM.
    READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_MSEG_TEM-EBELN .
    IF WA_EKKO IS INITIAL.
      DELETE IT_MSEG WHERE EBELN = WA_MSEG_TEM-EBELN.
      DELETE IT_QALS WHERE EBELN = WA_MSEG_TEM-EBELN.
      DELETE IT_EKET WHERE EBELN = WA_MSEG_TEM-EBELN.
      DELETE IT_EKBE WHERE EBELN = WA_MSEG_TEM-EBELN.
    ENDIF.
    CLEAR : WA_EKKO .
  ENDLOOP.

******************************************************MSEG TABLE  FILTER VENDAR (YB01 & YBIV)***************************************************
  LOOP AT IT_MSEG INTO WA_MSEG .
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_MSEG-LIFNR.
    IF WA_LFA1 IS INITIAL .
      DELETE IT_MSEG WHERE  LIFNR = WA_MSEG-LIFNR.
    ENDIF.
  ENDLOOP.
*****************************************************MSEG TABLE  FILTER VENDAR (YB01 & YBIV)*****************************************************

  LOOP AT IT_MSEG INTO WA_MSEG.
    WA_MSEG1-MBLNR = WA_MSEG-MBLNR.
    WA_MSEG1-MJAHR = WA_MSEG-MJAHR.
    WA_MSEG1-ZEILE = WA_MSEG-ZEILE.
    WA_MSEG1-BWART = WA_MSEG-BWART .
    WA_MSEG1-MATNR = WA_MSEG-MATNR.
    WA_MSEG1-WERKS = WA_MSEG-WERKS .
    WA_MSEG1-LIFNR = WA_MSEG-LIFNR .
    WA_MSEG1-MENGE = WA_MSEG-MENGE .
    WA_MSEG1-EBELN = WA_MSEG-EBELN .
    WA_MSEG1-EBELP = WA_MSEG-EBELP .
    WA_MSEG1-LFBNR = WA_MSEG-LFBNR .
    WA_MSEG1-SMBLN = WA_MSEG-SMBLN .
    WA_MSEG1-BUDAT = WA_MSEG-BUDAT.
    WA_MSEG1-MONTH = WA_MSEG-BUDAT+4(2) .
    WA_MSEG1-YEAR = WA_MSEG-BUDAT(4).
    APPEND: WA_MSEG1 TO IT_MSEG1.
    APPEND: WA_MSEG1 TO IT_MSEG2.
  ENDLOOP.

  LOOP AT IT_QALS INTO WA_QALS.
    WA_QALS1 = WA_QALS.
    WA_QALS1-MONTH = WA_QALS-BUDAT+4(2).
    WA_QALS1-YEAR = WA_QALS-BUDAT(4) .
    APPEND : WA_QALS1 TO IT_QALS1 .
  ENDLOOP.

  LOOP AT IT_EKET INTO WA_EKET.
    WA_EKET1 = WA_EKET.
    WA_EKET1-MONTH = WA_EKET-EINDT+4(2).
    WA_EKET1-YEAR = WA_EKET-EINDT(4) .
    APPEND : WA_EKET1 TO IT_EKET1 .
  ENDLOOP.

*****************************************************MSEG (PO REVERSAL FILTER)**********************************************************************

  LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE BWART = '102'.
    WA_MSEG_PORE = WA_MSEG1.
    APPEND : WA_MSEG_PORE TO IT_MSEG_PORE .
  ENDLOOP.

  LOOP AT IT_MSEG_PORE INTO WA_MSEG_PORE.

    LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE MATNR = WA_MSEG_PORE-MATNR AND LIFNR = WA_MSEG_PORE-LIFNR AND WERKS = WA_MSEG_PORE-WERKS
                                                                    AND BWART = '101' AND (  MBLNR = WA_MSEG_PORE-LFBNR OR MBLNR = WA_MSEG_PORE-SMBLN ) .

      DELETE IT_MSEG2 WHERE ( MBLNR = WA_MSEG_PORE-LFBNR OR MBLNR = WA_MSEG_PORE-SMBLN ).
      DELETE IT_MSEG2 WHERE MBLNR = WA_MSEG_PORE-MBLNR.
      DELETE IT_EKBE  WHERE EBELN = WA_MSEG_PORE-EBELN AND EBELP = WA_MSEG_PORE-EBELP AND ( BELNR = WA_MSEG_PORE-LFBNR OR BELNR = WA_MSEG_PORE-SMBLN ).
      DELETE IT_EKBE  WHERE EBELN = WA_MSEG_PORE-EBELN AND EBELP = WA_MSEG_PORE-EBELP AND BELNR = WA_MSEG_PORE-MBLNR .

    ENDLOOP.
  ENDLOOP.

*****************************************************MSEG (PO REVERSAL FILTER)**********************************************************************

  REFRESH IT_MSEG1.

  APPEND LINES OF IT_MSEG2 TO IT_MSEG1 .

  APPEND LINES OF IT_MSEG1 TO IT_QAMS.
  SORT IT_MSEG1 BY MATNR WERKS LIFNR MONTH YEAR.
  SORT IT_QAMS BY MATNR WERKS LIFNR EBELN EBELP.

  DELETE ADJACENT DUPLICATES FROM IT_MSEG1 COMPARING MATNR LIFNR WERKS MONTH YEAR.
  DELETE ADJACENT DUPLICATES FROM IT_QAMS COMPARING MATNR LIFNR WERKS EBELN EBELP MONTH YEAR .

  LOOP AT IT_EKBE INTO WA_EKBE.
    WA_EKBE1 = WA_EKBE.
    WA_EKBE1-MONTH = WA_EKBE-BUDAT+4(2).
    WA_EKBE1-TOTAL = WA_EKBE-DMBTR / WA_EKBE-MENGE .
    APPEND: WA_EKBE1 TO IT_EKBE1.
  ENDLOOP.

  LOOP AT IT_MSEG1 INTO WA_MSEG1.


    LOOP AT IT_MSEG2 INTO WA_MSEG2 WHERE MATNR = WA_MSEG1-MATNR AND LIFNR = WA_MSEG1-LIFNR AND WERKS = WA_MSEG1-WERKS AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR.
      MSEG_QUN = MSEG_QUN + WA_MSEG2-MENGE.
      LOOP AT IT_EKBE1 INTO WA_EKBE1 WHERE EBELN = WA_MSEG2-EBELN AND EBELP = WA_MSEG2-EBELP AND BELNR = WA_MSEG2-MBLNR AND BUZEI = WA_MSEG2-ZEILE .
        WA_FINAL-KBETR = WA_FINAL-KBETR + WA_EKBE1-TOTAL .
        CO = CO + 1 .
      ENDLOOP.
    ENDLOOP.

**********************************DELIVERY PROCESS CALCULATION*********************************************************************************

    LOOP AT IT_MSEG2 INTO WA_MSEG2 WHERE MATNR = WA_MSEG1-MATNR AND LIFNR = WA_MSEG1-LIFNR AND WERKS = WA_MSEG1-WERKS AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR.
      READ TABLE IT_EKKO INTO  WA_EKKO WITH KEY EBELN = WA_MSEG2-EBELN.
      IF WA_EKKO-BSART = 'ZLP'.
        LOOP AT IT_EKET INTO WA_EKET WHERE EBELN = WA_MSEG2-EBELN AND EINDT < WA_MSEG2-BUDAT AND EBELP = WA_MSEG2-EBELP AND MENGE = WA_MSEG2-MENGE .
          EKET_QUN = EKET_QUN + WA_MSEG2-MENGE.
        ENDLOOP.
      ELSE.
        LOOP AT IT_EKET INTO WA_EKET WHERE EBELN = WA_MSEG2-EBELN AND EINDT < WA_MSEG2-BUDAT AND EBELP = WA_MSEG2-EBELP.
          EKET_QUN = EKET_QUN + WA_MSEG2-MENGE.
        ENDLOOP.
      ENDIF.
      CLEAR:WA_EKKO.
    ENDLOOP.

    WA_FINAL-QUANT = ( ( ( MSEG_QUN - EKET_QUN ) / MSEG_QUN ) *  40 ).

*   PR@$@TH Added ON 12.11.2018
    IF WA_FINAL-QUANT < '0.000'.
      CLEAR: EKET_QUN.
      LOOP AT IT_MSEG2 INTO WA_MSEG2 WHERE MATNR = WA_MSEG1-MATNR AND LIFNR = WA_MSEG1-LIFNR AND WERKS = WA_MSEG1-WERKS AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR.
        LOOP AT IT_EKET INTO WA_EKET WHERE EBELN = WA_MSEG2-EBELN AND EINDT < WA_MSEG2-BUDAT AND EBELP = WA_MSEG2-EBELP.
          EKET_QUN = EKET_QUN + WA_MSEG2-MENGE.
          EXIT. "#EC CI_NOORDER " Added by <IT-CAR Tool> during Code Remediation
        ENDLOOP.
      ENDLOOP.
      CLEAR: WA_FINAL-QUANT.
      WA_FINAL-QUANT = ( ( ( MSEG_QUN - EKET_QUN ) / MSEG_QUN ) *  40 ).
    ENDIF.

**********************************DELIVERY PROCESS CALCULATION*********************************************************************************

**********************************QUALITY PROCESS CALCULATION*********************************************************************************

    LOOP AT IT_QALS1 INTO WA_QALS1 WHERE SELMATNR = WA_MSEG1-MATNR AND WERK = WA_MSEG1-WERKS AND SELLIFNR = WA_MSEG1-LIFNR
                                                                    AND MONTH = WA_MSEG1-MONTH AND YEAR = WA_MSEG1-YEAR .

      QALS_QUA =  QALS_QUA + WA_QALS1-LMENGE02 + WA_QALS1-LMENGE04 .
    ENDLOOP.

    WA_FINAL-QUALI = ( ( ( MSEG_QUN - QALS_QUA ) / MSEG_QUN ) *  40 ).

**********************************QUALITY PROCESS CALCULATION*********************************************************************************

**********************************AMOUNT PROCESS CALCULATION*********************************************************************************

    WA_FINAL-KBETR = WA_FINAL-KBETR / CO .

**********************************AMOUNT PROCESS CALCULATION*********************************************************************************

    READ TABLE IT_MON INTO WA_MON WITH KEY MNR = WA_MSEG1-BUDAT+4(2).
    READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_MSEG1-MATNR.
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_MSEG1-LIFNR.

    SHIFT WA_MSEG1-MATNR LEFT DELETING LEADING '0'.
    SHIFT WA_MSEG1-LIFNR LEFT DELETING LEADING '0'.

    WA_FINAL-MATNR = WA_MSEG1-MATNR .
    WA_FINAL-MAKTX = WA_MAKT-MAKTX .
    WA_FINAL-LIFNR = WA_MSEG1-LIFNR .
    WA_FINAL-NAME1 = WA_LFA1-NAME1 .
    WA_FINAL-WERKS = WA_MSEG1-WERKS .
    WA_FINAL-BUDAT = WA_MSEG1-BUDAT.
    WA_FINAL-MONTH = WA_MSEG1-BUDAT+4(2) .
    CONCATENATE WA_MON-KTX '/' WA_MSEG1-BUDAT(4) INTO MON_YER.
    WA_FINAL-MON_DES = MON_YER .
    WA_FINAL-YEAR = WA_MSEG1-BUDAT(4) .
    APPEND: WA_FINAL TO IT_FINAL.
    CLEAR: WA_FINAL , WA_MON , EKET_QUN , MSEG_QUN , QALS_QUA ,MON_YER , WA_EKET, WA_MSEG , CO .
  ENDLOOP.

  SORT IT_FINAL BY YEAR MONTH MATNR ASCENDING .

  APPEND LINES OF IT_FINAL TO IT_FINAL_AMT .

  APPEND LINES OF IT_FINAL_AMT TO IT_FINAL_AMT1.

  DELETE ADJACENT DUPLICATES FROM IT_FINAL_AMT1 COMPARING MATNR WERKS MONTH .

  LOOP AT IT_FINAL_AMT1 INTO WA_FINAL_AMT1.
    LOOP AT IT_FINAL_AMT INTO WA_FINAL_AMT WHERE MATNR = WA_FINAL_AMT1-MATNR AND WERKS = WA_FINAL_AMT1-WERKS AND MONTH = WA_FINAL_AMT1-MONTH .
      READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_FINAL_AMT-LIFNR.
      IF WA_LFA1-KTOKK = 'YB01'.
        WA_LESAMT-MATNR = WA_FINAL_AMT-MATNR.
        WA_LESAMT-LIFNR = WA_FINAL_AMT-LIFNR.
        WA_LESAMT-WERKS = WA_FINAL_AMT-WERKS.
        WA_LESAMT-AMUNT = WA_FINAL_AMT-KBETR.
        WA_LESAMT-MONTH = WA_FINAL_AMT-MONTH.
        APPEND: WA_LESAMT TO IT_LESAMT.
        CLEAR: WA_LESAMT.
      ELSE.
        WA_LESAMT_IV-MATNR = WA_FINAL_AMT-MATNR.
        WA_LESAMT_IV-LIFNR = WA_FINAL_AMT-LIFNR.
        WA_LESAMT_IV-WERKS = WA_FINAL_AMT-WERKS.
        WA_LESAMT_IV-AMUNT = WA_FINAL_AMT-KBETR.
        WA_LESAMT_IV-MONTH = WA_FINAL_AMT-MONTH.
        APPEND: WA_LESAMT_IV TO IT_LESAMT_IV.
        CLEAR: WA_LESAMT_IV.
      ENDIF.
    ENDLOOP.

    SORT IT_LESAMT BY AMUNT.
    SORT IT_LESAMT_IV BY AMUNT.

    DELETE ADJACENT DUPLICATES FROM IT_LESAMT COMPARING MATNR WERKS MONTH .
    DELETE ADJACENT DUPLICATES FROM IT_LESAMT_IV COMPARING MATNR WERKS MONTH .

    IF IT_LESAMT IS NOT INITIAL.
      APPEND LINES OF IT_LESAMT TO  IT_LESAMT1.
      REFRESH IT_LESAMT.
    ENDIF.

    IF IT_LESAMT_IV IS NOT INITIAL.
      APPEND LINES OF IT_LESAMT_IV TO IT_LESAMT1_IV.
      REFRESH IT_LESAMT_IV.
    ENDIF.

  ENDLOOP.

  SORT  IT_LESAMT1 BY MATNR.

  SORT IT_LESAMT_IV BY MATNR.

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1 COMPARING MATNR LIFNR WERKS MONTH .

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1_IV COMPARING MATNR LIFNR WERKS MONTH .

  SORT IT_LESAMT1 BY MONTH .

  SORT IT_LESAMT1_IV BY MONTH.

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1 COMPARING MATNR LIFNR WERKS MONTH.

  DELETE ADJACENT DUPLICATES FROM IT_LESAMT1_IV COMPARING MATNR LIFNR WERKS MONTH.

**************************************************************PRICE CALCULATION 10%********************************************************************
  APPEND LINES OF IT_FINAL TO IT_PRICE .

  LOOP AT IT_FINAL INTO WA_FINAL .
    LOOP AT IT_PRICE INTO WA_PRICE WHERE MATNR = WA_FINAL-MATNR AND MONTH = WA_FINAL-MONTH AND WERKS = WA_FINAL-WERKS .
      REPT = REPT + 1.
    ENDLOOP.

    LOOP AT IT_LESAMT1 INTO WA_LESAMT1 WHERE MATNR = WA_FINAL-MATNR AND WERKS = WA_FINAL-WERKS AND MONTH = WA_FINAL-MONTH.
      IF WA_FINAL-KBETR = WA_LESAMT1-AMUNT .
*        IF REPT <> 1.
        PRICE_PER = '10'.
        WA_FINAL-KBETR = PRICE_PER.
*          ELSE.
*            PRICE_PER = '5' .
*            WA_FINAL-KBETR = PRICE_PER .
*        ENDIF.
        MODIFY IT_FINAL FROM WA_FINAL.
        CLEAR: WA_FINAL , PRICE_PER.

      ELSE.
        IF WA_FINAL-KBETR > '0' .
          PRICE_PER = ( ( ( WA_FINAL-KBETR - WA_LESAMT1-AMUNT ) / WA_FINAL-KBETR ) * 10 ).
          CLEAR: WA_FINAL-KBETR.
          WA_FINAL-KBETR = PRICE_PER.
          MODIFY IT_FINAL FROM WA_FINAL.
          CLEAR: WA_FINAL , PRICE_PER.
        ENDIF.
      ENDIF.
    ENDLOOP.

    LOOP AT IT_LESAMT1_IV INTO WA_LESAMT1_IV WHERE MATNR = WA_FINAL-MATNR AND WERKS = WA_FINAL-WERKS AND MONTH = WA_FINAL-MONTH.
      IF WA_FINAL-KBETR = WA_LESAMT1_IV-AMUNT .
*        IF REPT <> 1.
*          PRICE_PER = '10'.
        WA_FINAL-KBETR = PRICE_PER.
*          ELSE.
*            PRICE_PER = '5' .
*            WA_FINAL-KBETR = PRICE_PER .
*        ENDIF.
        MODIFY IT_FINAL FROM WA_FINAL.
        CLEAR: WA_FINAL , PRICE_PER.

      ELSE.
        IF WA_FINAL-KBETR > '0' .
          PRICE_PER = ( ( ( WA_FINAL-KBETR - WA_LESAMT1_IV-AMUNT ) / WA_FINAL-KBETR ) * 10 ).
          CLEAR: WA_FINAL-KBETR.
          WA_FINAL-KBETR = PRICE_PER.
          MODIFY IT_FINAL FROM WA_FINAL.
          CLEAR: WA_FINAL , PRICE_PER.
        ENDIF.
      ENDIF.
    ENDLOOP.
    CLEAR: REPT.
  ENDLOOP.

  SORT IT_FINAL BY MATNR LIFNR WERKS MONTH .
**************************************************************PRICE CALCULATION 10%********************************************************************

  DELETE ADJACENT DUPLICATES FROM IT_FINAL COMPARING ALL FIELDS .

  SORT IT_FINAL BY YEAR MONTH MATNR WERKS LIFNR .

*******************************************************************(LP PROCESS REMOVE VALUES)*************************************************************

* PR@$@TH  removed on 12.11.2018
*  LOOP AT IT_FINAL INTO WA_FINAL WHERE QUANT < '0.000'.
*    WA_FINAL-QUALI = '0.000'.
*    WA_FINAL-QUANT = '0.000'.
*    MODIFY IT_FINAL FROM WA_FINAL .
*  ENDLOOP.

*******************************************************************(LP PROCESS REMOVE VALUES)*************************************************************

  IF IT_FINAL IS INITIAL.
    MESSAGE 'No Values Found' TYPE 'I' DISPLAY LIKE 'E'.
    SUBMIT ZVENDOR_EVALUATION VIA SELECTION-SCREEN.
  ENDIF.

ENDFORM.                    " READ_DATA

*&---------------------------------------------------------------------*
*&      Form  FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FIELDCAT .

  LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  LAYOUT-ZEBRA = 'X'.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '0'.
  WA_FIELDCAT-FIELDNAME = 'MATNR'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  WA_FIELDCAT-SELTEXT_M = 'Material'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '1'.
  WA_FIELDCAT-FIELDNAME = 'MAKTX'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_L = 'Material Description'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '2'.
  WA_FIELDCAT-FIELDNAME = 'LIFNR'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Vendor'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '3'.
  WA_FIELDCAT-FIELDNAME = 'NAME1'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_L = 'Vendor Name'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '4'.
  WA_FIELDCAT-FIELDNAME = 'WERKS'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Plant'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '5'.
  WA_FIELDCAT-FIELDNAME = 'QUALI'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Quality'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '6'.
  WA_FIELDCAT-FIELDNAME = 'QUANT'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Delivery'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '7'.
  WA_FIELDCAT-NO_ZERO = 'X' .
  WA_FIELDCAT-FIELDNAME = 'KBETR'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Price'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '8'.
  WA_FIELDCAT-NO_ZERO = 'X' .
  WA_FIELDCAT-FIELDNAME = 'SERVC'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Service'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '9'.
  WA_FIELDCAT-NO_ZERO = 'X' .
  WA_FIELDCAT-FIELDNAME = 'TOTAL'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_L = 'Vendor Performance Total'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.

  WA_FIELDCAT-ROW_POS = '1'.
  WA_FIELDCAT-COL_POS = '10'.
  WA_FIELDCAT-FIELDNAME = 'MON_DES'.
  WA_FIELDCAT-TABNAME = WA_FINAL ."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
  WA_FIELDCAT-SELTEXT_M = 'Month'.
  APPEND: WA_FIELDCAT TO IT_FIELDCAT.
  CLEAR: WA_FIELDCAT.


ENDFORM.                    " FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  ALV_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ALV_DISPLAY .

  WA_HEADER-TYP = 'H'.
  WA_HEADER-KEY = ''.
  WA_HEADER-INFO = 'Vendor Evaluation Report'.
  APPEND: WA_HEADER TO IT_HEADER.
  CLEAR: WA_HEADER.

  IF S_MATNR IS NOT INITIAL.
    MATNR_LOW = S_MATNR-LOW.
    MATNR_HIG = S_MATNR-HIGH.
    SHIFT MATNR_LOW LEFT DELETING LEADING '0' .
    SHIFT MATNR_HIG LEFT DELETING LEADING '0' .
    IF  MATNR_LOW IS NOT INITIAL AND MATNR_HIG IS NOT INITIAL.
      CONCATENATE MATNR_LOW ' TO ' MATNR_HIG INTO MATNR_CON."#EC CI_FLDEXT_OK[2215424]
      "Added by SPLABAP during code remediation
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Material : '.
      WA_HEADER-INFO = MATNR_CON.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ELSE.
      S_MATNR = MATNR_LOW.
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Material : '.
      WA_HEADER-INFO = S_MATNR."#EC CI_FLDEXT_OK[2215424]
  "Added by SPLABAP during code remediation
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ENDIF.
  ENDIF.

  IF S_LIFNR IS NOT INITIAL.
    LIFNR_LOW = S_LIFNR-LOW.
    LIFNR_HIG = S_LIFNR-HIGH.
    SHIFT LIFNR_LOW LEFT DELETING LEADING '0' .
    SHIFT LIFNR_HIG LEFT DELETING LEADING '0' .
    IF  LIFNR_LOW IS NOT INITIAL AND LIFNR_HIG IS NOT INITIAL.
      CONCATENATE LIFNR_LOW ' TO ' LIFNR_HIG INTO LIFNR_CON.
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Vendor : '.
      WA_HEADER-INFO = LIFNR_CON.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ELSE.
      S_LIFNR = LIFNR_LOW .
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Vendor : '.
      WA_HEADER-INFO = S_LIFNR.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ENDIF.
  ENDIF.

  IF S_WERKS IS NOT INITIAL.
    WERKS_LOW = S_WERKS-LOW.
    WERKS_HIG = S_WERKS-HIGH.
    IF  WERKS_LOW IS NOT INITIAL AND WERKS_HIG IS NOT INITIAL.
      CONCATENATE WERKS_LOW ' TO ' WERKS_HIG INTO WERKS_CON.
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Plant : '.
      WA_HEADER-INFO = WERKS_CON.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ELSE.
      S_WERKS = S_WERKS+3(4).
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Plant : '.
      WA_HEADER-INFO = S_WERKS.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ENDIF.
  ENDIF.

  IF S_BUDAT IS NOT INITIAL.
    BUDAT_LOW = S_BUDAT-LOW.
    BUDAT_HIG = S_BUDAT-HIGH.
    IF  BUDAT_LOW IS NOT INITIAL AND BUDAT_HIG IS NOT INITIAL.
      CONCATENATE S_BUDAT+6(2) '.' S_BUDAT+4(2) '.' S_BUDAT(4) INTO S_BUDAT.
      CONCATENATE BUDAT_LOW+6(2) '.' BUDAT_LOW+4(2) '.' BUDAT_LOW(4) ' TO ' BUDAT_HIG+6(2) '.' BUDAT_HIG+4(2) '.' BUDAT_HIG(4)  INTO BUDAT_CON.
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Date : '.
      WA_HEADER-INFO = BUDAT_CON.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ELSE.
      S_BUDAT = S_BUDAT+3(8).
      CONCATENATE S_BUDAT+6(2) '.' S_BUDAT+4(2) '.' S_BUDAT(4) INTO S_BUDAT.
      WA_HEADER-TYP = 'S'.
      WA_HEADER-KEY = 'Date : '.
      WA_HEADER-INFO = S_BUDAT.
      APPEND: WA_HEADER TO IT_HEADER.
      CLEAR: WA_HEADER.
    ENDIF.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
   EXPORTING
*     I_INTERFACE_CHECK                 = ' '
*     I_BYPASSING_BUFFER                = ' '
*     I_BUFFER_ACTIVE                   = ' '
      I_CALLBACK_PROGRAM                = SY-REPID
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
      I_CALLBACK_TOP_OF_PAGE            = 'TOP_OF_PAGE'
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME                  =
*     I_BACKGROUND_ID                   = ' '
*     I_GRID_TITLE                      =
*     I_GRID_SETTINGS                   =
      IS_LAYOUT                         = LAYOUT
      IT_FIELDCAT                       = IT_FIELDCAT
*     IT_EXCLUDING                      =
*     IT_SPECIAL_GROUPS                 =
*     IT_SORT                           =
*     IT_FILTER                         =
*     IS_SEL_HIDE                       =
*     I_DEFAULT                         = 'X'
*     I_SAVE                            = ' '
*     IS_VARIANT                        =
*     IT_EVENTS                         =
*     IT_EVENT_EXIT                     =
*     IS_PRINT                          =
*     IS_REPREP_ID                      =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE                 = 0
*     I_HTML_HEIGHT_TOP                 = 0
*     I_HTML_HEIGHT_END                 = 0
*     IT_ALV_GRAPHICS                   =
*     IT_HYPERLINK                      =
*     IT_ADD_FIELDCAT                   =
*     IT_EXCEPT_QINFO                   =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      T_OUTTAB                          = IT_FINAL
*   EXCEPTIONS
*     PROGRAM_ERROR                     = 1
*     OTHERS                            = 2
            .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    " ALV_DISPLAY

*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOP_OF_PAGE.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_HEADER
      I_LOGO             = 'ZSHEENLAC_LOGO'
*     I_END_OF_LIST_GRID =
*     I_ALV_FORM         =
    .
ENDFORM.                    "TOP_OF_PAGE
